{
    "0": " SELECT \nCOUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END) AS ratio\nFROM \ncustomers c;\t----- bird -----\tdebit_card_specializing",
    "1": " SELECT CustomerID, SUM(Consumption) as TotalConsumption\nFROM (\nSELECT \nCustomerID,\nDATE_FORMAT(STR_TO_DATE(LEFT(Date, 4) || '-' || SUBSTRING(Date, 6, 2) || '-01', '%X-%m-%d'), '%Y-%m') as Date,\nSUM(Amount * Price / 100) as Consumption\nFROM transactions_1k\nJOIN customers ON transactions_1k.CustomerID = customers.CustomerID\nWHERE customers.Segment = 'LAM' AND Date BETWEEN '201201' AND '201212'\nGROUP BY CustomerID, DATE_FORMAT(STR_TO_DATE(LEFT(Date, 4) || '-' || SUBSTRING(Date, 6, 2) || '-01', '%X-%m-%d'), '%Y-%m')\n) as YearMonthConsumption\nGROUP BY CustomerID\nORDER BY TotalConsumption ASC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "2": " SELECT AVG(Consumption/12) AS `Average Monthly Consumption`\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND CAST(SUBSTR(ym.Date, 1, 4) AS UNSIGNED) = 2013;\t----- bird -----\tdebit_card_specializing",
    "3": " SELECT\nSUM(CASE WHEN Currency = 'CZK' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN Consumption ELSE 0 END) AS Difference\nFROM (\nSELECT\nt1k.CustomerID,\nYEAR(t1k.Date) * 100 + MONTH(t1k.Date) AS YearMonth,\nSUM(t1k.Amount) / 100.0 AS Consumption,\np.Currency\nFROM transactions_1k t1k\nJOIN customers c ON t1k.CustomerID = c.CustomerID\nJOIN products p ON t1k.ProductID = p.ProductID\nWHERE t1k.Date BETWEEN '2012-01-01' AND '2012-12-31'\nGROUP BY t1k.CustomerID, YearMonth, p.Currency\n) yearmonth;\t----- bird -----\tdebit_card_specializing",
    "4": " SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Price) as TotalConsumption\nFROM transactions_1k\nJOIN products ON transactions_1k.ProductID = products.ProductID\nJOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID\nWHERE Currency = 'CZK'\nGROUP BY Year\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "5": " SELECT MAX(CAST(SUBSTR(Date, 5, 2) AS UNSIGNED)) as PeakMonth\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND Date BETWEEN '201301' AND '201312'\nGROUP BY CustomerID;\t----- bird -----\tdebit_card_specializing",
    "6": " SELECT\nLAM_SME_diff AS `SME - LAM`,\nLAM_KAM_diff AS `LAM - KAM`,\nKAM_SME_diff AS `KAM - SME`\nFROM\n(SELECT\n(SELECT AVG(Consumption) FROM\n(SELECT ym.CustomerID, SUM(t.Amount) / t.Quantity AS Consumption\nFROM yearmonth ym\nJOIN transactions_1k t ON ym.CustomerID = t.CustomerID\nWHERE ym.Date BETWEEN '201301' AND '201312' AND t.Currency = 'CZK' AND t.Price IS NOT NULL\nGROUP BY ym.CustomerID\nORDER BY Consumption\nLIMIT 1) AS least_SME) AS SME_avg,\n(SELECT AVG(Consumption) FROM\n(SELECT ym.CustomerID, SUM(t.Amount) / t.Quantity AS Consumption\nFROM yearmonth ym\nJOIN transactions_1k t ON ym.CustomerID = t.CustomerID\nWHERE ym.Date BETWEEN '201301' AND '201312' AND t.Currency = 'CZK' AND t.Price IS NOT NULL\nGROUP BY ym.CustomerID\nORDER BY Consumption\nLIMIT 2 OFFSET 1) AS least_LAM) AS LAM_avg\n) AS SME_LAM,\n(SELECT\n(SELECT AVG(Consumption) FROM\n(SELECT ym.CustomerID, SUM(t.Amount) / t.Quantity AS Consumption\nFROM yearmonth ym\nJOIN transactions_1k t ON ym.CustomerID = t.CustomerID\nWHERE ym.Date BETWEEN '201301' AND '201312' AND t.Currency = 'CZK' AND t.Price IS NOT NULL\nGROUP BY ym.CustomerID\nORDER BY Consumption\nLIMIT 1) AS least_LAM),\n(SELECT AVG(Consumption) FROM\n(SELECT ym.CustomerID, SUM(t.Amount) / t\t----- bird -----\tdebit_card_specializing",
    "7": " SELECT s.Segment,\n       ((y2013.Consumption - y2012.Consumption) / y2013.Consumption) * 100 AS Percentage_Increase\nFROM (\n    SELECT Segment,\n           SUM(Consumption) AS Consumption\n    FROM yearmonth\n    WHERE Date LIKE '2013%'\n    GROUP BY Segment\n) y2013\nJOIN (\n    SELECT Segment,\n           SUM(Consumption) AS Consumption\n    FROM yearmonth\n    WHERE Date LIKE '2012%'\n    GROUP BY Segment\n) y2012 ON y2013.Segment = y2012.Segment\nJOIN gasstations g ON y2013.Segment = g.Segment\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR'\nORDER BY Percentage_Increase DESC, ABS(Percentage_Increase) ASC;\t----- bird -----\tdebit_card_specializing",
    "8": " SELECT SUM(Consumption)\nFROM (\n SELECT DATE_FORMAT(STR_TO_DATE(Date, '%Y%m'), '%Y-%m') AS Date, SUM(Amount / Price) AS Consumption\n FROM transactions_1k\n JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID\n WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'\n GROUP BY Date\n) AS T;\t----- bird -----\tdebit_card_specializing",
    "9": " SELECT \n    SUM(CASE WHEN g.Country = 'CZE' AND s.Segment = 'discount' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN g.Country = 'SVK' AND s.Segment = 'discount' THEN 1 ELSE 0 END) \nAS \n    more_discount_gas_stations\nFROM \n    gasstations g\nJOIN \n    segments s ON g.Segment = s.Segment;\t----- bird -----\tdebit_card_specializing",
    "10": " SELECT COUNT(DISTINCT c1.CustomerID) as num_sme_czk\nFROM transactions\\_1k t1\nJOIN customers c1 ON t1.CustomerID = c1.CustomerID\nWHERE c1.Currency = 'CZK' AND\nt1.Date BETWEEN '2021-01-01' AND '2\t----- bird -----\tdebit_card_specializing",
    "11": " SELECT 100.0 * COUNT(*) / (\nSELECT COUNT(*) FROM customers c\nJOIN yearmonth y ON c.CustomerID = y.CustomerID\nWHERE c.Segment = 'LAM'\n) as percentage\nFROM yearmonth y\nWHERE y.CustomerID IN (\nSELECT CustomerID FROM yearmonth\nWHERE Consumption > 46.73 AND Segment = 'LAM'\n) AND Segment = 'LAM';\t----- bird -----\tdebit_card_specializing",
    "12": " SELECT 100.0 * AVG(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END)\nFROM (\n SELECT CustomerID, SUM(Amount / Price) AS Consumption\n FROM transactions_1k\n JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID\n WHERE yearmonth.Date BETWEEN '20120201' AND '20120228'\n GROUP BY CustomerID\n) AS subquery;\t----- bird -----\tdebit_card_specializing",
    "13": " SELECT CustomerID, MAX(Consumption) as HighestMonthlyConsumption\nFROM yearmonth\nWHERE Date LIKE '2012__'\nGROUP BY CustomerID;\t----- bird -----\tdebit_card_specializing",
    "14": " SELECT products.Description\nFROM transactions\\_1k\nJOIN products ON transactions\\_1k.ProductID = products.ProductID\nWHERE DATE\\_FORMAT(transactions\\_1k.Date, '%Y%m') = '201309';\t----- bird -----\tdebit_card_specializing",
    "15": " SELECT DISTINCT Country\nFROM transactions\\_1k\nJOIN gasstations ON transactions\\_1k.GasStationID = gasstations.GasStationID\nWHERE DATE\\_FORMAT(transactions\\_1k.Date, '%Y%m') = '201306';\t----- bird -----\tdebit_card_specializing",
    "16": " SELECT COUNT(DISTINCT c.CustomerID)\nFROM customers c\nJOIN transactions\\_1k t ON c.CustomerID = t.CustomerID\nWHERE c.Currency = 'EUR' AND t.Amount/t.Price > 1000\nGROUP BY YEAR(t.Date), MONTH(t.Date);\t----- bird -----\tdebit_card_specializing",
    "17": " SELECT products.Description\nFROM transactions\\_1k\nJOIN products ON transactions\\_1k.ProductID = products.ProductID\nJOIN gasstations ON transactions\\_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "18": " SELECT Time\nFROM transactions\\_1k\nWHERE GasStationID IN (\nSELECT GasStationID\nFROM gasstations\nWHERE ChainID = 11\n)\nORDER BY TransactionID;\t----- bird -----\tdebit_card_specializing",
    "19": " SELECT COUNT(\\*)\nFROM transactions\\_1k\nJOIN gasstations ON transactions\\_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE' AND transactions\\_1k.Date >= '2013-01-01';\t----- bird -----\tdebit_card_specializing",
    "20": " SELECT Price / Amount as Currency\nFROM transactions\\_1k\nWHERE Date = '2012-08-24' AND Time = '16:25:00';\t----- bird -----\tdebit_card_specializing",
    "21": " SELECT Segment\nFROM customers\nJOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nWHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';\t----- bird -----\tdebit_card_specializing",
    "22": " SELECT COUNT(*)\nFROM transactions_1k\nWHERE Time BETWEEN '08:00:00' AND '09:00:00' AND Date = '2012-08-26' AND Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "23": " SELECT c.Country\nFROM customers c\nJOIN transactions\\_1k t ON c.CustomerID = t.CustomerID\nWHERE t.Price = 548.4 AND t.Date = '2012-08-24';\t----- bird -----\tdebit_card_specializing",
    "24": " SELECT \n100.0 * COUNT(c.CustomerID) / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k t \nJOIN customers c ON t.CustomerID = c.CustomerID \nWHERE t.Date = '2012-08-25' AND c.Currency = 'EUR') AS percentage\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-25' AND c.Currency = 'EUR';\t----- bird -----\tdebit_card_specializing",
    "25": " SELECT \n(y2013.Consumption - y2012.Consumption) / y2012.Consumption AS ConsumptionDecreaseRate\nFROM \n(SELECT SUM(Amount / Price) AS Consumption FROM transactions_1k WHERE YEAR(STR_TO_DATE(Time, '%Y/%m/%d')) = 2012 AND CustomerID = (SELECT CustomerID FROM transactions_1k WHERE TransactionID = 634.8)) y2012,\n(SELECT SUM(Amount / Price) AS Consumption FROM transactions_1k WHERE YEAR(STR_TO_DATE(Time, '%Y/%m/%d')) = 2013 AND CustomerID = (SELECT CustomerID FROM transactions_1k WHERE TransactionID = 634.8)) y2013;\t----- bird -----\tdebit_card_specializing",
    "26": " SELECT \n100.0 * SUM(CASE WHEN g.Segment = 'premium' THEN t.Amount ELSE 0 END) / SUM(t.Amount) AS premium_percentage\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'SVK';\t----- bird -----\tdebit_card_specializing",
    "27": " SELECT SUM(Amount) AS TotalAmountSpent,\n       (SELECT SUM(Amount) FROM transactions_1k\n        WHERE transactions_1k.CustomerID = 38508 AND\n        LEFT(Date, 4) = '2012' AND SUBSTR(Date, 5, 2) = '01') AS AmountSpentInJan2012\nFROM transactions_1k\nWHERE transactions_1k.CustomerID = 38508;\t----- bird -----\tdebit_card_specializing",
    "28": " SELECT c.CustomerID, AVG(t.Price/t.Amount) as AvgPrice, c.Currency\nFROM transactions\\_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nGROUP BY c.CustomerID\nORDER BY SUM(t.Price) DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "29": " SELECT ym.CustomerID, SUM(t1k.Amount) as Consumption\nFROM yearmonth ym\nJOIN transactions\\_1k t1k ON ym.CustomerID = t1k.CustomerID\nJOIN products p ON t1k.ProductID = p.ProductID\nWHERE p.ProductID = 5 AND t1k.Price/t1k.Amount > 29.00 AND ym.Date = '201208'\nGROUP BY ym.CustomerID;\t----- bird -----\tdebit_card_specializing",
    "30": " SELECT major_name\nFROM major\nJOIN member ON major.major_id = member.link_to_major\nWHERE CONCAT(first\\_name, ' ', last\\_name) = 'Angela Sanders';\t----- bird -----\tstudent_club",
    "31": " SELECT COUNT(*)\nFROM attendance att\nJOIN member mem ON att.link_to_member = mem.member_id\nWHERE att.link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\\'s Soccer') AND mem.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "32": " SELECT COUNT(\\*)\nFROM event\nJOIN attendance ON event.event\\_id = attendance.link\\_to\\_event\nJOIN member ON attendance.link\\_to\\_member = member.member\\_id\nWHERE event.type = 'Meeting'\nGROUP BY event.event\\_id\nHAVING COUNT(\\*) > 10;\t----- bird -----\tstudent_club",
    "33": " SELECT event_name\nFROM event\nWHERE event_id IN (\n    SELECT link_to_event\n    FROM attendance\n    GROUP BY link_to_event\n    HAVING COUNT(DISTINCT link_to_member) > 20\n)\nAND type != 'fundraiser';\t----- bird -----\tstudent_club",
    "34": " SELECT SUM(amount) as total_funds_received\nFROM income\nWHERE position = 'Vice President';\t----- bird -----\tstudent_club",
    "35": " SELECT first\\_name, last\\_name\nFROM member\nJOIN zip\\_code ON member.zip = zip\\_code.zip\\_code\nWHERE short\\_state = 'IL';\t----- bird -----\tstudent_club",
    "36": " SELECT e.expense\\_id, e.approved\nFROM expense e\nJOIN event eve ON e.link\\_to\\_event = eve.event\\_id\nWHERE eve.event\\_name = 'October Meeting' AND eve.event\\_date = '2019-10-08' AND e.approved IS NOT NULL;\t----- bird -----\tstudent_club",
    "37": " SELECT AVG(cost)\nFROM expense\nJOIN member ON expense.link\\_to\\_member = member.member\\_id\nWHERE member.first\\_name = 'Elijah' AND member.last\\_name = 'Allen' AND MONTH(expense\\_date) IN (9, 10);\t----- bird -----\tstudent_club",
    "38": " SELECT\nSUBTRACT(\n(SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE YEAR(e.event_date) = 2019),\n(SELECT SUM(b.spent) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE YEAR(e.event_date) = 2020)\n) AS total_spent_difference;\t----- bird -----\tstudent_club",
    "39": " SELECT notes \nFROM income \nWHERE date_received = '2019-09-14' AND source = 'Fundraising';\t----- bird -----\tstudent_club",
    "40": " SELECT phone\nFROM member\nWHERE CONCAT(first\\_name, ' ', last\\_name) = 'Carlo Jacobs';\t----- bird -----\tstudent_club",
    "41": " SELECT event_status\nFROM event\nJOIN expense ON event.event_id = expense.link_to_event\nWHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-8-20';\t----- bird -----\tstudent_club",
    "42": " SELECT m.major\\_name\nFROM major m\nJOIN member mem ON m.major\\_id = mem.link\\_to\\_major\nWHERE CONCAT(mem.first\\_name, ' ', mem.last\\_name) = 'Brent Thomason';\t----- bird -----\tstudent_club",
    "43": " SELECT COUNT(*)\nFROM member\nWHERE link_to_major IN (\nSELECT major_id FROM major WHERE major_name = 'Business'\n) AND t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "44": " SELECT department\nFROM major\nJOIN member ON member.link_to_major = major.major_id\nWHERE member.position = 'President';\t----- bird -----\tstudent_club",
    "45": " SELECT date\\_received\nFROM income\nJOIN member ON income.link\\_to\\_member = member.member\\_id\nWHERE source = 'Dues' AND CONCAT(first\\_name, ' ', last\\_name) = 'Connor Hilton';\t----- bird -----\tstudent_club",
    "46": " SELECT\n\t----- bird -----\tstudent_club",
    "47": " SELECT SUM(e2.cost)\nFROM expense e2\nJOIN (\n    SELECT link_to_event, expense_description\n    FROM expense\n    WHERE expense_description = 'Pizza'\n) e1 ON e2.link_to_event = e1.link_to_event;\t----- bird -----\tstudent_club",
    "48": " SELECT COUNT(DISTINCT city) as city_count\nFROM zip_code\nWHERE county = 'Orange County' AND state = 'Virginia';\t----- bird -----\tstudent_club",
    "49": " SELECT major_name\nFROM major m\nJOIN member mem ON m.major\\_id = mem.link\\_to\\_major\nWHERE mem.phone = '809-555-3\t----- bird -----\tstudent_club",
    "50": " SELECT COUNT(*)\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women\\'s Soccer';\t----- bird -----\tstudent_club",
    "51": " SELECT first\\_name, last\\_name \nFROM member \nJOIN link\\_to\\_major ON member.link\\_to\\_major = major.major\\_id \nJOIN department ON major.department = department.major\\_id \nWHERE department.department = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club",
    "52": " SELECT e.event\\_name, MAX(b.spent/b.amount) as max\\_spend\\_to\\_budget\\_ratio\nFROM event e\nJOIN budget b ON e.event\\_id = b.link\\_to\\_event\nWHERE e.status = 'Closed'\nGROUP BY e.event\\_name;\t----- bird -----\tstudent_club",
    "53": " SELECT MAX(b.spent)\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id;\t----- bird -----\tstudent_club",
    "54": " SELECT SUM(b.spent) AS total\\_spent\\_for\\_food\nFROM budget b\nJOIN event e ON b.link\\_to\\_event = e.event\\_id\nWHERE b.category = 'Food';\t----- bird -----\tstudent_club",
    "55": " SELECT first\\_name, last\\_name\nFROM member\nJOIN attendance ON member.member\\_id = attendance.link\\_to\\_member\nGROUP BY link\\_to\\_member\nHAVING COUNT(link\\_to\\_event) > 7;\t----- bird -----\tstudent_club",
    "56": " SELECT m.first\\_name, m.last\\_name\nFROM member m\nJOIN budget b ON m.member\\_id = b.link\\_to\\_member\nJOIN event e ON b.link\\_to\\_event = e.event\\_id\nWHERE e.event\\_name = 'Yearly Kickoff' AND b.event\\_status = 'manager';\t----- bird -----\tstudent_club",
    "57": " SELECT event_name, MIN(cost) AS lowest\\_cost\nFROM expense\nJOIN event ON expense.link\\_to\\_event = event.event\\_id\nGROUP BY event\\_name;\t----- bird -----\tstudent_club",
    "58": " SELECT \nDIVIDE(SUM(cost) FILTER (WHERE event_name = 'Yearly Kickoff'), SUM(cost)) * 100 AS percentage \nFROM expense;\t----- bird -----\tstudent_club",
    "59": " SELECT source as top\\_source\nFROM income\nWHERE date\\_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY SUM(amount) DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "60": " SELECT COUNT(*)\nFROM member\nWHERE link_to_major IN (\nSELECT major_id\nFROM major\nWHERE major_name = 'Physics Teaching'\n);\t----- bird -----\tstudent_club",
    "61": " SELECT event_name\nFROM budget\nWHERE category = 'Advertisement'\nORDER BY spent DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "62": " SELECT COUNT(*)\nFROM attendance a\nJOIN member m ON a.link_to_member = m.member\\_id\nJOIN event e ON a.link\\_to\\_event = e.event\\_id\nWHERE m.first\\_name = 'Maya' AND m.last\\_name = 'Mclean' AND e.event\\_name = 'Women\\'s Soccer';\t----- bird -----\tstudent_club",
    "63": " SELECT cost\nFROM expense\nWHERE expense_description = 'Posters' AND link_to_event = (\nSELECT event_id\nFROM event\nWHERE event_name = 'September Speaker'\n);\t----- bird -----\tstudent_club",
    "64": " SELECT event_name\nFROM event\nJOIN budget ON event.event_id = link_to_event\nWHERE status = 'Closed' AND remaining < 0\nORDER BY remaining ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "65": " SELECT expense.expense\\_description, SUM(expense.cost) as total\\_value\nFROM expense\nJOIN budget ON expense.link\\_to\\_budget = budget.budget\\_id\nJOIN event ON budget.link\\_to\\_event = event.event\\_id\nWHERE event.event\\_name = 'October Meeting' AND expense.approved = 'yes'\nGROUP BY expense.expense\\_description;\t----- bird -----\tstudent_club",
    "66": " SELECT category, SUM(amount) as amount_budgeted\nFROM budget\nWHERE link_to_event = (\nSELECT event_id FROM event WHERE event_name = 'April Speaker'\n)\nGROUP BY category\nORDER BY amount_budgeted ASC;\t----- bird -----\tstudent_club",
    "67": " SELECT SUM(cost) as total\\_expense\nFROM expense\nWHERE expense\\_date = '2019-08-20';\t----- bird -----\tstudent_club",
    "68": " SELECT member.first\\_name, member.last\\_name, SUM(expense.cost) as total\\_cost\nFROM member\nJOIN expense ON member.member\\_id = expense.link\\_to\\_member\nWHERE member.member\\_id = \"rec4BLdZHS2Blfp4v\"\nGROUP BY member.member\\_id;\t----- bird -----\tstudent_club",
    "69": " SELECT expense_description\nFROM expense\nJOIN member ON link_to_member = member_id\nWHERE first\\_name = 'Sacha' AND last\\_name = 'Harrison';\t----- bird -----\tstudent_club",
    "70": " SELECT DISTINCT type\nFROM event\nWHERE location = 'MU 215';\t----- bird -----\tstudent_club",
    "71": " SELECT last\\_name, major\\_name, department, college\nFROM member\nJOIN major ON member.link\\_to\\_major = major.major\\_id\nWHERE major\\_name = 'Environmental Engineering';\t----- bird -----\tstudent_club",
    "72": " SELECT DISTINCT b.category\nFROM budget b\nJOIN event e ON b.link\\_to\\_event = e.event\\_id\nJOIN zip\\_code z ON e.location = z.zip\nWHERE e.type = 'Guest Speaker' AND b.spent = 0 AND z.zip = 215;\t----- bird -----\tstudent_club",
    "73": " SELECT ROUND(DIVIDE(COUNT(CASE WHEN t_shirt_size = 'Medium' AND position = 'Member' AND amount = 50 THEN 1 END), COUNT(member_id)) * 100, 2) AS percentage\nFROM member\nINNER JOIN income ON member.member_id = income.link_to_member;\n```\t----- bird -----\tstudent_club",
    "74": " SELECT event_name\nFROM event\nWHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club",
    "75": " SELECT first\\_name, last\\_name, phone \nFROM member \nJOIN expense \nON member.member\\_id = expense.link\\_to\\_member \nWHERE cost > (SELECT AVG(cost) FROM expense);\t----- bird -----\tstudent_club",
    "76": " SELECT m.first\\_name, m.last\\_name, e.expense\\_description, e.cost\nFROM expense e\nJOIN member m ON e.link\\_to\\_member = m.member\\_id\nWHERE e.expense\\_description = 'Water, Veggie tray, supplies';\t----- bird -----\tstudent_club",
    "77": " SELECT \nm.first\\_name, \nm.last\\_name, \ni.amount \nFROM \nincome i \nJOIN member m ON i.link\\_to\\_member = m.member\\_id \nWHERE \ni.date\\_received = '9/9/2019';\t----- bird -----\tstudent_club",
    "78": " SELECT\n\t----- bird -----\tthrombosis_prediction",
    "79": " SELECT\n100.0 * SUM(CASE WHEN SEX = 'F' AND YEAR(Birthday) > 1930 THEN 1 ELSE 0 END) / SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) as percentage\nFROM Patient;\t----- bird -----\tthrombosis_prediction",
    "80": " SELECT DIVIDE(COUNT(e.ID) WHERE e.Diagnosis = 'SLE' AND Patient.Admission = '-', COUNT(e.ID) WHERE e.Diagnosis = 'SLE' AND Patient.Admission = '+') AS 'Ratio of outpatient to inpatient followed up treatment among all the \"SLE\" diagnosed patient'\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID;\t----- bird -----\tthrombosis_prediction",
    "81": " SELECT Diagnosis\nFROM Patient\nWHERE ID = 306\t----- bird -----\tthrombosis_prediction",
    "82": " SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.LDH > 500;\t----- bird -----\tthrombosis_prediction",
    "83": " SELECT p.ID, YEAR(CURRENT\\_TIMESTAMP) - YEAR(p.Birthday) AS age\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.RVVT = '+';\t----- bird -----\tthrombosis_prediction",
    "84": " SELECT p.ID, p.SEX, e.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Thrombosis = 2;\t----- bird -----\tthrombosis_prediction",
    "85": " SELECT COUNT(\\*)\nFROM Patient\nWHERE SEX = 'F' AND YEAR(Description) = 1997 AND Admission = '-';\t----- bird -----\tthrombosis_prediction",
    "86": " SELECT COUNT(\\*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Thrombosis = 1 AND p.SEX = 'F' AND e.\"Examination Date\" = '1997-01-01';\n```\n```\t----- bird -----\tthrombosis_prediction",
    "87": " SELECT e.Symptoms, p.Birthday, e.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nORDER BY p.Birthday ASC, e.[Examination Date] ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "88": " SELECT max(Date) as MaxDate, (SUBTRACT(year(`First Date`), year(Birthday))) as Age\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Diagnosis = 'SJS';\t----- bird -----\tthrombosis_prediction",
    "89": " SELECT\nDIVIDE(SUM(CASE WHEN s.SEX = 'M' AND l.UA <= 8.0 THEN 1 ELSE 0 END),\nSUM(CASE WHEN s.SEX = 'F' AND l.UA <= 6.5 THEN 1 ELSE 0 END)) as ratio\nFROM Patient s\nJOIN Laboratory l ON s.ID = l.ID;\t----- bird -----\tthrombosis_prediction",
    "90": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE YEAR(p.Birthday) < 18 AND YEAR(e.`Examination Date`) BETWEEN 1990 AND 1993;\t----- bird -----\tthrombosis_prediction",
    "91": " SELECT MAX(h.HGB), e.Diagnosis\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nJOIN Laboratory h ON e.ID = h.ID\nWHERE e.Examination Date = h.Date\nORDER BY h.HGB DESC, e.Diagnosis;\t----- bird -----\tthrombosis_prediction",
    "92": " SELECT Examination.aCL IgM\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.Diagnosis = 'SLE' AND Patient.Description = '1994-02-19' AND Examination.Examination Date = '1993-11-12';\t----- bird -----\tthrombosis_prediction",
    "93": " SELECT\nSUM(CASE WHEN Birthday = '1959-02-18' AND Date BETWEEN '1981-11-01' AND '1981-11-30' THEN T-CHO ELSE 0 END) -\nSUM(CASE WHEN Birthday = '1959-02-18' AND Date BETWEEN '1981-12-01' AND '1981-12-31' THEN T-CHO ELSE 0 END) AS DecreaseRate\nFROM Laboratory\nWHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18');\t----- bird -----\tthrombosis_prediction",
    "94": " SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.Date BETWEEN '1987-07-06' AND '1996-01-31' AND l.GPT > 30 AND l.ALB < 4;\t----- bird -----\tthrombosis_prediction",
    "95": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Thrombosis = 2 AND e.`ANA Pattern` = 'S' AND l.`aCL IgM` >= 1.2 * AVG(l.`aCL IgM`)\nGROUP BY p.ID;\t----- bird -----\tthrombosis_prediction",
    "96": " SELECT DISTINCT p.*\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-'\nAND e.`Examination Date` LIKE '1991-10%'\nAND l.T_BIL < 2.0;\t----- bird -----\tthrombosis_prediction",
    "97": " SELECT AVG(Laboratory.ALB)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "98": " SELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'F' AND Diagnosis = 'APS';\t----- bird -----\tthrombosis_prediction",
    "99": " SELECT ROUND(DIVIDE(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END), COUNT(*)) * 100, 2) AS percentage\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA';\t----- bird -----\tthrombosis_prediction",
    "100": " SELECT \nEXISTS (\nSELECT 1\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.ID = 57266\nAND ( (Laboratory.UA > 8.0 AND Patient.SEX = 'M') OR (Laboratory.UA > 6.5 AND Patient.SEX = 'F') )\n) AS is_within_normal_range;\n\nThis query checks if there exists a row in the Laboratory table with ID 57266 that has a UA value within the normal range based on the patient's sex. The result is a single row with a column \"is\\_within\\_normal\\_range\" that is 1 if the uric acid is within the normal range and 0 otherwise.\t----- bird -----\tthrombosis_prediction",
    "101": " SELECT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.GPT >= 60 AND l.Date < (\n  SELECT MAX(Date)\n  FROM Laboratory\n  WHERE ID = p.ID AND GPT >= 60\n);\t----- bird -----\tthrombosis_prediction",
    "102": " SELECT p.ID, p.Birthday, e.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.GPT > 60\nORDER BY p.Birthday ASC;\t----- bird -----\tthrombosis_prediction",
    "103": " SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN = 29;\t----- bird -----\tthrombosis_prediction",
    "104": " SELECT SEX, COUNT(\\*) as Count\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE T_BIL >= 2.0\nGROUP BY SEX;\t----- bird -----\tthrombosis_prediction",
    "105": " SELECT AVG(DIVIDE(YEAR(NOW()) - YEAR(p.Birthday), 1)) AS avg\\_age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.T\\_CHO >= 250;\t----- bird -----\tthrombosis_prediction",
    "106": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG > 200 AND (YEAR(CURRENT\\_TIMESTAMP) - YEAR(p.Birthday)) > 50;\t----- bird -----\tthrombosis_prediction",
    "107": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE YEAR(p.Birthday) BETWEEN 1936 AND 1956 AND p.SEX = 'M' AND l.CPK >= 250;\t----- bird -----\tthrombosis_prediction",
    "108": " SELECT p.ID, p.SEX, YEAR(CURRENT\\_TIMESTAMP) - YEAR(p.Birthday) AS age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GLU >= 180 AND l.T-CHO < 250;\t----- bird -----\tthrombosis_prediction",
    "109": " SELECT p.ID, p.Birthday, YEAR(CURRENT\\_TIMESTAMP) - YEAR(p.Birthday) AS age, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RBC < 3.5;\t----- bird -----\tthrombosis_prediction",
    "110": " SELECT ID, SEX\nFROM Patient\nJOIN (\nSELECT ID\nFROM Examination\nWHERE Diagnosis = 'SLE' AND `Examination Date` IN (\nSELECT MAX(`Examination Date`)\nFROM Examination\nWHERE Diagnosis = 'SLE'\n)\nAND HGB BETWEEN 10 AND 17\n) AS ExaminationSubquery\nON Patient.ID = ExaminationSubquery.ID\nJOIN (\nSELECT ID\nFROM Patient\nWHERE Birthday IN (\nSELECT MIN(Birthday)\nFROM Patient\nWHERE SEX IN (\nSELECT SEX\nFROM Patient\nWHERE ID IN (\nSELECT ID\nFROM Examination\nWHERE Diagnosis = 'SLE' AND `Examination Date` IN (\nSELECT MAX(`Examination Date`)\nFROM Examination\nWHERE Diagnosis = 'SLE'\n)\nAND HGB BETWEEN 10 AND 17\n)\n)\n)\n) AS PatientSubquery\nON Patient.ID = PatientSubquery.ID;\t----- bird -----\tthrombosis_prediction",
    "111": " SELECT p.ID, DATEDIFF(YEAR, p.Birthday, CURDATE()) AS age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nGROUP BY p.ID\nHAVING COUNT(l.ID) > 2 AND MAX(l.HCT) >= 52;\t----- bird -----\tthrombosis_prediction",
    "112": " SELECT\nSUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS `Number of patients with lower than normal range`,\nSUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS `Number of patients with higher than normal range`\nFROM Laboratory\nWHERE PLT <= 100 OR PLT >= 400;\n```\t----- bird -----\tthrombosis_prediction",
    "113": " SELECT p.ID, p.SEX, p.Birthday, p.`First Date`, p.Admission, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE YEAR(l.Date) = 1984 AND (YEAR(CURRENT\\_TIMESTAMP) - YEAR(p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;\t----- bird -----\tthrombosis_prediction",
    "114": " SELECT\nROUND(DIVIDE(SUM(CASE WHEN Sex = 'F' AND PT >= 14 THEN 1 ELSE 0 END), SUM(PT >= 14)) * 100, 2) AS percentage\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE SUBTRACT(YEAR(CURRENT\\_TIMESTAMP), YEAR(Birthday)) > 55;\t----- bird -----\tthrombosis_prediction",
    "115": " SELECT COUNT(*)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.WBC > 3.5 AND l.WBC < 9.0 AND (l.FG <= 150 OR l.FG >= 450);\t----- bird -----\tthrombosis_prediction",
    "116": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGG >= 2000;\t----- bird -----\tthrombosis_prediction",
    "117": " SELECT COUNT(*)\nFROM (\nSELECT p.ID\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.IGG BETWEEN 900 AND 2000\nAND e.Symptoms IS NOT NULL\n) AS subquery;\t----- bird -----\tthrombosis_prediction",
    "118": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGA > 80 AND l.IGA < 500 AND YEAR(p.`First Date`) >= 1990;\t----- bird -----\tthrombosis_prediction",
    "119": " SELECT Examination.Diagnosis\nFROM Examination\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE (Laboratory.IGM <= 40 OR Laboratory.IGM >= 400)\nGROUP BY Examination.Diagnosis\nORDER BY COUNT(Examination.Diagnosis) DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "120": " SELECT COUNT(*)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE CRP = '+' AND Description IS NULL;\t----- bird -----\tthrombosis_prediction",
    "121": " SELECT COUNT(*)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.CRE >= 1.5 AND YEAR(CURDATE()) - YEAR(p.Birthday) < 70;\t----- bird -----\tthrombosis_prediction",
    "122": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.ANA Pattern IN ('-', '+-') AND p.Admission = '+';\t----- bird -----\tthrombosis_prediction",
    "123": " SELECT COUNT(\\*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.SM IN ('-', '+-') AND e.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "124": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.SC170 IN ('negative', '0') AND p.SEX = 'F' AND e.Symptoms IS NULL;\t----- bird -----\tthrombosis_prediction",
    "125": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.CENTROMEA IN ('-', '+-') AND e.SSB IN ('-', '+-') AND p.SEX = 'M';\t----- bird -----\tthrombosis_prediction",
    "126": " SELECT MIN(Birthday)\nFROM Patient\nWHERE ID IN (\n SELECT ID\n FROM Laboratory\n WHERE GOT >= 60\n);\t----- bird -----\tthrombosis_prediction",
    "127": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+' AND p.ID IN (\n    SELECT ID\n    FROM Laboratory\n    WHERE CPK < 250\n)\t----- bird -----\tthrombosis_prediction",
    "128": " SELECT L.name\nFROM League L\nJOIN Match M ON L.id = M.league\\_id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY SUM(M.home\\_team\\_goal + M.away\\_team\\_goal) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "129": " SELECT Team.team\\_long\\_name\nFROM Match\nJOIN Team ON Match.away\\_team\\_api\\_id = Team.team\\_api\\_id\nJOIN League ON Match.country\\_id = League.country\\_id AND League.name = 'Scotland Premier League'\nWHERE Match.season = '2009/2010' AND (Match.away\\_team\\_goal - Match.home\\_team\\_goal) > 0\nGROUP BY Team.team\\_long\\_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "130": " SELECT\nTeam.team\\_long\\_name,\nTeam\\_Attributes.buildUpPlaySpeed\nFROM\nTeam\nJOIN\nTeam\\_Attributes\nON Team.team\\_api\\_id = Team\\_Attributes.team\\_api\\_id\nORDER BY\nTeam\\_Attributes.buildUpPlaySpeed DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "131": " SELECT l.name\nFROM League l\nJOIN Match m ON l.id = m.league\\_id\nWHERE m.season = '2015/2016'\nGROUP BY l.id, l.name\nORDER BY COUNT(\\*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "132": " SELECT \np.id,\np.player\\_api\\_id,\np.player\\_name,\np.player\\_fifa\\_api\\_id,\np.birthday,\np.height,\np.weight,\nYEAR(CURRENT\\_DATE) - YEAR(p.birthday) AS age,\npa.sprint\\_speed\nFROM \nPlayer p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nWHERE \npa.sprint\\_speed >= 97 AND\npa.date BETWEEN '2013-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "133": " SELECT L.name, COUNT(M.league\\_id) as match\\_count\nFROM League L\nJOIN Match M ON L.id = M.league\\_id\nGROUP BY M.league\\_id\nORDER BY match\\_count DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "134": " SELECT team\\_fifa\\_api\\_id\nFROM Team\\_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;\t----- bird -----\teuropean_football_2",
    "135": " SELECT team_long\\_name \nFROM Team \nJOIN Team\\_Attributes ON Team.team\\_api\\_id = Team\\_Attributes.team\\_api\\_id \nWHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team\\_Attributes WHERE buildUpPlayPassing IS NOT NULL);\t----- bird -----\teuropean_football_2",
    "136": " SELECT\nDIVIDE(MULTIPLY(SUM(CASE WHEN preferred\\_foot = 'left' THEN 1 ELSE 0 END), 100), COUNT(player\\_fifa\\_api\\_id)) AS percentage_left_foot\nFROM\nPlayer\nWHERE\nYEAR(birthday) BETWEEN 1987 AND 1992;\n```\t----- bird -----\teuropean_football_2",
    "137": " SELECT AVG(long_shots) \nFROM Player_Attributes \nWHERE player_fifa_api_id = (\nSELECT id \nFROM Player \nWHERE player_name = 'Ahmed Samir Farag'\n);\t----- bird -----\teuropean_football_2",
    "138": " SELECT\nPlayer.player\\_name,\nAVG(Player\\_Attributes.heading\\_accuracy) as avg_heading_accuracy\nFROM\nPlayer\nJOIN Player\\_Attributes ON Player.id = Player\\_Attributes.player\\_api\\_id\nWHERE\nPlayer.height > 180\nGROUP BY\nPlayer.player\\_name\nORDER BY\navg\\_heading\\_accuracy DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "139": " SELECT League.name\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE Match.season = '2009/2010'\nGROUP BY League.name\nHAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);\t----- bird -----\teuropean_football_2",
    "140": " SELECT Player.player\\_api\\_id, Player.player\\_name, Player.birthday\nFROM Player\nWHERE substr(Player.birthday,1,7) = '1970-10';\t----- bird -----\teuropean_football_2",
    "141": " SELECT pa.overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nJOIN (\n    SELECT player_api_id\n    FROM Match\n    WHERE strftime('%Y', date) = '2011'\n    AND (\n        home_player_1 = pa.player_api_id\n        OR home_player_2 = pa.player_api_id\n        OR home_player_3 = pa.player_api_id\n        OR home_player_4 = pa.player_api_id\n        OR home_player_5 = pa.player_api_id\n        OR home_player_6 = pa.player_api_id\n        OR home_player_7 = pa.player_api_id\n        OR home_player_8 = pa.player_api_id\n        OR home_player_9 = pa.player_api_id\n        OR home_player_10 = pa.player_api_id\n        OR home_player_11 = pa.player_api_id\n        OR away_player_1 = pa.player_api_id\n        OR away_player_2 = pa.player_api_id\n        OR away_player_3 = pa.player_api_id\n        OR away_player_4 = pa.player_api_id\n        OR away_player_5 = pa.player_api_id\n        OR away_player_6 = pa.player_api_id\n        OR away_player_7 = pa.player_api_id\n        OR away_player_8 = pa.player_api_id\n        OR away_player_9 = pa.player_api_id\n        OR away_player_10 = pa.player_api_id\n        OR away_player_11 = pa.player_api_id\n    )\n) m ON pa.player_api_id = m.player_api_id\nWHERE p.player_name = 'Gabriel Tamas'\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "142": " SELECT AVG(home\\_team\\_goal) as average_home_team_goal\nFROM Match\nWHERE country\\_id = (SELECT id FROM League WHERE name = 'Poland') AND season = '2010/2011';\t----- bird -----\teuropean_football_2",
    "143": " SELECT MAX(AVG(p.finishing)) as highest\\_avg\\_finishing\\_rate\nFROM Player p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nJOIN Team t ON p.team\\_api\\_id = t.id\nWHERE p.height = (\nSELECT MAX(height)\nFROM Player\nWHERE height IS NOT NULL\n)\nOR p.height = (\nSELECT MIN(height)\nFROM Player\nWHERE height IS NOT NULL\n);\t----- bird -----\teuropean_football_2",
    "144": " SELECT AVG(t2.overall_rating) as avg_rating\nFROM Player_Attributes t2\nJOIN Player t1 ON t1.id = t2.player_api_id\nWHERE strftime('%Y', t2.date) >= '2010' AND strftime('%Y', t2.date) <= '2015' AND t1.height > 170;\t----- bird -----\teuropean_football_2",
    "145": " SELECT AVG(PA.ball\\_control) - AVG(PA2.ball\\_control) AS difference\nFROM Player\\_Attributes PA\nJOIN Player P ON PA.player\\_api\\_id = P.player\\_api\\_id\nJOIN Player\\_Attributes PA2 ON PA2.player\\_fifa\\_api\\_id = (\nSELECT P2.player\\_fifa\\_api\\_id\nFROM Player P2\nWHERE P2.player\\_name = 'Aaron Appindangoye'\n)\nWHERE P.player\\_name = 'Abdou Diallo';\t----- bird -----\teuropean_football_2",
    "146": " SELECT\n CASE\n WHEN MAX(SUBSTR(p1.birthday, 7, 4)) > MAX(SUBSTR(p2.birthday, 7, 4)) THEN 'Aaron Lennon'\n ELSE 'Abdelaziz Barrada'\n END\nFROM\n Player p1\nJOIN\n Player p2\nON\n p1.id = (SELECT id FROM Player WHERE player_name = 'Aaron Lennon') AND\n p2.id = (SELECT id FROM Player WHERE player_name = 'Abdelaziz Barrada');\n```\nThis query will compare the birthdays of Aaron Lennon and Abdelaziz Barrada by extracting the year from their birthdays and comparing them. The player with the higher year value (i.e., the more recent birthday) is considered the younger player. The query will return the name of the older player.\t----- bird -----\teuropean_football_2",
    "147": " SELECT MAX(height) as tallest\\_height\nFROM Player;\t----- bird -----\teuropean_football_2",
    "148": " SELECT COUNT(\\*)\nFROM Player_Attributes pa\nJOIN Player p ON pa.player\\_api\\_id = p.player\\_api\\_id\nWHERE pa.preferred\\_foot = 'left' AND pa.attacking\\_work\\_rate = 'low';\t----- bird -----\teuropean_football_2",
    "149": " SELECT COUNT(DISTINCT p.id)\nFROM Player p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nWHERE strftime('%Y', p.birthday) < 1986 AND pa.defensive\\_work\\_rate = 'high';\t----- bird -----\teuropean_football_2",
    "150": " SELECT p.player\\_name\nFROM Player p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nWHERE pa.volleys > 70 AND pa.dribbling > 70;\t----- bird -----\teuropean_football_2",
    "151": " SELECT COUNT(*)\nFROM Match\nWHERE league\\_id IN (\nSELECT id\nFROM League\nWHERE country\\_id IS NOT NULL AND name = 'Belgium Jupiler League'\n)\nAND SUBSTR(date, 1, 7) = '2009-04';\t----- bird -----\teuropean_football_2",
    "152": " SELECT League.name \nFROM League \nJOIN Match ON League.id = Match.league\\_id \nWHERE Match.season = '2008/2009' \nGROUP BY League.name \nORDER BY COUNT(Match.id) DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "153": " SELECT\nROUND(MULTIPLY(DIVIDIDE(SUBTRACT(PA.overall_rating, (SELECT overall_rating FROM Player\\_Attributes PA2 WHERE PA2.player\\_name = 'Paulin Puel')), (SELECT overall_rating FROM Player\\_Attributes PA2 WHERE PA2.player\\_name = 'Paulin Puel')), 100)) AS percentage_difference\nFROM\nPlayer\\_Attributes PA\nWHERE\nPA.player\\_name = 'Ariel Borysiuk';\n```\n```\t----- bird -----\teuropean_football_2",
    "154": " SELECT AVG(T1.overall_rating)\nFROM Player_Attributes T1\nJOIN Player T2 ON T1.player_api_id = T2.player_api_id\nWHERE T2.player\\_name = 'Pietro Marino';\t----- bird -----\teuropean_football_2",
    "155": " SELECT MAX(TA.chanceCreationPassing) as max\\_chance\\_creation\\_passing, TA.chanceCreationPassingClass\nFROM Team T\nJOIN Team\\_Attributes TA ON T.team\\_api\\_id = TA.team\\_api\\_id\nWHERE T.team\\_long\\_name = 'Ajax';\n```\t----- bird -----\teuropean_football_2",
    "156": " SELECT p.player\\_name\nFROM Player p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nWHERE pa.overall\\_rating = 77 AND pa.date LIKE '2016-06-23%'\nORDER BY p.birthday DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "157": " SELECT overall\\_rating\nFROM Player\\_Attributes\nWHERE player\\_fifa\\_api\\_id = (SELECT id FROM Player WHERE player\\_name = 'Aaron Mooy') AND date LIKE '2016-02-04%';\t----- bird -----\teuropean_football_2",
    "158": " SELECT Player_Attributes.attacking_work_rate\nFROM Player\nJOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id\nWHERE Player.player\\_name = 'Francesco Migliore' AND Player\\_Attributes.date LIKE '2015-05-01%';\t----- bird -----\teuropean_football_2",
    "159": " SELECT MAX(pa.crossing), pa.date\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Kevin Constant'\nGROUP BY pa.date\nORDER BY pa.date ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "160": " SELECT Team_Attributes.buildUpPlayPassingClass\nFROM Team\nJOIN Team_Attributes ON Team.team\\_api\\_id = Team\\_Attributes.team\\_api\\_id\nWHERE Team.team\\_long\\_name = 'FC Lorient' AND Team\\_Attributes.date LIKE '2010-02-22%';\t----- bird -----\teuropean_football_2",
    "161": " SELECT Team_Attributes.defenceAggressionClass\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id AND Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id\nJOIN League ON Team.id = League.id\nJOIN Match ON League.id = Match.league_id\nJOIN Team AS HomeTeam ON Match.home_team_api_id = HomeTeam.team_api_id AND Match.home_team_fifa_api_id = HomeTeam.team_fifa_api_id\nJOIN Team_Attributes AS HomeTeamAttributes ON HomeTeam.team_api_id = HomeTeamAttributes.team_api_id AND HomeTeam.team_fifa_api_id = HomeTeamAttributes.team_fifa_api_id\nJOIN Team AS AwayTeam ON Match.away_team_api_id = AwayTeam.team_api_id AND Match.away_team_fifa_api_id = AwayTeam.team_fifa_api_id\nJOIN Team_Attributes AS AwayTeamAttributes ON AwayTeam.team_api_id = AwayTeamAttributes.team_api_id AND AwayTeam.team_fifa_api_id = AwayTeamAttributes.team_fifa_api_id\nWHERE Team.team_long_name = 'Hannover 96' AND Match.date LIKE '2015-09-10%' AND Team_Attributes.date = Match.date;\t----- bird -----\teuropean_football_2",
    "162": " SELECT AVG(pa.overall_rating)\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Marko Arnautovic' AND SUBSTR(pa.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';\t----- bird -----\teuropean_football_2",
    "163": " SELECT \nROUND(100 * (pa1.overall_rating - pa2.overall_rating) / pa1.overall_rating, 2) AS percentage\nFROM\nPlayer_Attributes pa1\nJOIN Player_Attributes pa2 ON pa1.player_fifa_api_id = 13371 AND pa2.player_fifa_api_id = 16231\nWHERE\npa1.date = '2013-07-12' AND pa2.date = '2013-07-12';\n\n(Note: The player_fifa_api_id values for Landon Donovan and Jordan Bowery are placeholders and should be replaced with the correct values in the actual query.)\t----- bird -----\teuropean_football_2",
    "164": " SELECT `player_name`\nFROM `Player`\nJOIN `Player_Attributes` ON `Player`.`id` = `Player_Attributes`.`player_api_id`\nORDER BY `height` DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "165": " SELECT Player.player\\_name, MAX(Player\\_Attributes.overall\\_rating) as MaxRating\nFROM Player\nJOIN Player\\_Attributes ON Player.id = Player\\_Attributes.player\\_api\\_id\nGROUP BY Player.player\\_name;\n\nThis query will give you the name of the player(s) with the maximum overall rating in the Player\\_Attributes table, along with their names from the Player table.\t----- bird -----\teuropean_football_2",
    "166": " SELECT p.player\\_name\nFROM Player p\nJOIN Player\\_Attributes pa ON p.player\\_api\\_id = pa.player\\_api\\_id\nWHERE pa.attacking\\_work\\_rate = 'high';\t----- bird -----\teuropean_football_2",
    "167": " SELECT team_short\\_name \nFROM Team\\_Attributes \nWHERE chanceCreationPassingClass = 'Safe';\t----- bird -----\teuropean_football_2",
    "168": " SELECT COUNT(*)\nFROM Player\nWHERE player\\_name LIKE 'Aaron%' AND birthday > '1990';\t----- bird -----\teuropean_football_2",
    "169": " SELECT p6.jumping - p23.jumping AS difference\nFROM Player_Attributes p6\nJOIN Player_Attributes p23 ON p6.player_fifa_api_id = 6 AND p23.player_fifa_api_id = 23;\t----- bird -----\teuropean_football_2",
    "170": " SELECT Player.id\nFROM Player\nJOIN Player\\_Attributes ON Player.player\\_api\\_id = Player\\_Attributes.player\\_api\\_id\nWHERE Player\\_Attributes.potential = (SELECT MIN(potential) FROM Player\\_Attributes)\nAND Player\\_Attributes.preferred\\_foot = 'right';\t----- bird -----\teuropean_football_2",
    "171": " SELECT COUNT(\\*)\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred\\_foot = 'left';\t----- bird -----\teuropean_football_2",
    "172": " SELECT home\\_team\\_goal, away\\_team\\_goal\nFROM Match\nWHERE date LIKE '2008-09-24%' AND league\\_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League');\t----- bird -----\teuropean_football_2",
    "173": " SELECT Team_Attributes.buildUpPlaySpeedClass\nFROM Team\nJOIN Team_Attributes ON Team.team\\_api\\_id = Team\\_Attributes.team\\_api\\_id\nWHERE Team.team\\_long\\_name = 'KSV Cercle Brugge';\t----- bird -----\teuropean_football_2",
    "174": " SELECT\nPA.player\\_fifa\\_api\\_id,\nMAX(P.weight) as heaviest\\_weight,\nPA.finishing,\nPA.curve\nFROM\nPlayer P\nJOIN Player\\_Attributes PA ON P.id = PA.player\\_api\\_id\nGROUP BY\nPA.player\\_fifa\\_api\\_id;\t----- bird -----\teuropean_football_2",
    "175": " SELECT League.name, COUNT(Match.id) as num\\_of\\_games\nFROM League\nJOIN Match ON League.id = Match.league\\_id\nWHERE Match.season = '2015/2016' AND League.country\\_id IN (\nSELECT id\nFROM Country\nWHERE name IN ('England', 'Spain', 'Italy', 'Germany')\n)\nGROUP BY League.name\nORDER BY num\\_of\\_games DESC\nLIMIT 4;\n\nNote: The \"Country\" table is assumed to exist and contains a list of countries with a column \"name\" and a primary key \"id\". This table is used to filter the leagues based on country. If this table does not exist, the query would need to be adjusted to use a different method for getting the country IDs.\t----- bird -----\teuropean_football_2",
    "176": " SELECT Team.team\\_long\\_name \nFROM Match \nJOIN Team ON Match.away\\_team\\_api\\_id = Team.team\\_api\\_id \nGROUP BY Match.away\\_team\\_api\\_id \nORDER BY MAX(Match.away\\_team\\_goal) DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "177": " SELECT Player.player\\_name\nFROM Player\nJOIN Player\\_Attributes ON Player.id = Player\\_Attributes.player\\_api\\_id\nORDER BY Player\\_Attributes.overall\\_rating DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "178": " SELECT \nROUND(100.0 * COUNT(p.id) / (SELECT COUNT(id) FROM Player_Attributes pa WHERE pa.overall_rating > 70), 2) AS percentage\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height < 180 AND pa.overall_rating > 70;\t----- bird -----\teuropean_football_2",
    "179": " SELECT drivers.driverRef\nFROM drivers\nJOIN qualifying ON drivers.driverId = qualifying.driverId\nWHERE qualifying.raceId = 20 AND qualifying.q1 IS NOT NULL\nGROUP BY drivers.driverId\nORDER BY MAX(qualifying.q1)\nLIMIT 5;\t----- bird -----\tformula_1",
    "180": " SELECT surname\nFROM drivers\nWHERE driverId = (\n SELECT driverId\n FROM qualifying\n WHERE raceId = 19 AND q2 IS NOT NULL\n ORDER BY q2 ASC\n LIMIT 1\n);\t----- bird -----\tformula_1",
    "181": " SELECT r.name \nFROM races r \nJOIN circuits c ON r.circuitId = c.circuitId \nWHERE c.country = 'Germany';\t----- bird -----\tformula_1",
    "182": " SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "183": " SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Abu Dhabi Grand Prix';\t----- bird -----\tformula_1",
    "184": " SELECT q1\nFROM qualifying\nJOIN drivers ON qualifying.driverId = drivers.driverId\nWHERE qualifying.raceId = 354 AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna';\t----- bird -----\tformula_1",
    "185": " SELECT number\nFROM qualifying\nWHERE raceId = 903 AND q3 LIKE '0:01:54%';\t----- bird -----\tformula_1",
    "186": " SELECT COUNT(DISTINCT r.driverId)\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nWHERE r.name = 'Bahrain Grand Prix' AND r.year = 2007 AND res.time IS NULL;\t----- bird -----\tformula_1",
    "187": " SELECT drivers.driverId, drivers.forename, drivers.surname, drivers.dob\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.raceId = 592 AND results.time IS NOT NULL\nORDER BY drivers.dob DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "188": " SELECT url\nFROM drivers\nJOIN lapTimes ON drivers.driverId = lapTimes.driverId\nWHERE lapTimes.time LIKE '0:01:27%' AND raceId = 161;\t----- bird -----\tformula_1",
    "189": " SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Malaysian Grand Prix';\t----- bird -----\tformula_1",
    "190": " SELECT url\nFROM constructors\nJOIN constructorResults\nON constructors.constructorId = constructorResults.constructorId\nWHERE raceId = 9\nAND points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9);\t----- bird -----\tformula_1",
    "191": " SELECT driverRef\nFROM qualifying\nJOIN results ON qualifying.driverId = results.driverId AND qualifying.raceId = results.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE raceId = 45 AND q3 LIKE '0:01:33%';\t----- bird -----\tformula_1",
    "192": " SELECT seasons.url\nFROM seasons\nJOIN races ON seasons.year = races.year\nWHERE races.raceId = 901;\t----- bird -----\tformula_1",
    "193": " SELECT drivers.driverId, drivers.forename, drivers.surname, MAX(drivers.dob) as MaxDOB\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nWHERE results.raceId = 872 AND results.time IS NOT NULL\nGROUP BY drivers.driverId;\t----- bird -----\tformula_1",
    "194": " SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN (\nSELECT raceId, MAX(fastestLapSpeed) as maxSpeed\nFROM results\nGROUP BY raceId\n) rs\nON r.raceId = rs.raceId AND r.fastestLapSpeed = rs.maxSpeed;\t----- bird -----\tformula_1",
    "195": " SELECT\nDIVIDE(\nSUBTRACT(\n(SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')),\n(SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta'))\n),\n(SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta'))\n) \\* 100 AS percentage;\t----- bird -----\tformula_1",
    "196": " SELECT \ndriverId,\nCOUNT(time) / COUNT(*) AS raceCompletionRate\nFROM results\nWHERE raceId IN (\nSELECT raceId \nFROM races \nWHERE date = '1983-07-16'\n)\nGROUP BY driverId;\t----- bird -----\tformula_1",
    "197": " SELECT races.name\nFROM races\nJOIN seasons ON races.year = seasons.year\nWHERE YEAR(races.date) = (SELECT MIN(YEAR(date)) FROM races) AND MONTH(races.date) = (SELECT MIN(MONTH(date)) FROM races WHERE YEAR(date) = (SELECT MIN(YEAR(date)) FROM races));\t----- bird -----\tformula_1",
    "198": " SELECT\ndrivers.forename,\ndrivers.surname,\nMAX(results.points) as MaxPoints\nFROM\nresults\nJOIN drivers ON results.driverId = drivers.driverId;\t----- bird -----\tformula_1",
    "199": " SELECT MIN(lapTimes.milliseconds) AS bestLapTime, drivers.forename, drivers.surname, races.name\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN races ON lapTimes.raceId = races.raceId\nGROUP BY lapTimes.raceId;\t----- bird -----\tformula_1",
    "200": " SELECT AVG(lapTimes.milliseconds)\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN races ON lapTimes.raceId = races.raceId\nWHERE races.name = 'Malaysian Grand Prix' AND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "201": " SELECT\n100.0 * SUM(CASE WHEN r.surname = 'Hamilton' AND r.position > 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT r.raceId) as percentage\nFROM\nraces r\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE\nr.year >= 2010 AND d.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "202": " SELECT\ndrivers.forename,\ndrivers.surname,\ndrivers.nationality,\nMAX(constructorStandings.wins) as MaxWins,\nMAX(constructorStandings.points) as MaxPoints\nFROM\ndrivers\nJOIN\nconstructorStandings ON drivers.driverId = constructorStandings.constructorId\nGROUP BY\ndrivers.driverId\nORDER BY\nMaxWins DESC, MaxPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "203": " SELECT drivers.driverId, drivers.forename, drivers.surname, YEAR(CURRENT\\_TIMESTAMP) - YEAR(drivers.dob) AS age\nFROM drivers\nJOIN (\nSELECT driverId\nFROM drivers\nWHERE nationality = 'Japanese'\nORDER BY YEAR(CURRENT\\_TIMESTAMP) - YEAR(dob) ASC\nLIMIT 1\n) AS youngest\\_japanese\\_driver\nON drivers.driverId = youngest\\_japanese\\_driver.driverId;\t----- bird -----\tformula_1",
    "204": " SELECT\nr.name,\nc.name AS circuitName,\nc.location\nFROM\nraces r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE\nYEAR(r.date) = 2005 AND MONTH(r.date) = 9;\t----- bird -----\tformula_1",
    "205": " SELECT r.raceId, r.name, r.date, d.driverId, d.forename, d.surname, r.positionOrder\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND r.positionOrder < 20;\t----- bird -----\tformula_1",
    "206": " SELECT r.year, r.raceId\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\nAND r.fastestLap = (\nSELECT MIN(milliseconds)\nFROM results\nWHERE raceId = r.raceId\n)\n;\t----- bird -----\tformula_1",
    "207": " SELECT r.raceId, r.year, r.date, res.points\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.driverRef = 'Lewis Hamilton'\nAND r.year = (SELECT MIN(year) FROM seasons);\t----- bird -----\tformula_1",
    "208": " SELECT \n100.0 * COUNT(races.raceId) / (\nSELECT COUNT(races.raceId)\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'European Grand Prix' AND circuits.country = 'Germany'\n) AS percentage\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'European Grand Prix';\t----- bird -----\tformula_1",
    "209": " SELECT `lat`, `lng` \nFROM circuits \nWHERE `name` = 'Silverstone Circuit';\t----- bird -----\tformula_1",
    "210": " SELECT circuitRef as `reference name`\nFROM circuits\nWHERE name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1",
    "211": " SELECT d.nationality, MAX(d.dob) as MaxDOB\nFROM drivers d\nGROUP BY d.nationality;\t----- bird -----\tformula_1",
    "212": " SELECT driverRef\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Canadian Grand Prix' AND results.year = 2007 AND results.position = 1;\t----- bird -----\tformula_1",
    "213": " SELECT r.raceId, r.name, MIN(ranks.rank) as highest\\_rank\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN (\nSELECT resultId, raceId, driverId, rank, MIN(rank) OVER (PARTITION BY driverId) as min\\_rank\nFROM results\nWHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')\n) ranks ON r.resultId = ranks.resultId AND r.rank = ranks.min\\_rank\nGROUP BY r.raceId, r.name;\t----- bird -----\tformula_1",
    "214": " SELECT MAX(fastestLapSpeed)\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
    "215": " SELECT results.positionOrder\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE results.raceId = (SELECT races.raceId FROM races WHERE races.name = 'Chinese Grand Prix' AND races.year = 2008)\nAND drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t----- bird -----\tformula_1",
    "216": " SELECT results.time\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE races.name = 'Chinese Grand Prix' AND races.year = 2\t----- bird -----\tformula_1",
    "217": " SELECT COUNT(DISTINCT d.driverId)\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races race ON r.raceId = race.raceId\nWHERE race.year = 2008 AND race.circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'China')\nAND r.time IS NOT NULL;\t----- bird -----\tformula_1",
    "218": " SELECT\n\t(t.incremental\\_time - t.last\\_driver\\_time) / t.last\\_driver\\_time * 100 AS percentage\\_faster\nFROM\n\t(\n\tSELECT\n\t\tr.time AS champion\\_time,\n\t\tl.time AS last\\_driver\\_time,\n\t\t----- bird -----\tformula_1",
    "219": " SELECT COUNT(\\*)\nFROM circuits\nWHERE location = 'Melbourne' AND country = 'Australia';\t----- bird -----\tformula_1",
    "220": " SELECT MAX(points)\nFROM constructorStandings\nJOIN constructors ON constructorStandings.constructorId = constructors.constructorId\nWHERE nationality = 'British';\t----- bird -----\tformula_1",
    "221": " SELECT name \nFROM constructors \nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId \nJOIN races ON constructorResults.raceId = races.raceId \nWHERE races.raceId = 291 AND constructorResults.points = 0;\t----- bird -----\tformula_1",
    "222": " SELECT COUNT(DISTINCT c.constructorId)\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nJOIN races r ON cr.raceId = r.raceId\nWHERE c.nationality = 'Japanese' AND cr.points = 0 AND r.round = 2;\t----- bird -----\tformula_1",
    "223": " SELECT \n100.0 * COUNT(DISTINCT r.driverId) / (SELECT COUNT(DISTINCT driverId) FROM results r \nJOIN drivers d ON r.driverId = d.driverId \nWHERE r.year BETWEEN 2007 AND 2009) \nAS race_completion_percentage\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.nationality = 'Japanese' AND r.time IS NOT NULL AND r.year BETWEEN 2007 AND 2009;\t----- bird -----\tformula_1",
    "224": " SELECT AVG(TIME_TO_SEC(time)) / 60 as average_time_in_minutes\nFROM results\nJOIN status ON results.statusId = status.statusId\nWHERE status = 'Finished' AND YEAR(raceId) < 1975 AND position = 1;\t----- bird -----\tformula_1",
    "225": " SELECT fastestLap\nFROM results\nJOIN (\nSELECT raceId, MAX(points) as max\\_points\nFROM results\nJOIN seasons ON results.raceId = races.raceId AND seasons.year = 2\t----- bird -----\tformula_1",
    "226": " SELECT AVG(fastestLapSpeed)\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
    "227": " SELECT 100.0 * COUNT(d.driverId) / (\nSELECT COUNT(d2.driverId)\nFROM drivers d2\nJOIN results r2 ON d2.driverId = r2.driverId\nWHERE YEAR(d2.dob) < 1985 AND r2.laps > 50 AND r2.raceId IN (\nSELECT raceId\nFROM races\nWHERE year BETWEEN 2000 AND 2005)\n) AS percentage\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE YEAR(d.dob) < 1985 AND r.laps > 50 AND r.raceId IN (\nSELECT raceId\nFROM races\nWHERE year BETWEEN 2000 AND 2005);\t----- bird -----\tformula_1",
    "228": " SELECT COUNT(\\*)\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.fastestLap IS NOT NULL AND r.fastestLap < '02:00.00' AND d.nationality = 'French';\t----- bird -----\tformula_1",
    "229": " SELECT driverRef, forename, surname, nationality\nFROM drivers\nWHERE nationality = 'America';\t----- bird -----\tformula_1",
    "230": " SELECT r.driverId, r.number, r.forename, r.surname, r.dob, r.nationality, y.youngestDriverCode\nFROM drivers r\nJOIN (\nSELECT driverId AS youngestDriverCode\nFROM drivers\nWHERE YEAR(dob) = (\nSELECT MIN(YEAR(dob)) FROM drivers\n)\nLIMIT 3\n) y\nON r.driverId = y.youngestDriverCode\nWHERE r.nationality = 'Netherlandic' or r.nationality = 'Dutch';\t----- bird -----\tformula_1",
    "231": " SELECT drivers.driverRef\nFROM drivers\nJOIN (\n    SELECT MIN(year(dob)) as oldest_birth_year\n    FROM drivers\n    WHERE nationality = 'German'\n) as min_dob\nON year(drivers.dob) = min_dob.oldest_birth_year\nWHERE drivers.nationality = 'German';\t----- bird -----\tformula_1",
    "232": " SELECT drivers.driverId, drivers.code\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN qualifying ON drivers.driverId = qualifying.driverId\nWHERE YEAR(drivers.dob) = 1971 AND results.fastestLapTime IS NOT NULL;\t----- bird -----\tformula_1",
    "233": " SELECT COUNT(\\*)\nFROM results\nWHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL;\t----- bird -----\tformula_1",
    "234": " SELECT c.circuitId, c.location, c.lat, c.lng\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN seasons s ON r.year = s.year\nWHERE c.country = 'Austria';\n```\t----- bird -----\tformula_1",
    "235": " SELECT d.driverId, d.forename, d.surname, min(r.date) as firstRaceDate, min(r.time) as firstRaceTime\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races race ON r.raceId = race.raceId\nJOIN (\n    SELECT driverId, min(date) as minDate\n    FROM results\n    JOIN races ON results.raceId = races.raceId\n    GROUP BY driverId\n) as firstRaces on d.driverId = firstRaces.driverId and r.date = firstRaces.minDate\nWHERE d.dob = (\n    SELECT min(dob)\n    FROM drivers\n)\nGROUP BY d.driverId\nLIMIT 1;\t----- bird -----\tformula_1",
    "236": " SELECT drivers.driverId, drivers.forename, drivers.surname, AVG(pitStops.duration) as avg\\_duration\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN pitStops ON results.driverId = pitStops.driverId\nWHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY drivers.driverId\nORDER BY avg\\_duration ASC\nLIMIT 3;\t----- bird -----\tformula_1",
    "237": " SELECT R.driverId, D.forename, D.surname, R.time\nFROM results R\nJOIN drivers D ON R.driverId = D.driverId\nWHERE R.raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' AND year = 2\t----- bird -----\tformula_1",
    "238": " SELECT cr.circuitRef, s.year, r.name, r.date, MAX(re.time) as champion\\_time\nFROM races r\nJOIN circuits cr ON r.circuitId = cr.circuitId\nJOIN constructorResults cres ON r.raceId = cres.raceId\nJOIN results re ON cres.constructorResultsId = re.constructorResultsId\nJOIN constructors c ON cres.constructorId = c.constructorId\nWHERE r.year = 2009 AND r.name = 'Singapore Grand Prix' AND re.position = 1\nGROUP BY r.raceId, r.name, r.date, cr.circuitRef, c.constructorRef, c.url;\n\nThis query will return the circuit reference name (circuitRef), year, race name, and date for the 2009 Singapore Grand Prix, along with the time of the champion (in the format of \"minutes: seconds.millionsecond\"). The circuitRef and url columns are included in the SELECT clause to provide the constructor reference name and its website.\t----- bird -----\tformula_1",
    "239": " SELECT power\\_name \nFROM superpower \nJOIN hero\\_power ON superpower.id = hero\\_power.power\\_id \nJOIN superhero ON hero\\_power.hero\\_id = superhero.id \nWHERE superhero.superhero\\_name = '3-D Man';\t----- bird -----\tsuperhero",
    "240": " SELECT constructorId, SUM(results.points) as total_points, constructors.name, constructors.nationality\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nJOIN constructors ON results.constructorId = constructors.constructorId\nWHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010\nGROUP BY constructorId\nORDER BY total_points DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "241": " SELECT CONCAT(d.forename, ' ', d.surname) AS full\\_name\nFROM results r\nJOIN qualifying q ON r.raceId = q.raceId AND r.driverId = q.driverId\nJOIN drivers d ON r.driverId = d.driverId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.raceId = (SELECT circuitId FROM circuits WHERE location = 'Marina Bay Street Circuit' AND c.year = 2008)\nAND q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = r.raceId)\nLIMIT 1;\t----- bird -----\tformula_1",
    "242": " SELECT\nd.forename,\nd.surname,\nd.nationality,\nr.name\nFROM drivers d\nJOIN results res ON d.driverId = res.driverId\nJOIN races r ON res.raceId = r.raceId\nJOIN (\nSELECT\ndriverId,\nMIN(raceId) as firstRaceId\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nGROUP BY driverId\n) minRaces ON res.driverId = minRaces.driverId AND res.raceId = minRaces.firstRaceId\nORDER BY d.dob DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "243": " SELECT MAX(accidents) AS max_accidents\nFROM (\n    SELECT COUNT(r.resultId) AS accidents\n    FROM results r\n    JOIN status s ON r.statusId = s.statusId\n    WHERE r.raceId = (\n            SELECT circuitId\n            FROM circuits\n            WHERE circuitRef = 'Canadian Grand Prix'\n        ) AND s.status = 'Accident'\n    GROUP BY r.driverId\n) AS subquery;\n\nThis query calculates the number of accidents for each driver in the Canadian Grand Prix, then finds the maximum number of accidents. The external knowledge indicates that the number of accidents refers to the number of rows where the status ID is 3, which corresponds to 'Accident' in the status table.\t----- bird -----\tformula_1",
    "244": " SELECT\ndrivers.forename,\ndrivers.surname\nFROM drivers\nJOIN lapTimes ON drivers.driverId = lapTimes.driverId\nJOIN results ON drivers.driverId = results.driverId\nJOIN races ON results.raceId = races.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nJOIN seasons ON races.year = seasons.year\nWHERE lapTimes.time = (\nSELECT\nMIN(time)\nFROM lapTimes\nJOIN results ON lapTimes.raceId = results.raceId\nJOIN circuits ON races.circuitId = circuits.circuitId\nJOIN seasons ON races.year = seasons.year\n)\nLIMIT 20;\t----- bird -----\tformula_1",
    "245": " SELECT c.circuitRef, MIN(l.milliseconds) as lapRecord\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE c.country = 'Italy'\nGROUP BY c.circuitId;\t----- bird -----\tformula_1",
    "246": " SELECT COUNT(*)\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power\\_name = 'Super Strength' AND superhero.height\\_cm > 200;\t----- bird -----\tsuperhero",
    "247": " SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id AND colour.colour = 'Blue'\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id AND superpower.power\\_name = 'Agility';\t----- bird -----\tsuperhero",
    "248": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN colour AS eye\\_color ON superhero.eye\\_colour\\_id = eye\\_color.id\nJOIN colour AS hair\\_color ON superhero.hair\\_colour\\_id = hair\\_color.id\nWHERE eye\\_color.colour = 'Blue' AND hair\\_color.colour = 'Blond';\t----- bird -----\tsuperhero",
    "249": " SELECT superhero.superhero\\_name, height\\_cm\nFROM superhero\nJOIN publisher ON superhero.publisher\\_id = publisher.id\nWHERE publisher.publisher\\_name = 'Marvel Comics'\nORDER BY height\\_cm DESC;\t----- bird -----\tsuperhero",
    "250": " SELECT superhero.superhero\\_name, colour.colour\nFROM superhero\nJOIN colour ON superhero.eye\\_colour\\_id = colour.id\nWHERE superhero.publisher\\_id = (SELECT id FROM publisher WHERE publisher\\_name = 'Marvel Comics')\nGROUP BY superhero.eye\\_colour\\_id, superhero.superhero\\_name\nORDER BY COUNT(superhero.id) DESC;\t----- bird -----\tsuperhero",
    "251": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN hero\\_power ON superhero.id = hero\\_power.hero\\_id\nJOIN superpower ON hero\\_power.power\\_id = superpower.id\nJOIN publisher ON superhero.publisher\\_id = publisher.id\nWHERE publisher.publisher\\_name = 'Marvel Comics' AND superpower.power\\_name = 'Super Strength';\t----- bird -----\tsuperhero",
    "252": " SELECT publisher_name \nFROM superhero \nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id \nJOIN attribute ON hero_attribute.attribute_id = attribute.id \nJOIN publisher ON superhero.publisher_id = publisher.id \nWHERE attribute_name = 'Speed' \nGROUP BY publisher_name \nORDER BY MIN(attribute_value);\t----- bird -----\tsuperhero",
    "253": " SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE colour.colour = 'Gold' AND publisher.publisher\\_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "254": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN hero\\_attribute ON superhero.id = hero\\_attribute.hero\\_id\nJOIN attribute ON hero\\_attribute.attribute\\_id = attribute.id\nWHERE attribute\\_name = 'Intelligence'\nGROUP BY superhero.superhero\\_name\nORDER BY MIN(hero\\_attribute.attribute\\_value);\t----- bird -----\tsuperhero",
    "255": " SELECT race \nFROM superhero \nWHERE superhero_name = 'Copycat';\t----- bird -----\tsuperhero",
    "256": " SELECT superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero\\_id\nWHERE attribute\\_id = (SELECT id FROM attribute WHERE attribute\\_name = 'Durability') AND attribute\\_value < 50;\t----- bird -----\tsuperhero",
    "257": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN hero\\_power ON superhero.id = hero\\_power.hero\\_id\nJOIN superpower ON hero\\_power.power\\_id = superpower.id\nWHERE superpower.power\\_name = 'Death Touch';\t----- bird -----\tsuperhero",
    "258": " SELECT COUNT(*)\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nWHERE gender.gender = 'Female' AND hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND hero_attribute.attribute_value = 100;\t----- bird -----\tsuperhero",
    "259": " SELECT\nROUND(100.0 * SUM(CASE WHEN s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 ELSE 0 END) / COUNT(s.id), 2) AS percentage_of_bad_superheroes,\nSUM(CASE WHEN s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND s.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') THEN 1 ELSE 0 END) AS bad_superheroes_from_marvel\nFROM superhero s;\t----- bird -----\tsuperhero",
    "260": " SELECT\n\tCOALESCE(SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END), 0) -\n\tCOALESCE(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END), 0) as diff\nFROM\n\tsuperhero\nJOIN\n\tpublisher ON superhero.publisher_id = publisher.id;\t----- bird -----\tsuperhero",
    "261": " SELECT id \nFROM publisher \nWHERE publisher\\_name = 'Star Trek';\t----- bird -----\tsuperhero",
    "262": " SELECT COUNT(*)\nFROM superhero\nWHERE full_name IS NULL;\t----- bird -----\tsuperhero",
    "263": " SELECT AVG(superhero.weight_kg)\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nWHERE gender.gender = 'Female';\t----- bird -----\tsuperhero",
    "264": " SELECT sp.power\\_name\nFROM superhero sh\nJOIN hero\\_power hp ON sh.id = hp.hero\\_id\nJOIN superpower sp ON hp.power\\_id = sp.id\nWHERE sh.gender\\_id = (SELECT id FROM gender WHERE gender = 'Male');\t----- bird -----\tsuperhero",
    "265": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN colour ON superhero.eye\\_colour\\_id = colour.id AND colour.colour = 'No Colour'\nWHERE superhero.height\\_cm BETWEEN 170 AND 190;\t----- bird -----\tsuperhero",
    "266": " SELECT hair\\_colour\nFROM superhero\nJOIN colour ON superhero.hair\\_colour\\_id = colour.id\nWHERE race = 'human' AND height\\_cm = 185;\t----- bird -----\tsuperhero",
    "267": " SELECT\nROUND(100.0 * COUNT(s.id) / (\nSELECT COUNT(*) FROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.height_cm BETWEEN 150 AND 180\n), 2) AS percentage\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.publisher_id = 13 AND s.height_cm BETWEEN 150 AND 180;\t----- bird -----\tsuperhero",
    "268": " SELECT superhero_name \nFROM superhero \nJOIN gender ON superhero.gender_id = gender.id \nWHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);\t----- bird -----\tsuperhero",
    "269": " SELECT power\\_name \nFROM superpower \nJOIN hero\\_power \nON superpower.id = hero\\_power.power\\_id \nWHERE hero\\_power.hero\\_id = 1;\t----- bird -----\tsuperhero",
    "270": " SELECT COUNT(*)\nFROM hero_power\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power\\_name = 'stealth';\t----- bird -----\tsuperhero",
    "271": " SELECT full\\_name \nFROM superhero sh \nJOIN hero\\_attribute ha ON sh.id = ha.hero\\_id \nWHERE ha.attribute\\_name = 'strength' \nAND ha.attribute\\_value = (\nSELECT MAX(attribute\\_value) \nFROM hero\\_attribute \nWHERE attribute\\_name = 'strength'\n);\t----- bird -----\tsuperhero",
    "272": " SELECT s.superhero\\_name\nFROM superhero s\nJOIN hero\\_attribute ha ON s.id = ha.hero\\_id\nJOIN attribute a ON ha.attribute\\_id = a.id\nJOIN publisher p ON s.publisher\\_id = p.id\nWHERE a.attribute\\_name = 'durability' AND p.publisher\\_name = 'Dark Horse Comics'\nGROUP BY s.superhero\\_name\nORDER BY MAX(ha.attribute\\_value) DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "273": " SELECT e.colour AS eyes, h.hair\\_colour\\_id AS hair, s.colour AS skin\nFROM superhero h\nJOIN gender g ON h.gender\\_id = g.id\nJOIN colour e ON h.eye\\_colour\\_id = e.id\nJOIN colour hc ON h.hair\\_colour\\_id = hc.id\nJOIN colour sc ON h.skin\\_colour\\_id = sc.id\nJOIN publisher p ON h.publisher\\_id = p.id\nWHERE g.gender = 'Female' AND p.publisher\\_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "274": " SELECT s.superhero\\_name, s.publisher\\_id, c1.colour as eye\\_colour, c2.colour as hair\\_colour, c3.colour as skin\\_colour\nFROM superhero s\nJOIN colour c1 ON s.eye\\_colour\\_id = c1.id\nJOIN colour c2 ON s.hair\\_colour\\_id = c2.id\nJOIN colour c3 ON s.skin\\_colour\\_id = c3.id\nWHERE s.eye\\_colour\\_id = s.hair\\_colour\\_id AND s.hair\\_colour\\_id = s.skin\\_colour\\_id\nJOIN publisher p ON s.publisher\\_id = p.id;\t----- bird -----\tsuperhero",
    "275": " SELECT ROUND(100.0 * SUM(s.skin_colour_id = c.id AND s.gender_id = g.id AND c.colour = 'Blue') / SUM(s.gender_id = g.id), 2) AS percentage\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nJOIN gender g ON s.gender_id = g.id;\t----- bird -----\tsuperhero",
    "276": " SELECT COUNT(*)\nFROM hero_power\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.superhero_name = 'Amazo';\t----- bird -----\tsuperhero",
    "277": " SELECT height\\_cm\nFROM superhero\nJOIN colour ON superhero.eye\\_colour\\_id = colour.id\nWHERE colour.colour = 'Amber';\t----- bird -----\tsuperhero",
    "278": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN colour AS eye\\_color ON superhero.eye\\_colour\\_id = eye\\_color.id\nJOIN colour AS hair\\_color ON superhero.hair\\_colour\\_id = hair\\_color.id\nWHERE eye\\_color.colour = 'Black' AND hair\\_color.colour = 'Black';\t----- bird -----\tsuperhero",
    "279": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN alignment ON superhero.alignment\\_id = alignment.id\nWHERE alignment.alignment = 'Neutral';\t----- bird -----\tsuperhero",
    "280": " SELECT COUNT(*)\nFROM hero_attribute\nWHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND\nattribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_name = 'Strength');\t----- bird -----\tsuperhero",
    "281": " SELECT\nROUND(100.0 * SUM(CASE WHEN gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) / COUNT(publisher_name = 'Marvel Comics'), 2) AS percentage\nFROM superhero;\t----- bird -----\tsuperhero",
    "282": " SELECT\n(SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') -\n(SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler') as difference;\t----- bird -----\tsuperhero",
    "283": " SELECT AVG(height\\_cm) AS average\\_height\nFROM superhero;\t----- bird -----\tsuperhero",
    "284": " SELECT power\\_name \nFROM superpower \nJOIN hero\\_power ON superpower.id = hero\\_power.power\\_id \nWHERE hero\\_power.hero\\_id = (SELECT id FROM superhero WHERE superhero\\_name = 'Abomination');\t----- bird -----\tsuperhero",
    "285": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN hero\\_attribute ON superhero.id = hero\\_attribute.hero\\_id\nJOIN attribute ON hero\\_attribute.attribute\\_id = attribute.id\nWHERE attribute\\_name = 'Speed'\nGROUP BY superhero.id\nORDER BY MAX(hero\\_attribute.attribute\\_value) DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "286": " SELECT a.attribute\\_name, ha.attribute\\_value\nFROM superhero\nJOIN hero\\_attribute ha ON superhero.id = ha.hero\\_id\nJOIN attribute a ON ha.attribute\\_id = a.id\nWHERE superhero.superhero\\_name = '3-D Man';\t----- bird -----\tsuperhero",
    "287": " SELECT DISTINCT s.superhero\\_name\nFROM superhero s\nJOIN color c1 ON s.eye\\_colour\\_id = c1.id AND c1.colour = 'Blue'\nJOIN color c2 ON s.hair\\_colour\\_id = c2.id AND c2.colour = 'Brown';\t----- bird -----\tsuperhero",
    "288": " SELECT s.superhero\\_name, p.publisher\\_name\nFROM superhero s\nJOIN publisher p ON s.publisher\\_id = p.id\nWHERE s.superhero\\_name IN ('Hawkman', 'Karate Kid', 'Speedy');\t----- bird -----\tsuperhero",
    "289": " SELECT\nROUND(100.0 * SUM(CASE WHEN s.eye_colour_id = c.id AND c.colour = 'Blue' THEN 1 ELSE 0 END) / COUNT(s.id), 2) AS blue_eyes_percentage\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id;\t----- bird -----\tsuperhero",
    "290": " SELECT ROUND(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 2) AS ratio\nFROM superhero;\t----- bird -----\tsuperhero",
    "291": " SELECT colour.color\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full\\_name = 'Karen Beecher-Duncan';\t----- bird -----\tsuperhero",
    "292": " SELECT\nSUM(CASE WHEN color.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN color.id = 1 THEN 1 ELSE 0 END)\nFROM superhero\nLEFT JOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.weight_kg = 0 OR superhero.weight_kg IS NULL;\t----- bird -----\tsuperhero",
    "293": " SELECT COUNT(\\*)\nFROM superhero\nJOIN colour ON superhero.skin_colour_id = colour.id\nJOIN alignment ON superhero.alignment\\_id = alignment.id\nWHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';\t----- bird -----\tsuperhero",
    "294": " SELECT superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power\\_name = 'Wind Control' \nORDER BY superhero\\_name;\t----- bird -----\tsuperhero",
    "295": " SELECT s.superhero\\_name, g.gender\nFROM superhero s\nJOIN gender g ON s.gender\\_id = g.id\nJOIN hero\\_power hp ON s.id = hp.hero\\_id\nJOIN superpower sp ON hp.power\\_id = sp.id\nWHERE sp.power\\_name = 'Phoenix Force';\t----- bird -----\tsuperhero",
    "296": " SELECT\nSUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) as difference\nFROM superhero;\t----- bird -----\tsuperhero",
    "297": " SELECT MAX(u.Reputation)\nFROM users u\nWHERE u.DisplayName IN ('Harlan', 'Jarrod Dixon')\nGROUP BY u.DisplayName;\n\nThis query will return the highest reputation for each of the users \"Harlan\" and \"Jarrod Dixon\". Based on the external knowledge provided, the result of this query will give us the user with the higher reputation between the two.\t----- bird -----\tcodebase_community",
    "298": " SELECT DisplayName \nFROM users \nWHERE YEAR(CreationDate) = 2011;\t----- bird -----\tcodebase_community",
    "299": " SELECT COUNT(*)\nFROM users\nWHERE LastAccessDate > '2014-09-01';\t----- bird -----\tcodebase_community",
    "300": " SELECT OwnerDisplayName\nFROM posts\nWHERE Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "301": " SELECT COUNT(\\*)\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "302": " SELECT u.DisplayName\nFROM postHistory\nJOIN users u ON postHistory.UserId = u.Id\nWHERE postHistory.PostId = (\nSELECT Id\nFROM posts\nWHERE Tags LIKE '%Examples for teaching: Correlation does not mean causation%'\nORDER BY CreaionDate DESC\nLIMIT 1)\nAND PostHistoryTypeId = 2\nORDER BY postHistory.CreationDate DESC\nLIMIT 1;\t----- bird -----\tcodebase_community",
    "303": " SELECT COUNT(\\*)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age > 65 AND p.Score >= 20;\t----- bird -----\tcodebase_community",
    "304": " SELECT Body\nFROM posts\nWHERE Id IN (\n SELECT ExcerptPostId\n FROM tags\n WHERE TagName = 'bayesian'\n) ;\t----- bird -----\tcodebase_community",
    "305": " SELECT AVG(p.Score)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "306": " SELECT 100.0 * COUNT(DISTINCT CASE WHEN u.Age > 65 THEN p.Id END) / COUNT(DISTINCT p.Id) AS percentage\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 5;\t----- bird -----\tcodebase_community",
    "307": " SELECT f.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN users u ON c.UserId = u.Id\nJOIN posts f ON c.PostId = f.Id\nWHERE u.Id = 3025 AND c.CreationDate = '2014-04-23 20:29:39';\t----- bird -----\tcodebase_community",
    "308": " SELECT well_finished\nFROM (\nSELECT p.Id,\nCASE\nWHEN p.ClosedDate IS NULL THEN 'not well-finished'\nELSE 'well-finished'\nEND AS well_finished\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN users u ON c.UserId = u.Id\nWHERE u.Id = 23853 AND c.CreationDate = '2013-07-12 09:08:18'\n) tmp;\t----- bird -----\tcodebase_community",
    "309": " SELECT COUNT(\\*)\nFROM posts\nWHERE OwnerDisplayName = 'Tiago Pasqualini';\t----- bird -----\tcodebase_community",
    "310": " SELECT u.DisplayName \nFROM votes v \nJOIN users u ON v.UserId = u.Id \nWHERE v.Id = 6347;\t----- bird -----\tcodebase_community",
    "311": " SELECT COUNT(p.Id) / COUNT(v.Id) as post_to_vote_ratio\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nJOIN votes v ON p.Id = v.PostId\nWHERE u.Id = 24;\t----- bird -----\tcodebase_community",
    "312": " SELECT ViewCount\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "313": " SELECT Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName\nFROM comments\nWHERE Score = 17;\t----- bird -----\tcodebase_community",
    "314": " SELECT UserDisplayName\nFROM comments\nWHERE Text = 'thank you user93!';\t----- bird -----\tcodebase_community",
    "315": " SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community",
    "316": " SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data';\t----- bird -----\tcodebase_community",
    "317": " To get the comments left by users who edited the post with the title 'Why square the difference instead of taking the absolute value in standard deviation?', you would need to join the `posts` table with the `postHistory` table on the `Id` column, and then filter for rows where the `postHistory.PostHistoryTypeId` is equal to the value for the type of edit (e.g. 2 for body edit), and the `postHistory.Text` column contains the title of the post. Then, you can select the `postHistory.Id`, `postHistory.CreationDate`, `postHistory.UserId`, `postHistory.UserDisplayName`, and `postHistory.Text` columns to get the information about the edit and the user who made it.\n\nHere is the MySQL query to achieve this:\n\n```\nSELECT ph.Id, ph.CreationDate, ph.UserId, ph.UserDisplayName, ph.Text\nFROM posts p\nJOIN postHistory ph ON p.Id = ph.PostId\nWHERE ph.PostHistoryTypeId = 2\nAND ph.Text LIKE '%Why square the difference instead of taking the absolute value in standard deviation?%';\n```\n\nNote: The value 2 for `PostHistoryTypeId` is just an example, you may need to check the actual value for the type of edit you are interested in.\t----- bird -----\tcodebase_community",
    "318": " SELECT u.DisplayName\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nJOIN posts p ON v.PostId = p.Id\nWHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';\t----- bird -----\tcodebase_community",
    "319": " SELECT AVG(p.ViewCount) as avg\\_view\\_count, t.TagName, p.Title, c.Text\nFROM posts p\nJOIN postHistory ph on p.Id = ph.PostId\nJOIN postLinks pl on p.Id = pl.PostId\nJOIN tags t on pl.RelatedPostId = t.Id\nJOIN comments c on p.Id = c.PostId\nWHERE ph.PostHistoryTypeId = 1\nAND t.TagName = 'humor'\nGROUP BY t.TagName;\t----- bird -----\tcodebase_community",
    "320": " SELECT COUNT(\\*)\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nGROUP BY u.Id\nHAVING COUNT(b.Name) > 5;\t----- bird -----\tcodebase_community",
    "321": " SELECT u.Id, u.DisplayName\nFROM users u\nJOIN postHistory ph ON u.Id = ph.UserId\nJOIN posts p ON ph.PostId = p.Id\nWHERE p.Views >= 1000\nGROUP BY u.Id, u.DisplayName, p.Id, p.Views\nHAVING COUNT(ph.Id) = 1;\t----- bird -----\tcodebase_community",
    "322": " SELECT \n100 \\* (\n(SELECT COUNT(b1.Name) FROM badges b1 JOIN posts p1 ON b1.UserId = p1.OwnerUserId WHERE b1.Name = 'Student' AND YEAR(p1.CreationDate) = 2010) /\n(SELECT COUNT(DISTINCT p2.Id) FROM posts p2) -\n(SELECT COUNT(b3.Name) FROM badges b3 JOIN posts p3 ON b3.UserId = p3.OwnerUserId WHERE b3.Name = 'Student' AND YEAR(p3.CreationDate) = 2011) /\n(SELECT COUNT(DISTINCT p4.Id) FROM posts p4)\n) AS percentage_difference;\t----- bird -----\tcodebase_community",
    "323": " SELECT \nAVG(u.UpVotes) AS avg\\_upvotes,\nAVG(u.Age) AS avg\\_age\nFROM users u\nJOIN (\nSELECT Id, COUNT(*) as post\\_count\nFROM posts\nGROUP BY Id\nHAVING post\\_count > 10\n) pc ON u.Id = pc.Id;\t----- bird -----\tcodebase_community",
    "324": " SELECT DIVIDE(COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2010), COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2011) as ratio;\t----- bird -----\tcodebase_community",
    "325": " SELECT PostId\nFROM posts\nWHERE OwnerDisplayName = 'slashnick' AND AnswerCount = (SELECT MAX(AnswerCount) FROM posts);\t----- bird -----\tcodebase_community",
    "326": " SELECT MAX(SUM(p.ViewCount)) as Popularity\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky' OR u.DisplayName = 'Noah Snyder'\nGROUP BY u.DisplayName;\t----- bird -----\tcodebase_community",
    "327": " SELECT t.TagName\nFROM posts p\nJOIN postHistory ph ON p.Id = ph.PostId\nJOIN tags t ON ph.Text LIKE concat('%', t.TagName, '%')\nJOIN users u ON p.OwnerUserId = u.Id\nLEFT JOIN comments c ON p.Id = c.PostId\nWHERE u.DisplayName = 'Mark Meckes' AND c.Id IS NULL;\t----- bird -----\tcodebase_community",
    "328": " SELECT \n100.0 * COUNT(p.Id) / SUM(p.Id IS NOT NULL) AS percentage\nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.TagName = 'r'\nAND p.OwnerDisplayName = 'Community';\t----- bird -----\tcodebase_community",
    "329": " SELECT \nSUM(CASE WHEN u.DisplayName = 'Mornington' THEN p.ViewCount ELSE 0 END) - \nSUM(CASE WHEN u.DisplayName = 'Amos' THEN p.ViewCount ELSE 0 END) AS ViewCountDifference\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id;\t----- bird -----\tcodebase_community",
    "330": " SELECT\nAVG(EXTRACT(MONTH FROMCreationDate)) AS average\\_monthly\\_links\nFROM postLinks\nWHERE YEAR(CreationDate) = 2\t----- bird -----\tcodebase_community",
    "331": " SELECT MIN(v.CreationDate)\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE u.DisplayName = 'chl';\t----- bird -----\tcodebase_community",
    "332": " SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Autobiographer'\nAND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer');\t----- bird -----\tcodebase_community",
    "333": " SELECT COUNT(DISTINCT u.Id)\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;\t----- bird -----\tcodebase_community",
    "334": " SELECT Id, Title\nFROM posts\nWHERE OwnerDisplayName = 'Harvey Motulsky' AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky');\t----- bird -----\tcodebase_community",
    "335": " SELECT Id, OwnerDisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE YEAR(CreationDate) = 2010 AND FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE YEAR(CreationDate) = 2010);\t----- bird -----\tcodebase_community",
    "336": " SELECT\nDIVIDE(\nCOUNT(p.Id)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE YEAR(p.CreationDate) = 2011 AND u.Reputation > 1000),\nCOUNT(p.Id)) * 100\nAS percentage\nFROM posts p;\t----- bird -----\tcodebase_community",
    "337": " SELECT SUM(ViewCount) as total\\_views, MAX(OwnerDisplayName) as last\\_user\nFROM posts\nWHERE Text = 'Computer Game Datasets';\t----- bird -----\tcodebase_community",
    "338": " SELECT COUNT(\\*)\nFROM comments\nWHERE PostId = (\nSELECT Id\nFROM posts\nORDER BY Score DESC\nLIMIT 1\n);\t----- bird -----\tcodebase_community",
    "339": " Here is the MySQL query to get the text of the latest 10 comments along with the display name of the user who left it for the post with the title 'Analysing wind data with R':\n\n```\nSELECT c.Text, u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R' LIMIT 1)\nORDER BY c.CreationDate DESC\nLIMIT 10;\n```\t----- bird -----\tcodebase_community",
    "340": " SELECT 100.0 * COUNT(p.Id) / (\nSELECT COUNT(p2.Id)\nFROM posts p2\nJOIN users u ON p2.OwnerUserId = u.Id\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users)\n) AS percentage\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 50 AND u.Reputation = (SELECT MAX(Reputation) FROM users);\t----- bird -----\tcodebase_community",
    "341": " SELECT ExcerptPostId, WikiPostId \nFROM tags \nWHERE TagName = 'sample';\t----- bird -----\tcodebase_community",
    "342": " SELECT u.Reputation, u.UpVotes\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'fine, you win :)';\t----- bird -----\tcodebase_community",
    "343": " SELECT Text, MAX(Score) as HighestScore\nFROM comments C\nJOIN posts P ON C.PostId = P.Id\nWHERE P.ViewCount BETWEEN 100 AND 150;\t----- bird -----\tcodebase_community",
    "344": " SELECT COUNT(c.Id)\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.CommentCount = 1 AND c.Score = 0;\t----- bird -----\tcodebase_community",
    "345": " SELECT 100.0 * COUNT(DISTINCT c.UserId) / COUNT(DISTINCT u.Id) AS percentage\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nJOIN posts p ON c.PostId = p.Id\nWHERE c.Score BETWEEN 5 AND 10 AND u.UpVotes = 0;\t----- bird -----\tcodebase_community",
    "346": " SELECT * FROM cards\nWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "347": " SELECT *\nFROM cards\nWHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "348": " SELECT c.*\nFROM cards c\nJOIN foreign\\_data fd ON c.uuid = fd.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE c.rarity = 'mythic' AND fd.text = 'banned' AND s.format = 'gladiator';\t----- bird -----\tcard_games",
    "349": " SELECT l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';\t----- bird -----\tcard_games",
    "350": " SELECT c.id, c.artist\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE (c.power IS NULL OR c.power = '*')\nAND l.format = 'commander'\nAND l.status = 'Legal';\t----- bird -----\tcard_games",
    "351": " SELECT c.id, r.text\nFROM cards c\nJOIN foreign\\_data f ON c.uuid = f.uuid\nJOIN rulings r ON c.id = r.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE f.artist = 'Stephen Daniele' AND c.hasContentWarning = 1;\t----- bird -----\tcard_games",
    "352": " SELECT c.name, c.artist, MAX(COUNT(r.uuid)) as num\\_rulings\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.isPromo = 1\nGROUP BY c.name, c.artist;\t----- bird -----\tcard_games",
    "353": " SELECT \n100.0 * SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) / COUNT(*) AS percentage \nFROM \n(\nSELECT f.language, c.id \nFROM cards c \nJOIN foreign_data f ON c.uuid = f.uuid \nWHERE f.language IS NOT NULL\n) tmp;\n```\n```\t----- bird -----\tcard_games",
    "354": " SELECT COUNT(\\*)\nFROM cards\nWHERE power = '\\*';\t----- bird -----\tcard_games",
    "355": " SELECT borderColor\nFROM cards\nWHERE name = 'Ancestor\\'s Chosen';\t----- bird -----\tcard_games",
    "356": " SELECT r.text \nFROM rulings r \nJOIN cards c ON r.uuid = c.uuid \nWHERE c.name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "357": " SELECT 100.0 * COUNT(c.id) / (SELECT COUNT(id) FROM cards c) AS percentage\nFROM cards c\nWHERE c.borderColor = 'borderless';\n```\n\nThis SQL query calculates the percentage of borderless cards in the `cards` table. It does this by dividing the count of cards with `borderColor` equal to 'borderless' by the total number of cards, and then multiplying the result by 100 to get the percentage.\n```\t----- bird -----\tcard_games",
    "358": " SELECT \nROUND(100 * SUM(CASE WHEN f.language = 'French' AND c.isStorySpotlight = 1 THEN 1 ELSE 0 END) / COUNT(c.id) WHERE c.isStorySpotlight = 1) AS French_StorySpotlight_Percentage\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid;\n```\t----- bird -----\tcard_games",
    "359": " SELECT COUNT(\\*)\nFROM cards\nWHERE originalType = 'Summon - Angel' AND subtypes NOT REGEXP 'Angel';\t----- bird -----\tcard_games",
    "360": " SELECT id \nFROM cards \nWHERE duelDeck IS NOT NULL AND duelDeck <> '' AND duelDeck = 'a';\t----- bird -----\tcard_games",
    "361": " SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Banned' AND cards.borderColor = 'white';\t----- bird -----\tcard_games",
    "362": " SELECT c.*\nFROM cards c\nJOIN foreign\\_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language <> 'en';\t----- bird -----\tcard_games",
    "363": " SELECT manaCost\nFROM cards\nWHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper';\t----- bird -----\tcard_games",
    "364": " SELECT \nDIVIDE(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END), COUNT(id)) \\* 100 AS percentage,\nid \nFROM cards \nGROUP BY id;\t----- bird -----\tcard_games",
    "365": " SELECT COUNT(*)\nFROM sets\nJOIN set\\_translations ON sets.code = set\\_translations.setCode\nWHERE sets.block = 'Commander' AND set\\_translations.language = 'Portuguese (Brasil)';\t----- bird -----\tcard_games",
    "366": " SELECT DISTINCT germanTypes.type\nFROM cards\nJOIN set\\_translations ON cards.setCode = set\\_translations.setCode\nJOIN foreign\\_data ON cards.uuid = foreign\\_data.uuid\nJOIN sets ON cards.setCode = sets.code\nWHERE set\\_translations.language = 'German' AND (cards.types IS NOT NULL OR cards.supertypes IS NOT NULL);\n\nThis query will give you all the types of cards in German by joining the `cards`, `set_translations`, `foreign_data`, and `sets` tables. It filters the results to only include rows where the language in `set_translations` is 'German' and where either the `types` or `supertypes` column in the `cards` table is not null. The `DISTINCT` keyword is used to ensure that each type is only listed once.\t----- bird -----\tcard_games",
    "367": " SELECT COUNT(*)\nFROM cards\nWHERE power IS NULL OR power = '*' AND LOCATE('triggered ability', LOWER(text)) > 0;\t----- bird -----\tcard_games",
    "368": " SELECT COUNT(c.id)\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE s.format = 'premodern'\nAND r.text = 'This is a triggered mana ability.'\nAND c.side IS NULL;\t----- bird -----\tcard_games",
    "369": " SELECT fd.name\nFROM cards c\nJOIN foreign\\_data fd ON c.uuid = fd.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE fd.language = 'French'\nAND c.type = 'Creature'\nAND c.layout = 'normal'\nAND c.borderColor = 'black'\nAND c.artist = 'Matthew D. Wilson';\t----- bird -----\tcard_games",
    "370": " SELECT set\\_translations.translation\nFROM set\\_translations\nJOIN sets ON set\\_translations.setCode = sets.code\nWHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';\t----- bird -----\tcard_games",
    "371": " SELECT \nDIVIDE(COUNT(c.id), (SELECT totalSetSize FROM sets WHERE code = 'commander'))*100 \nFROM cards c \nJOIN legalities l ON c.uuid = l.uuid \nWHERE c.format = 'commander' AND l.status = 'legal' AND c.hasContentWarning = 0;\t----- bird -----\tcard_games",
    "372": " SELECT \nDIVIDE(COUNT(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 END), COUNT(power IS NULL OR power = '*'))*100 \nFROM cards \nJOIN foreign_data ON cards.uuid = foreign_data.uuid \nWHERE power IS NULL OR power = '*';\n```\t----- bird -----\tcard_games",
    "373": " SELECT f.language\nFROM foreign\\_data f\nJOIN cards c ON f.uuid = c.uuid\nWHERE c.multiverseId = 149934;\t----- bird -----\tcard_games",
    "374": " SELECT (COUNT(CASE WHEN cards.isTextless = 1 AND cards.layout = 'normal' THEN 1 END) / COUNT(\\*)) \\* 100 AS proportion\nFROM cards;\n```sql\n\nThis query calculates the proportion of cards that do not have a text box with a normal layout. It does this by counting the number of cards where isTextless is 1 and layout is 'normal', dividing that by the total number of cards, and then multiplying by 100 to get the proportion as a percentage.\n```\t----- bird -----\tcard_games",
    "375": " SELECT DISTINCT language\nFROM sets\nJOIN set\\_translations ON sets.id = set\\_translations.id\nWHERE mcmName = 'Archenemy' AND sets.code = 'ARC';\t----- bird -----\tcard_games",
    "376": " SELECT language\nFROM foreign\\_data\nWHERE name = 'A Pedra Fellwar'\nAND language <> 'English';\t----- bird -----\tcard_games",
    "377": " SELECT c1.name, c1.convertedManaCost as mana_cost\nFROM cards c1\nWHERE c1.name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY mana_cost DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "378": " SELECT set\\_translations.translation\nFROM set\\_translations\nJOIN sets ON set\\_translations.setCode = sets.code\nWHERE sets.name = 'Ancestor\\'s Chosen' AND set\\_translations.language = 'Italian';\t----- bird -----\tcard_games",
    "379": " SELECT f.name, f.language\nFROM cards c\nJOIN foreign\\_data f ON c.uuid = f.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND f.language = 'Korean';\t----- bird -----\tcard_games",
    "380": " SELECT COUNT(\\*)\nFROM cards\nJOIN set\\_translations ON cards.setCode = set\\_translations.setCode\nJOIN foreign\\_data ON cards.uuid = foreign\\_data.uuid\nWHERE set\\_translations.translation = 'Hauptset Zehnte Edition' AND foreign\\_data.artist = 'Adam Rex';\t----- bird -----\tcard_games",
    "381": " SELECT translation\nFROM set\\_translations\nWHERE setCode = 'EIGH' AND language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "382": " SELECT COUNT(*)\nFROM sets\nWHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL;\t----- bird -----\tcard_games",
    "383": " SELECT COUNT(*)\nFROM sets\nWHERE block = 'Ice Age' AND language = 'Italian' AND translation IS NOT NULL;\t----- bird -----\tcard_games",
    "384": " SELECT sets.isForeignOnly\nFROM sets\nJOIN cards ON sets.code = cards.setCode\nWHERE cards.name = 'Adarkar Valkyrie';\t----- bird -----\tcard_games",
    "385": " SELECT COUNT(\\*)\nFROM sets\nWHERE language = 'Italian' AND baseSetSize < 100;\t----- bird -----\tcard_games",
    "386": " SELECT DISTINCT a.artist\nFROM cards a\nJOIN sets b ON a.setCode = b.code\nWHERE b.name = 'Coldsnap' AND a.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\t----- bird -----\tcard_games",
    "387": " SELECT COUNT(\\*)\nFROM cards T1\nJOIN sets T2 ON T1.setCode = T2.code\nWHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL) AND T2.name = 'Coldsnap';\t----- bird -----\tcard_games",
    "388": " SELECT foreign\\_data.flavorText\nFROM foreign\\_data\nJOIN cards ON foreign\\_data.uuid = cards.uuid\nWHERE cards.name = 'Ancestor''s Chosen' AND foreign\\_data.language = 'Italian';\t----- bird -----\tcard_games",
    "389": " SELECT r.text\nFROM rulings r\nJOIN cards c ON r.uuid = c.uuid\nJOIN set\\_translations st ON c.setCode = st.setCode\nWHERE st.language = 'Italian' AND c.name = 'Coldsnap';\t----- bird -----\tcard_games",
    "390": " SELECT foreign\\_data.name \nFROM foreign\\_data \nJOIN cards ON foreign\\_data.uuid = cards.uuid \nJOIN sets ON cards.setCode = sets.code \nWHERE sets.name = 'Coldsnap' \nAND foreign\\_data.language = 'Italian' \nAND cards.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap')\nGROUP BY foreign\\_data.name;\t----- bird -----\tcard_games",
    "391": " SELECT ROUND(SUM(CASE WHEN name = 'Coldsnap' AND convertedManaCost = 7 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN name = 'Coldsnap' THEN 1 ELSE 0 END), 0) * 100, 2) AS percentage;\n\nThis query calculates the percentage of cards with a converted mana cost of 7 in the set Coldsnap by dividing the sum of 1 for each card in the Coldsnap set with a converted mana cost of 7 by the sum of 1 for all cards in the Coldsnap set, and then multiplying the result by 100. The ROUND function is used to round the percentage to two decimal places. The NULLIF function is used to avoid division by zero error in case there are no cards in the Coldsnap set.\t----- bird -----\tcard_games",
    "392": " SELECT\nDIVIDE(SUM(cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL), SUM(name = 'Coldsnap'))*100\nas percentage\nFROM cards\nWHERE name = 'Coldsnap';\t----- bird -----\tcard_games",
    "393": " SELECT l.format, c.name\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE l.status = 'Banned'\nGROUP BY l.format\nORDER BY COUNT(l.status = 'Banned') DESC\nLIMIT 1;\t----- bird -----\tcard_games",
    "394": " SELECT c.name, f.format, f.status\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nJOIN legalities l ON c.uuid = l.uuid\nWHERE f.edhrecRank = 1 AND l.status = 'Banned';\t----- bird -----\tcard_games",
    "395": " SELECT DISTINCT c.name\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Hour of Devastation' AND c.name IN (\n    SELECT f.name\n    FROM foreign_data f\n    WHERE f.multiverseid = c.multiverseId AND f.language = 'English'\n) AND c.uuid IN (\n    SELECT l.uuid\n    FROM legalities l\n    WHERE l.status = 'Legal'\n)\nJOIN sets s2 ON l.uuid = s2.code;\n\nThis query first joins the 'cards' table with the 'sets' table on the 'setCode' and 'code' columns, respectively, to filter for the 'Hour of Devastation' set. Then, it joins the 'foreign\\_data' table on the 'multiverseid' and 'uuid' columns to get the English names of the cards. After that, it joins the 'legalities' table on the 'uuid' column to get the legal formats for the cards. Finally, it joins the 'sets' table again on the 'code' column to get the names of the formats. The DISTINCT keyword is used to eliminate any duplicate card names from the result set.\t----- bird -----\tcard_games",
    "396": " SELECT s.name\nFROM sets s\nWHERE s.name NOT REGEXP 'Japanese' AND s.name REGEXP 'Korean';\t----- bird -----\tcard_games",
    "397": " SELECT DISTINCT frameVersion AS frame\\_style\nFROM cards;\n\nSELECT DISTINCT a.asciiName AS card\\_name, c.artist\nFROM cards c\nJOIN foreign\\_data f ON c.uuid = f.uuid\nWHERE f.artist = 'Allen Williams';\n\nSELECT c.name AS card\\_name, l.format AS format, l.status AS status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.status = 'Banned';\t----- bird -----\tcard_games",
    "398": " SELECT bond\\_type, COUNT(*) as bond\\_count\nFROM bond\nJOIN molecule ON molecule.molecule\\_id = bond.molecule\\_id\nGROUP BY bond\\_type\nORDER BY bond\\_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "399": " SELECT AVG(atom_count_O) as avg_oxygen_atoms\nFROM (\nSELECT COUNT(a.atom_id) as atom_count_O\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE m.molecule_id = a2.molecule_id AND b.bond_type = '-' AND a2.element = 'o'\nGROUP BY m.molecule_id\n) as subquery;\t----- bird -----\ttoxicology",
    "400": " SELECT AVG(c.average)\nFROM (\nSELECT m.label, AVG(b.bond_type = '-') AS average\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+'\nGROUP BY m.molecule_id\n) c;\t----- bird -----\ttoxicology",
    "401": " SELECT DISTINCT m.molecule\\_id\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id OR a.atom\\_id = c.atom\\_id2\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE m.label = '+' AND b.bond\\_type = '#';\t----- bird -----\ttoxicology",
    "402": " SELECT\nDIVIDE(SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END), COUNT(DISTINCT a.atom_id)) AS carbon_percentage\nFROM\natom a\nJOIN\nmolecule m ON a.molecule\\_id = m.molecule\\_id\nJOIN\nbond b ON m.molecule\\_id = b.molecule\\_id\nWHERE\nb.bond\\_type = '='\n;\t----- bird -----\ttoxicology",
    "403": " SELECT e.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN connected c2 ON c.atom\\_id2 = c2.atom\\_id\nJOIN atom a2 ON c2.atom\\_id = a2.atom\\_id\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE b.bond\\_id = 'TR004_8_9';\t----- bird -----\ttoxicology",
    "404": " SELECT DISTINCT element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '=';\t----- bird -----\ttoxicology",
    "405": " SELECT a.label\nFROM atom a\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nJOIN atom h ON m.molecule\\_id = h.molecule\\_id\nWHERE m.label IS NOT NULL AND h.element = 'h'\nGROUP BY a.label\nORDER BY COUNT(a.label) DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "406": " SELECT element\nFROM atom a\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nWHERE m.label = '-'\nGROUP BY element\nORDER BY COUNT(a.atom\\_id) ASC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "407": " SELECT bond_type\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE (connected.atom\\_id = 'TR004\\_8' AND connected.atom\\_id2 = 'TR004\\_20')\nOR (connected.atom\\_id = 'TR004\\_20' AND connected.atom\\_id2 = 'TR004\\_8');\t----- bird -----\ttoxicology",
    "408": " SELECT SUM(CASE WHEN a.element = 'i' THEN 1 ELSE 0 END) AS iodine_atoms,\n       SUM(CASE WHEN a.element = 's' THEN 1 ELSE 0 END) AS sulfur_atoms\nFROM atom a\nJOIN bond b ON a.molecule\\_id = b.molecule\\_id\nJOIN connected c ON (a.atom\\_id = c.atom\\_id1 AND b.bond\\_id = c.bond\\_id)\nWHERE b.bond\\_type = '-'\nGROUP BY a.molecule\\_id;\t----- bird -----\ttoxicology",
    "409": " SELECT 100.0 * AVG(percentage) AS 'percentage without fluorine'\nFROM (\nSELECT m.label, 100.0 * COUNT(DISTINCT a.atom_id) / COUNT(DISTINCT m2.atom_id) AS percentage\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nLEFT JOIN (\nSELECT DISTINCT atom_id, molecule_id\nFROM atom\nWHERE element = 'f'\n) a2 ON a.atom_id = a2.atom_id AND a.molecule_id = a2.molecule_id\nJOIN (\nSELECT DISTINCT atom_id, molecule_id\nFROM atom\n) m2 ON a.atom_id = m2.atom_id\nWHERE m.label = '+' AND a2.atom_id IS NULL\nGROUP BY m.molecule_id\n) tmp;\t----- bird -----\ttoxicology",
    "410": " SELECT DIVIDE(SUM(CASE WHEN b.bond_type = '#' AND m.label = '+' THEN 1 ELSE 0 END) * 100, COUNT(b.bond_id)) as percent\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN bond b ON m.molecule\\_id = b.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id2 OR a.atom\\_id = c.atom\\_id;\t----- bird -----\ttoxicology",
    "411": " SELECT element\nFROM atom\nWHERE molecule\\_id = 'TR000'\nGROUP BY element\nORDER BY element ASC;\t----- bird -----\ttoxicology",
    "412": " SELECT ROUND(DIVIDE(SUM(bond\\_type = '='), COUNT(bond\\_id)) \\* 100, 5) AS `percentage`\nFROM bond\nWHERE molecule\\_id = 'TR008';\t----- bird -----\ttoxicology",
    "413": " SELECT ROUND(DIV(SUM(label = '+'), COUNT(DISTINCT molecule_id)) \\* 100, 3) AS `percentage`\nFROM molecule\nLEFT JOIN atom ON molecule.molecule\\_id = atom.molecule\\_id\nWHERE label = '+';\t----- bird -----\ttoxicology",
    "414": " SELECT ROUND(DIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(atom_id)) * 100, 4) AS percent_hydrogen\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR206';\n```\t----- bird -----\ttoxicology",
    "415": " SELECT a.element, m.label\nFROM atom a\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nWHERE m.molecule\\_id = 'TR060';\t----- bird -----\ttoxicology",
    "416": " SELECT bond_type\nFROM bond\nWHERE molecule\\_id = 'TR010' AND bond\\_type = (SELECT MAX(bond\\_type\\_count) FROM\n(SELECT bond\\_type, COUNT(bond\\_type) as bond\\_type\\_count FROM bond WHERE molecule\\_id = 'TR010' GROUP BY bond\\_type) as subquery)\nLIMIT 1;\n\nNote: This query will return the bond type that has the maximum count in the bond table for molecule TR010. However, it does not provide information on whether or not this molecule is carcinogenic, as this information is not available in the provided tables.\t----- bird -----\ttoxicology",
    "417": " SELECT m.molecule\\_id\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nJOIN atom a2 ON c.atom\\_id2 = a2.atom\\_id\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE m.label = '-' AND b.bond\\_type = '-'\nGROUP BY m.molecule\\_id\nORDER BY m.molecule\\_id\nLIMIT 3;\t----- bird -----\ttoxicology",
    "418": " SELECT COUNT(DISTINCT bond_id)\nFROM bond\nJOIN atom ON bond.molecule_id = atom.molecule_id\nJOIN connected ON (bond.molecule_id = connected.molecule_id AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12'))\nWHERE atom.atom_id = 'TR009_12' OR atom.atom_id2 = 'TR009_12';\t----- bird -----\ttoxicology",
    "419": " SELECT bond.bond\\_type, atom.element AS atom1, atom2.element AS atom2\nFROM bond\nJOIN connected ON bond.bond\\_id = connected.bond\\_id\nJOIN atom ON connected.atom\\_id = atom.atom\\_id OR connected.atom\\_id2 = atom.atom\\_id\nJOIN atom AS atom2 ON connected.atom\\_id2 = atom2.atom\\_id\nWHERE bond.bond\\_id = 'TR001\\_6\\_9';\t----- bird -----\ttoxicology",
    "420": " SELECT COUNT(\\*)\nFROM connected\nWHERE atom\\_id = 'TR%\\_19' OR atom\\_id2 = 'TR%\\_19';\t----- bird -----\ttoxicology",
    "421": " SELECT atom.element\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR004';\t----- bird -----\ttoxicology",
    "422": " SELECT DISTINCT m.molecule\\_id\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nWHERE a.atom\\_id BETWEEN 'A21' AND 'A25' AND m.label = '+';\t----- bird -----\ttoxicology",
    "423": " SELECT bond_id\nFROM bond b\nJOIN atom a1 ON b.molecule_id = a1.molecule_id\nJOIN atom a2 ON b.molecule_id = a2.molecule_id\nWHERE a1.element = 'p' AND a2.element = 'n';\t----- bird -----\ttoxicology",
    "424": " SELECT m.label\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id OR a.atom\\_id = c.atom\\_id2\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE b.bond\\_type = ' = '\nGROUP BY m.molecule\\_id\nORDER BY COUNT(b.bond\\_id) DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "425": " SELECT AVG(counts.bond_count) AS avg_bonds\nFROM (\n    SELECT COUNT(bond.bond_id) AS bond_count\n    FROM atom\n    JOIN molecule ON atom.molecule_id = molecule.molecule_id\n    JOIN bond ON molecule.molecule_id = bond.molecule_id\n    WHERE atom.element = 'i' AND atom.atom_id = connected.atom_id2 AND connected.atom_id = bond.atom_id\n    GROUP BY atom.atom_id\n) AS counts;\t----- bird -----\ttoxicology",
    "426": " SELECT DISTINCT a.element\nFROM atom a\nLEFT JOIN connected c ON a.atom\\_id = c.atom\\_id\nWHERE c.atom\\_id IS NULL;\t----- bird -----\ttoxicology",
    "427": " SELECT a.*\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE m.molecule_id = 'TR041' AND b.bond_type = '#';\t----- bird -----\ttoxicology",
    "428": " SELECT atom.element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_id = 'TR144_8_19';\t----- bird -----\ttoxicology",
    "429": " SELECT DISTINCT `element`\nFROM `atom` a\nJOIN `connected` c ON a.`atom_id` = c.`atom_id` OR a.`atom_id` = c.`atom_id2`\nJOIN `bond` b ON c.`bond_id` = b.`bond_id`\nWHERE b.`bond_type` = '#';\t----- bird -----\ttoxicology",
    "430": " SELECT \nFORMAT(100.0 * SUM(CASE WHEN m.label = '+' AND b.bond_type = '-' THEN 1 ELSE 0 END) / COUNT(b.bond_id), 5) AS proportion\nFROM\nmolecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id;\t----- bird -----\ttoxicology",
    "431": " SELECT COUNT(*)\nFROM atom a\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE (b.bond\\_type = '#' AND (a.element = 'p' OR a.element = 'br'));\t----- bird -----\ttoxicology",
    "432": " SELECT\nDIVIDE(SUM(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END), COUNT(atom.atom_id)) AS percent\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom\\_id2\nJOIN bond ON connected.bond\\_id = bond.bond\\_id\nWHERE bond.bond\\_type = '-'\nGROUP BY atom.molecule\\_id;\t----- bird -----\ttoxicology",
    "433": " SELECT `element`\nFROM atom\nJOIN connected ON atom.atom\\_id = connected.atom\\_id OR atom.atom\\_id = connected.atom\\_id2\nJOIN molecule ON atom.molecule\\_id = molecule.molecule\\_id\nWHERE molecule.molecule\\_id = (\nSELECT `molecule_id`\nFROM bond\nWHERE bond.bond\\_id = 'TR001\\_10\\_11'\n)\nAND (\nconnected.atom\\_id = bond.atom\\_id1 OR connected.atom\\_id2 = bond.atom\\_id2\n);\t----- bird -----\ttoxicology",
    "434": " SELECT 100.0 * AVG(CASE WHEN a.element = 'cl' AND m.label = '+' THEN 1 ELSE 0 END) AS percentage\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id;\t----- bird -----\ttoxicology",
    "435": " SELECT m.label AS toxicology, a.element\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nWHERE m.label = '+' AND SUBSTR(a.atom\\_id, 7, 1) = '4';\t----- bird -----\ttoxicology",
    "436": " SELECT\nDIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(*)) AS hydrogen\\_ratio,\n(CASE WHEN label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END) AS label\nFROM atom\nJOIN molecule ON atom.molecule\\_id = molecule.molecule\\_id\nWHERE molecule.molecule\\_id = 'TR006';\t----- bird -----\ttoxicology",
    "437": " SELECT m.molecule\\_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nGROUP BY m.molecule\\_id\nHAVING COUNT(a.atom\\_id) > 5 AND m.label = '-';\t----- bird -----\ttoxicology",
    "438": " SELECT COUNT(*)\nFROM satscores\nJOIN schools ON satscores.cds = schools.cds\nWHERE AvgScrMath > 400 AND Virtual = 'F';\t----- bird -----\tcalifornia_schools",
    "439": " SELECT s.CDSCode\nFROM schools s\nJOIN (\nSELECT CDSCode, Enrollment (K-12) + Enrollment (Ages 5-17) as total\\_enrollment\nFROM schools\n) sq\nON s.CDSCode = sq.CDSCode\nWHERE sq.total\\_enrollment > 500;\t----- bird -----\tcalifornia_schools",
    "440": " SELECT MAX(frpm.`Percent (%) Eligible Free (Ages 5-17)`)\nFROM satscores\nJOIN frpm ON satscores.cds = frpm.CDSCode\nWHERE (satscores.NumGE1500 / satscores.NumTstTakr) > 0.3;\t----- bird -----\tcalifornia_schools",
    "441": " SELECT s.CDSCode, s.CharterNum, AVG(sat.AvgScrWrite) as AvgWritingScore\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE sat.AvgScrWrite > 499 AND s.Charter IS NOT NULL\nGROUP BY s.CDSCode\nORDER BY AvgWritingScore DESC;\t----- bird -----\tcalifornia_schools",
    "442": " SELECT s.School, s.Street, s.City, s.Zip\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)` > 30;\t----- bird -----\tcalifornia_schools",
    "443": " SELECT s.School\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nJOIN satscores st ON s.CDSCode = st.cds\nWHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND st.NumTstTakr >= 1500;\t----- bird -----\tcalifornia_schools",
    "444": " SELECT s.fundingtype\nFROM schools s\nJOIN satscores sat ON s.cds = sat.cds\nWHERE s.county = 'Riverside' AND AVG(sat.AvgScrMath) > 400\nGROUP BY s.cds;\t----- bird -----\tcalifornia_schools",
    "445": " SELECT s.School, s.Street, s.City, s.State, s.Zip\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Monterey' AND f.School Type = 'High School' AND f.FRPM Count (Ages 15-17) > 800;\t----- bird -----\tcalifornia_schools",
    "446": " SELECT s.sname, s.AvgScrWrite, schools.Phone\nFROM satscores s\nJOIN schools\nON s.cds = schools.CDSCode\nWHERE YEAR(schools.OpenDate) > 1991 OR YEAR(schools.ClosedDate) < 2000;\t----- bird -----\tcalifornia_schools",
    "447": " SELECT s.CDSCode, s.DOCType\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.FundingType = 'Locally Funded'\nGROUP BY s.CDSCode, s.DOCType\nHAVING ABS(AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`)) < AVG(ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`))\nORDER BY ABS(AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`)) DESC;\t----- bird -----\tcalifornia_schools",
    "448": " SELECT \ns1.CDSCode,\n(s1.`Free Meal Count (K-12)` / s1.`Enrollment (K-12)`) AS eligible\\_free\\_rate\nFROM \nschools s1\nJOIN (\nSELECT \nCDSCode\nFROM \nschools\nORDER BY \n`Enrollment (K-12)` DESC\nLIMIT 10\n) s2\nON s1.CDSCode = s2.CDSCode\nORDER BY \neligible\\_free\\_rate DESC\nLIMIT 2;\t----- bird -----\tcalifornia_schools",
    "449": " SELECT\n\t----- bird -----\tcalifornia_schools",
    "450": " SELECT s.Street, s.City, s.State, s.Zip\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nORDER BY (ss.NumGE1500 / ss.NumTstTakr) ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "451": " SELECT s.AdmFName1, s.AdmLName1, MAX(sat.NumGE1\t----- bird -----\tcalifornia_schools",
    "452": " SELECT AVG(NumTstTakr)\nFROM satscores\nJOIN schools\nON satscores.cds = schools.CDSCode\nWHERE YEAR(OpenDate) = 1980 AND schools.County = 'Fresno';\t----- bird -----\tcalifornia_schools",
    "453": " SELECT s.Phone\nFROM satscores s\nJOIN schools sch ON s.cds = sch.CDSCode\nWHERE sch.District = 'Fresno Unified'\nAND AvgScrRead = (\nSELECT MIN(AvgScrRead)\nFROM satscores\nWHERE cds IN (\nSELECT CDSCode\nFROM schools\nWHERE District = 'Fresno Unified'\n)\n)\n;\t----- bird -----\tcalifornia_schools",
    "454": " SELECT s.CDSCode, s.sname, AVG(sat.AvgScrRead) as AvgReadScore\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nJOIN frpm fr ON s.CDSCode = fr.CDSCode\nWHERE s.Virtual = 'F'\nGROUP BY s.County, s.CDSCode\nORDER BY s.County, AvgReadScore DESC\nLIMIT 5 * COUNT(DISTINCT s.County);\t----- bird -----\tcalifornia_schools",
    "455": " SELECT s.School, sats.AvgScrWrite\nFROM satscores sats\nJOIN schools s ON sats.cds = s.CDSCode\nJOIN (\nSELECT CDSCode, MAX(AdmFName1) AS FName, MAX(AdmLName1) AS LName\nFROM schools\nWHERE AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich'\nGROUP BY CDSCode\n) adm ON s.CDSCode = adm.CDSCode;\t----- bird -----\tcalifornia_schools",
    "456": " SELECT s.CDSCode, s.School, s.County, s.District, s.Enrollment (K-12)\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.DOC = 31 AND sat.enroll12 IS NOT NULL\nORDER BY s.Enrollment (K-12) DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "457": " SELECT AVG(num\\_of\\_schools)\nFROM (\nSELECT COUNT(s.CDSCode) as num\\_of\\_schools\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Alameda' AND s.DOC = 52 AND YEAR(s.OpenDate) = 1980\nGROUP BY EXTRACT(MONTH FROM s.OpenDate)\n) as subquery;\t----- bird -----\tcalifornia_schools",
    "458": " SELECT \n       COUNT(CASE WHEN s.DOC = 54 AND s.County = 'Orange' THEN 1 END) / \n       COUNT(CASE WHEN s.DOC = \t----- bird -----\tcalifornia_schools",
    "459": " SELECT s.School, s.Street\nFROM satscores s\nJOIN (\n    SELECT cds, AVG(AvgScrMath) as avg_math\n    FROM satscores\n    GROUP BY cds\n    ORDER BY avg_math DESC\n    LIMIT 1 OFFSET 6\n) t ON s.cds = t.cds;\t----- bird -----\tcalifornia_schools",
    "460": " SELECT COUNT(\\*)\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.Charter = 0 AND f.`Percent (%) Eligible Free (K-12)` < 0.18 AND s.County = 'Los Angeles';\t----- bird -----\tcalifornia_schools",
    "461": " SELECT SUM(Enrollment (Ages 5-17))\nFROM frpm\nWHERE CDSCode = (\n    SELECT CDSCode\n    FROM schools\n    WHERE County = 'Alameda' AND District = 'Fremont Union High' AND EdOpsCode = 'SSS'\n) AND `Academic Year` = '2014-2015';\t----- bird -----\tcalifornia_schools",
    "462": " SELECT s.CDSCode, s.School, s.County, (FRPM_Count / Enrollment) \\* 100 AS `Percent (%) Eligible FRPM (Ages 5-17)`\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.County = 'Los Angeles' AND s.GSserved = 'Kindergarten to 9th grade'\n```\n```\t----- bird -----\tcalifornia_schools",
    "463": " SELECT f.`County Name`, COUNT(\\*) as num\\_of\\_virtual\\_schools\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`County Name` IN ('San Diego', 'Santa Barbara') AND s.Virtual = 'T'\nGROUP BY f.`County Name`;\t----- bird -----\tcalifornia_schools",
    "464": " SELECT s.GSoffered\nFROM schools s\nJOIN (\n    SELECT CDSCode\n    FROM schools\n    ORDER BY Longitude DESC\n    LIMIT 1\n) max_longitude\nON s.CDSCode = max_longitude.CDSCode;\t----- bird -----\tcalifornia_schools",
    "465": " SELECT c.City, COUNT(s.CDSCode) as num\\_schools\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.`School Code`\nWHERE s.Magnet = 1 AND f.`Educational Option Type` = 'Multiple Provision Types' AND f.`Low Grade` = 'K' AND f.`High Grade` = '8'\nGROUP BY c.City;\t----- bird -----\tcalifornia_schools",
    "466": " SELECT \nfrpm.`Percent (%) Eligible Free (K-1\t----- bird -----\tcalifornia_schools",
    "467": " SELECT AdmEmail1 as valid\\_email\nFROM schools\nWHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (DOC = 54 OR SOC = 62) AND StatusType = 'Public';\t----- bird -----\tcalifornia_schools",
    "468": " SELECT COUNT(\\*)\nFROM account\nJOIN district ON account.district\\_id = district.district\\_id\nWHERE district.A3 = 'V\u00fdchodn\u00ed \u010cechy' AND account.frequency = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "469": " SELECT COUNT(DISTINCT d.district\\_id)\nFROM district d\nJOIN client c ON d.district\\_id = c.district\\_id\nWHERE c.gender = 'F' AND d.A11 BETWEEN 6000 AND 10000;\t----- bird -----\tfinancial",
    "470": " SELECT COUNT(*)\nFROM client c\nJOIN district d ON c.district\\_id = d.district\\_id\nWHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;\t----- bird -----\tfinancial",
    "471": " SELECT a.account\\_id\nFROM client c\nJOIN account a ON c.district\\_id = a.district\\_id\nWHERE c.gender = 'F'\nAND c.birth\\_date IN (\nSELECT MAX(birth\\_date)\nFROM client\n)\nAND a.account\\_id IN (\nSELECT account\\_id\nFROM (\nSELECT account\\_id, AVG(A11) as avg\\_salary\nFROM district d\nJOIN account a ON d.district\\_id = a.district\\_id\nJOIN client c ON c.district\\_id = a.district\\_id\nWHERE c.gender = 'F'\nGROUP BY account\\_id\nORDER BY avg\\_salary ASC\nLIMIT 1\n) tmp\n);\n\nSELECT MAX(A10) - MIN(A10) AS gap\nFROM district\nJOIN (\nSELECT account\\_id, AVG(A11) as avg\\_salary\nFROM district d\nJOIN account a ON d.district\\_id = a.district\\_id\nJOIN client c ON c.district\\_id = a.district\\_id\nWHERE c.gender = 'F'\nGROUP BY account\\_id\nHAVING AVG(A11) = (\nSELECT AVG(A11)\nFROM district d\nJOIN account a ON d.district\\_id = a.district\\_id\nJOIN client c ON c.district\\_id = a.district\\_id\nWHERE c.gender = 'F'\nGROUP BY account\\_id\nORDER BY AVG(A11) ASC\nLIMIT 1\n)\n) tmp ON district.district\\_id = tmp.account\\_id;\t----- bird -----\tfinancial",
    "472": " SELECT account_id\nFROM client\nJOIN district ON client.district\\_id = district.district\\_id\nWHERE birth\\_date = (\nSELECT MIN(birth\\_date)\nFROM client)\nAND A11 = (\nSELECT MAX(A11)\nFROM district);\t----- bird -----\tfinancial",
    "473": " SELECT account_id, MIN(loan.amount) as lowest_amount\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nWHERE YEAR(loan.date) = 1997 AND account.frequency = 'POPLATEK TYDNE'\nGROUP BY account_id;\t----- bird -----\tfinancial",
    "474": " SELECT account_id, SUM(amount) as approved\\_amount\nFROM loan\nWHERE duration > 12 AND YEAR(date) = 1993\nGROUP BY account_id\nORDER BY approved\\_amount DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "475": " SELECT COUNT(\\*)\nFROM account a\nJOIN client c ON a.district\\_id = c.district\\_id\nWHERE c.gender = 'F' AND c.birth\\_date < '1950-01-01' AND c.district\\_id = (SELECT district\\_id FROM district WHERE A2 = 'Sokolov');\t----- bird -----\tfinancial",
    "476": " SELECT a.district\\_id\nFROM client c\nJOIN account a ON c.district\\_id = a.district\\_id\nWHERE c.gender = 'F' AND c.birth\\_date = '1976-01-29';\t----- bird -----\tfinancial",
    "477": " SELECT ROUND(DIV(COUNT(c.client\\_id) FILTER(WHERE c.gender = 'M'), COUNT(c.client\\_id)) \\* 100, 2) AS percentage_of_male_clients\nFROM client c\nJOIN district d ON c.district\\_id = d.district\\_id\nWHERE d.A3 = 'south Bohemia'\nAND (\nSELECT SUM(inhabitants)\nFROM (\nSELECT CAST(SUBSTRING\\_INDEX(SUBSTRING\\_INDEX(d.A4, ' inhabitants', n.n), ' inhabitants', -1) AS SIGNED) AS inhabitants\nFROM district d\nCROSS JOIN (\nSELECT a.N + b.N * 10 + 1 n\nFROM (\nSELECT 0 AS N\nUNION ALL\nSELECT 1\nUNION ALL\nSELECT 2\nUNION ALL\nSELECT 3\nUNION ALL\nSELECT 4\nUNION ALL\nSELECT 5\nUNION ALL\nSELECT 6\nUNION ALL\nSELECT 7\nUNION ALL\nSELECT 8\nUNION ALL\nSELECT 9\n) a\nCROSS JOIN (\nSELECT 0 AS N\nUNION ALL\nSELECT 1\nUNION ALL\nSELECT 2\nUNION ALL\nSELECT 3\nUNION ALL\nSELECT 4\nUNION ALL\nSELECT 5\nUNION ALL\nSELECT 6\nUNION ALL\nSELECT 7\nUNION ALL\nSELECT 8\nUNION ALL\nSELECT 9\n) b\nORDER BY n\n) n\nWHERE n.n <= 1 + (LENGTH(d.A4) - LENGTH(REPLACE(d.A4, ' inhabitants', ''))) / LENGTH(' inhabitants')\n) n\n) AS biggest_inhabitants\nORDER BY biggest_inhabitants DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "478": " SELECT\nc1.client\\_id,\n((t2.balance - t1.balance) / t1.balance) \\* 100 AS increase\\_rate\nFROM\nclient c1\nJOIN\n(\nSELECT\naccount\\_id,\nbalance\nFROM\ntrans\nWHERE\ndate = (\nSELECT\nMAX(date)\nFROM\ntrans\nWHERE\ndate <= '1993-03-22'\n)\n) t1\nON c1.district\\_id = t1.account\\_id\nJOIN\n(\nSELECT\naccount\\_id,\nbalance\nFROM\ntrans\nWHERE\ndate = (\nSELECT\nMIN(date)\nFROM\ntrans\nWHERE\ndate >= '1998-12-27'\n)\n) t2\nON c1.district\\_id = t2.account\\_id\nJOIN\nloan l\nON c1.client\\_id = l.account\\_id\nWHERE\nl.date = '1993-07-05'\nAND l.status = 'approved'\nORDER BY\nincrease\\_rate DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "479": " SELECT \n100.0 * SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) / SUM(loan.amount) AS percentage_of_fully_paid_loans\nFROM loan\nJOIN account ON loan.account_id = account.account_id;\t----- bird -----\tfinancial",
    "480": " SELECT\nCONCAT(ROUND(SUM(CASE WHEN loan.amount < 100000 AND loan.status = 'C' THEN loan.amount ELSE 0 END) / SUM(loan.amount) * 100, 2), '%') AS Percentage\nFROM loan\nJOIN account ON loan.account_id = account.account_id;\t----- bird -----\tfinancial",
    "481": " SELECT d.A3 AS district,\n (d.A13 - d.A12) / d.A12 * 100 AS unemployment_increment_percentage\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.status = 'D';\t----- bird -----\tfinancial",
    "482": " SELECT A2 as District, COUNT(*) as NumberOfFemaleAccountHolders\nFROM account\nJOIN client ON account.district\\_id = client.district\\_id\nWHERE gender = 'F'\nGROUP BY district\\_id\nORDER BY NumberOfFemaleAccountHolders DESC\nLIMIT 9;\t----- bird -----\tfinancial",
    "483": " SELECT COUNT(\\*)\nFROM loan\nJOIN account ON loan.account\\_id = account.account\\_id\nWHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31'\nAND loan.amount >= 250000\nAND account.frequency = 'POPLATEK MESICNE';\t----- bird -----\tfinancial",
    "484": " SELECT COUNT(\\*)\nFROM account\nJOIN district ON account.district\\_id = district.district\\_id\nWHERE district.A8 = 1 AND account.frequency = 'C';\t----- bird -----\tfinancial",
    "485": " SELECT COUNT(*)\nFROM client\nWHERE district\\_id IN (\nSELECT district\\_id\nFROM district\nWHERE A15 = (\nSELECT MAX(A15)\nFROM district\nWHERE A15 < (\nSELECT MAX(A15)\nFROM district\n)\n)\n)\nAND gender = 'M';\t----- bird -----\tfinancial",
    "486": " SELECT DISTINCT district.A2 AS 'District Name', SUM(trans.amount) AS 'Total Withdrawal Amount'\nFROM district\nJOIN account ON district.district_id = account.district_id\nJOIN trans ON account.account_id = trans.account_id\nWHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%'\nGROUP BY district.district_id\nORDER BY SUM(trans.amount) DESC\nLIMIT 10;\t----- bird -----\tfinancial",
    "487": " SELECT COUNT(\\*)\nFROM account\nJOIN district ON account.district\\_id = district.district\\_id\nWHERE district.A8 = 1 AND account.frequency = 'C';\t----- bird -----\tfinancial",
    "488": " SELECT COUNT(*)\nFROM client\nWHERE district\\_id IN (\nSELECT district\\_id\nFROM district\nWHERE A15 = (\nSELECT MAX(A15)\nFROM district\nWHERE A15 < (\nSELECT MAX(A15)\nFROM district\n)\n)\n)\nAND gender = 'M';\t----- bird -----\tfinancial",
    "489": " SELECT account_id\nFROM trans\nWHERE type = 'VYBER KARTOU' AND YEAR(date) = 1998\nGROUP BY account_id\nHAVING AVG(amount) > (SELECT AVG(amount) FROM trans WHERE type = 'VYBER KARTOU' AND YEAR(date) = 1998);\t----- bird -----\tfinancial",
    "490": " SELECT DISTINCT account.type\nFROM account\nJOIN district ON account.district\\_id = district.district\\_id\nWHERE district.A11 < 8000 OR district.A11 > 9000\nAND account.type != 'OWNER';\t----- bird -----\tfinancial",
    "491": " SELECT AVG(district.A15) as avg_crime_1995\nFROM district\nJOIN account ON district.district_id = account.district_id\nWHERE district.A15 > 4000 AND YEAR(account.date) >= 1997;\t----- bird -----\tfinancial",
    "492": " SELECT t.amount\nFROM trans t\nJOIN disp d ON t.account\\_id = d.account\\_id\nJOIN client c ON d.client\\_id = c.client\\_id\nWHERE c.client\\_id = 3356 AND t.type = 'VYBER';\t----- bird -----\tfinancial",
    "493": " SELECT \n100.0 * SUM(c.gender = 'F') / COUNT(c.client\\_id) AS percentage\nFROM client c\nJOIN account a ON c.district\\_id = a.district\\_id\nJOIN district d ON c.district\\_id = d.district\\_id\nWHERE d.A11 > 10000;\t----- bird -----\tfinancial",
    "494": " SELECT \n(SUM(l.amount) - (SELECT SUM(l2.amount) FROM loan l2 WHERE YEAR(l2.date) = 1996)) / (SELECT SUM(l3.amount) FROM loan l3 WHERE YEAR(l3.date) = 1996) * 100 AS growth_rate\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN client c ON a.district_id = c.district_id\nWHERE YEAR(l.date) = 1997 AND c.gender = 'M';\t----- bird -----\tfinancial",
    "495": " SELECT frequency\nFROM account\nWHERE account\\_id = 3;\n\nSELECT SUM(amount)\nFROM trans\nWHERE account\\_id = 3 AND type = 'DEBIT' AND operation = 'k\\_symbol' AND k\\_symbol = 3539;\t----- bird -----\tfinancial",
    "496": " SELECT \n100.0 * COUNT(c.client\\_id) / COUNT(DISTINCT a.account\\_id) AS percentage_male_clients\nFROM \nclient c\nJOIN account a ON c.district\\_id = a.district\\_id\nWHERE \nc.gender = 'M' AND a.frequency = 'POPLATEK TYDNE';\t----- bird -----\tfinancial",
    "497": " SELECT account_id\nFROM account\nJOIN client ON account.district_id = client.district_id\nWHERE client.gender = 'F'\nAND (client.birth_date, client.gender, account.account\\_id) IN (\n SELECT birth\\_date, gender, account\\_id\n FROM client\n JOIN account ON client.district\\_id = account.district\\_id\n WHERE client.gender = 'F'\n GROUP BY birth\\_date, gender\n HAVING MIN(A11)\n)\nORDER BY A11;\t----- bird -----\tfinancial",
    "498": " SELECT AVG(loan.amount)\nFROM loan\nJOIN account ON loan.account\\_id = account.account\\_id\nWHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "499": " SELECT c.client\\_id, DATEDIFF(CURDATE(), c.birth\\_date)/365 as age\nFROM client c\nJOIN disp d ON c.client\\_id = d.client\\_id\nJOIN card ca ON d.disp\\_id = ca.disp\\_id\nWHERE ca.type = 'gold' AND d.type = 'OWNER';\t----- bird -----\tfinancial"
}