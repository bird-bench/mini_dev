{
    "0": " SELECT \n 1.0 * COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) \nFROM \n customers;\t----- bird -----\tdebit_card_specializing",
    "1": " SELECT CustomerID, MIN(Consumption)\nFROM yearmonth\nWHERE Date BETWEEN '201201' AND '201212' AND Segment = 'LAM'\nGROUP BY CustomerID;\t----- bird -----\tdebit_card_specializing",
    "2": " SELECT AVG(Consumption/12) as AverageMonthlyConsumption\nFROM yearmonth\nJOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE customers.Segment = 'SME' AND Date BETWEEN '201301' AND '201312';\t----- bird -----\tdebit_card_specializing",
    "3": " SELECT\n sum(case when currency = 'CZK' then consumption else 0 end) - sum(case when currency = 'EUR' then consumption else 0 end) as difference\nFROM (\n SELECT\n strftime('%Y', date) || strftime('%m', date) as Date,\n cast(sum(amount) as real) / 100 as consumption,\n currency\n FROM transactions_1k\n JOIN customers ON transactions_1k.CustomerID = customers.CustomerID\n JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID\n WHERE date BETWEEN '201201' AND '201212'\n AND currency IN ('CZK', 'EUR')\n GROUP BY Date, currency\n)\n```\t----- bird -----\tdebit_card_specializing",
    "4": " SELECT strftime('%Y', Date) AS Year, SUM(Consumption) AS TotalConsumption\nFROM (\n    SELECT \n        customers.CustomerID, \n        strftime('%Y-%m', transactions_1k.Date) AS Date, \n        (transactions_1k.Amount * products.Price) / 100 AS Consumption\n    FROM transactions_1k\n    JOIN customers ON transactions_1k.CustomerID = customers.CustomerID\n    JOIN products ON transactions_1k.ProductID = products.ProductID\n    WHERE customers.Currency = 'CZK'\n)\nGROUP BY Year\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "5": " SELECT strftime('%m', Date) AS Month, SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nJOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE customers.Segment = 'SME' AND strftime('%Y', Date) = '2013'\nGROUP BY Month\nORDER BY TotalConsumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "6": " SELECT\nsme_avg - lam_avg AS diff_sme_lam,\nlam_avg - kam_avg AS diff_lam_kam,\nkam_avg - sme_avg AS diff_kam_sme\nFROM (\nSELECT\n\t----- bird -----\tdebit_card_specializing",
    "7": " SELECT\n segment,\n ((y2013.consumption - y2012.consumption) / y2013.consumption) * 100 AS percentage_increase\nFROM (\n SELECT\n segment,\n SUM(consumption) AS consumption\n FROM (\n SELECT\n CASE\n WHEN strftime('%Y', date) = '2012' THEN 'SME'\n WHEN strftime('%Y', date) = '2012' AND segment = 'LAM' THEN 'LAM'\n WHEN strftime('%Y', date) = '2012' AND segment = 'KAM' THEN 'KAM'\n ELSE NULL\n END AS segment,\n SUM(amount * price / 100) AS consumption\n FROM\n transactions_1k\n JOIN\n customers ON transactions_1k.customerid = customers.customerid\n JOIN\n yearmonth ON transactions_1k.transactionid = yearmonth.transactionid\n WHERE\n currency = 'EUR'\n AND strftime('%Y', date) = '2012'\n GROUP BY\n segment, strftime('%Y', date)\n )\n UNION ALL\n SELECT\n segment,\n SUM(consumption) AS consumption\n FROM (\n SELECT\n CASE\n WHEN strftime('%Y', date) = '2013' THEN 'SME'\n WHEN strftime('%Y', date) = '2013' AND segment = 'LAM' THEN 'LAM'\n WHEN strftime('%Y', date) = '2013' AND segment = 'KAM' THEN 'KAM'\n ELSE NULL\n END AS segment,\n SUM(amount * price / 100) AS consumption\n FROM\n transactions_1k\n JOIN\n customers ON transactions_1k.customerid = customers.customerid\n JOIN\n yearmonth ON transactions_1k.transactionid = yearmonth.transactionid\n WHERE\n currency = 'EUR'\n AND strftime('%Y', date) = '2013'\n GROUP BY\n segment, strft\t----- bird -----\tdebit_card_specializing",
    "8": " SELECT SUM(Consumption)\nFROM yearmonth\nWHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311';\t----- bird -----\tdebit_card_specializing",
    "9": " SELECT\n    COUNT(*) - (\n        SELECT\n            COUNT(*)\n        FROM\n            gasstations gs\n        JOIN\n            transactions_1k t1k ON gs.GasStationID = t1k.GasStationID\n        WHERE\n            gs.Country = 'SVK' AND t1k.Price < (\n                SELECT\n                    AVG(t1k2.Price)\n                FROM\n                    transactions_1k t1k2\n                WHERE\n                    t1k2.GasStationID = gs.GasStationID\n            )\n    ) as more_discount_gas_stations\nFROM\n    gasstations gs\nJOIN\n    transactions_1k t1k ON gs.GasStationID = t1k.GasStationID\nWHERE\n    gs.Country = 'CZE' AND t1k.Price < (\n        SELECT\n            AVG(t1k2.Price)\n        FROM\n            transactions_1k t1k2\n        WHERE\n            t1k2.GasStationID = gs.GasStationID\n    );\t----- bird -----\tdebit_card_specializing",
    "10": " SELECT\n sum(CASE\n WHEN c.Currency = 'CZK' AND g.Segment = 'SME' THEN 1\n ELSE 0\n END) - sum(CASE\n WHEN c.Currency = 'EUR' AND g.Segment = 'SME' THEN 1\n ELSE 0\n END) AS more_SMEs_in_CZK\nFROM\n customers c\nJOIN\n transactions_1k t ON c.CustomerID = t.CustomerID\nJOIN\n gasstations g ON t.GasStationID = g.GasStationID;\t----- bird -----\tdebit_card_specializing",
    "11": " SELECT 100.0 * COUNT(*) / (\n                SELECT COUNT(*)\n                FROM customers c\n                JOIN transactions_1k t ON c.CustomerID = t.CustomerID\n               WHERE c.Segment = 'LAM'\n           )\n    FROM customers c\n    JOIN transactions_1k t ON c.CustomerID = t.CustomerID\n   WHERE c.Segment = 'LAM'\n     AND t.Amount > 46.73;\t----- bird -----\tdebit_card_specializing",
    "12": " SELECT 100.0 * COUNT(*) / (SELECT COUNT(DISTINCT CustomerID) FROM customers)\nFROM yearmonth\nWHERE Date LIKE '201202' AND Consumption > 528.3;\t----- bird -----\tdebit_card_specializing",
    "13": " SELECT CustomerID, MAX(Consumption) as HighestConsumption\nFROM yearmonth\nWHERE Date LIKE '2012-%'\nGROUP BY CustomerID;\t----- bird -----\tdebit_card_specializing",
    "14": " SELECT products.Description\nFROM transactions_1k\nJOIN products ON transactions_1k.ProductID = products.ProductID\nJOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID\nWHERE substr(yearmonth.Date, 5, 2) = '09' AND substr(yearmonth.Date, 1, 4) = '2013';\t----- bird -----\tdebit_card_specializing",
    "15": " SELECT DISTINCT Country\nFROM gasstations\nJOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID\nWHERE substr(transactions_1k.Date, 4, 2) = '06' AND substr(transactions_1k.Date, 1, 4) = '2013';\t----- bird -----\tdebit_card_specializing",
    "16": " SELECT COUNT(DISTINCT c.CustomerID)\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE c.Currency = 'EUR' AND t.Amount/t.Price > 1000\nGROUP BY strftime('%Y-%m', t.Date);\t----- bird -----\tdebit_card_specializing",
    "17": " SELECT products.Description\nFROM transactions\\_1k\nJOIN gasstations ON transactions\\_1k.GasStationID = gasstations.GasStationID\nJOIN products ON transactions\\_1k.ProductID = products.ProductID\nWHERE gasstations.Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "18": " SELECT Time\nFROM transactions_1k\nWHERE GasStationID IN (\n    SELECT GasStationID\n    FROM gasstations\n    WHERE ChainID = 11\n)\nORDER BY TransactionID;\t----- bird -----\tdebit_card_specializing",
    "19": " SELECT COUNT(*)\nFROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';\t----- bird -----\tdebit_card_specializing",
    "20": " SELECT Currency\nFROM customers\nJOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nWHERE transactions_1k.Time = '16:25:00' AND transactions_1k.Date = '2012-08-24';\t----- bird -----\tdebit_card_specializing",
    "21": " SELECT Segment\nFROM customers\nJOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nWHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00';\t----- bird -----\tdebit_card_specializing",
    "22": " SELECT COUNT(*)\nFROM transactions\\_1k\nWHERE Time BETWEEN '08:00:00' AND '09:00:00' AND Date = '2012-08-26' AND GasStationID IN (\nSELECT GasStationID\nFROM gasstations\nWHERE Country = 'CZE'\n);\t----- bird -----\tdebit_card_specializing",
    "23": " SELECT c.Currency\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Price = 548.4;\t----- bird -----\tdebit_card_specializing",
    "24": " SELECT 100.0 * COUNT(c.CustomerID) / (SELECT COUNT(CustomerID) FROM customers) as percentage\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE c.Currency = 'EUR' AND t.Date = '2012-08-25';\t----- bird -----\tdebit_card_specializing",
    "25": " SELECT \n(y2013.Consumption - y2012.Consumption) / y2012.Consumption AS ConsumptionDecreaseRate\nFROM \n(SELECT Year(Date) AS Year, CustomerID, AVG(Consumption) AS Consumption\nFROM yearmonth\nWHERE Year(Date) = 2013 AND CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Price = 634.8 AND Date = '2012-08-25')\nGROUP BY CustomerID, Year) y2013\nJOIN \n(SELECT Year(Date) AS Year, CustomerID, AVG(Consumption) AS Consumption\nFROM yearmonth\nWHERE Year(Date) = 2012 AND CustomerID IN (SELECT CustomerID FROM transactions_1k WHERE Price = 634.8 AND Date = '2012-08-25')\nGROUP BY CustomerID, Year) y2012\nON y2013.CustomerID = y2012.CustomerID;\t----- bird -----\tdebit_card_specializing",
    "26": " SELECT\n\t----- bird -----\tdebit_card_specializing",
    "27": " SELECT SUM(Amount) as TotalAmountSpent\nFROM transactions_1k\nWHERE CustomerID = 38508 AND GasStationID IS NOT NULL;\n\nSELECT SUM(Amount) as Jan2012Spent\nFROM transactions_1k\nWHERE CustomerID = 38508 AND Date = '201201';\t----- bird -----\tdebit_card_specializing",
    "28": " SELECT c.CustomerID, AVG(t.\"Price\" / t.\"Amount\") AS avg\\_price, c.\"Currency\"\nFROM customers c\nJOIN \"transactions_1k\" t ON c.CustomerID = t.CustomerID\nGROUP BY c.CustomerID\nORDER BY AVG(t.\"Price\" / t.\"Amount\") DESC\nLIMIT 1;\n\nThis query will return the CustomerID, average price per single item purchased, and currency of the top spending customer. It calculates the average price per single item purchased by dividing the total price by the total amount for each customer, then orders the results in descending order by this value and returns the top result.\t----- bird -----\tdebit_card_specializing",
    "29": " SELECT ym.CustomerID, SUM(ym.Consumption) as August_2012_Consumption\nFROM yearmonth ym\nJOIN transactions_1k t1k ON ym.CustomerID = t1k.CustomerID\nWHERE t1k.ProductID = 5 AND t1k.Price / t1k.Amount > 29.00\nAND ym.Date = '201208'\nGROUP BY ym.CustomerID;\t----- bird -----\tdebit_card_specializing",
    "30": " SELECT major_name\nFROM major\nJOIN member ON major.major_id = link_to_major\nWHERE first_name || ' ' || last_name = 'Angela Sanders';\t----- bird -----\tstudent_club",
    "31": " SELECT COUNT(DISTINCT m.member_id)\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women\\'s Soccer' AND m.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "32": " SELECT COUNT(event_id) AS meeting_events_count\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE event.type = 'Meeting'\nGROUP BY event.event_id\nHAVING meeting_events_count > 10;\t----- bird -----\tstudent_club",
    "33": " SELECT DISTINCT event_name\nFROM event\nJOIN attendance ON event.event_id = attendance.link_to_event\nWHERE COUNT(attendance.link_to_member) > 20 AND type != 'fundraiser';\n```\n```\t----- bird -----\tstudent_club",
    "34": " SELECT SUM(amount) as total_funds_received\nFROM income\nJOIN member ON income.link_to_member = member.member_id\nWHERE position = 'Vice President';\t----- bird -----\tstudent_club",
    "35": " SELECT first\\_name, last\\_name\nFROM member\nWHERE zip IN (\nSELECT zip\\_code\nFROM zip\\_code\nWHERE state = 'Illinois'\n)\t----- bird -----\tstudent_club",
    "36": " SELECT e.expense_id, e.expense_description, e.expense_date, e.cost, e.approved\nFROM expense e\nJOIN attendance a ON e.link_to_member = a.link_to_member\nJOIN event ev ON a.link_to_event = ev.event_id\nWHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08' AND e.approved = 'True';\t----- bird -----\tstudent_club",
    "37": " SELECT AVG(cost)\nFROM expense\nJOIN member ON link_to_member = member_id\nJOIN budget ON link_to_budget = budget_id\nJOIN event ON budget.link_to_event = event.event_id\nWHERE first\\_name = 'Elijah' AND last\\_name = 'Allen' AND (month(expense\\_date) = 9 OR month(expense\\_date) = 10);\t----- bird -----\tstudent_club",
    "38": " SELECT\nSUM(\nCASE\nWHEN strftime('%Y', event_date) = '2019'\nTHEN spent\nELSE 0\nEND) -\nSUM(\nCASE\nWHEN strftime('%Y', event_date) = '2020'\nTHEN spent\nELSE 0\nEND) AS difference\nFROM budget\nJOIN event ON event.event_id = budget.link_to_event\nWHERE event.event_name = 'Student_Club';\t----- bird -----\tstudent_club",
    "39": " SELECT notes\nFROM income\nWHERE source = 'Fundraising' AND date_received = '2019-09-14';\t----- bird -----\tstudent_club",
    "40": " SELECT member.phone\nFROM member\nWHERE member.first\\_name = 'Carlo' AND member.last\\_name = 'Jacobs';\t----- bird -----\tstudent_club",
    "41": " SELECT event_status\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nJOIN expense ON budget.budget_id = expense.link_to_budget\nWHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-8-20';\t----- bird -----\tstudent_club",
    "42": " SELECT major_name\nFROM major\nJOIN member ON major.major_id = member.link_to_major\nWHERE member.first_name || ' ' || member.last_name = 'Brent Thomason';\t----- bird -----\tstudent_club",
    "43": " SELECT COUNT(*)\nFROM member\nWHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "44": " SELECT DISTINCT department\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE position = 'President';\t----- bird -----\tstudent_club",
    "45": " SELECT date\\_received\nFROM member\nJOIN income ON member.member\\_id = income.link\\_to\\_member\nWHERE first\\_name = 'Connor' AND last\\_name = 'Hilton' AND source = 'Dues';\t----- bird -----\tstudent_club",
    "46": " SELECT\nCOUNT(*)\nFROM budget b1\nWHERE b1.category = 'Advertisement' AND b1.event_status = 'Yearly Kickoff' AND b1.spent >\n(\nSELECT\nSUM(b2.amount) / (\nSELECT\nSUM(b3.amount)\nFROM budget b3\nWHERE b3.category = 'Advertisement' AND b3.event_status = 'October Meeting'\n)\nFROM budget b2\nWHERE b2.category = 'Advertisement' AND b2.event_status = 'October Meeting'\n);\n```\n\n```\t----- bird -----\tstudent_club",
    "47": " SELECT SUM(e1.cost) as total\\_cost\nFROM expense e1\nJOIN budget b1 ON e1.link\\_to\\_budget = b1.budget\\_id\nWHERE e1.expense\\_description = 'Pizza' AND b1.event\\_status = 'Approved';\t----- bird -----\tstudent_club",
    "48": " SELECT COUNT(DISTINCT city)\nFROM zip_code\nWHERE county = 'Orange County' AND state = 'Virginia';\t----- bird -----\tstudent_club",
    "49": " SELECT major_name\nFROM major\nJOIN member ON major.major_id = member.link_to_major\nWHERE phone = '809-555-3360';\t----- bird -----\tstudent_club",
    "50": " SELECT COUNT(*)\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women\\'s Soccer';\t----- bird -----\tstudent_club",
    "51": " SELECT first\\_name || ' ' || last\\_name AS full\\_name\nFROM member\nWHERE link\\_to\\_major IN (\nSELECT major\\_id\nFROM major\nWHERE department = 'School of Applied Sciences, Technology and Education'\n)\t----- bird -----\tstudent_club",
    "52": " SELECT e.event\\_name, MAX(b.spent/b.amount) as spend\\_to\\_budget\\_ratio\nFROM event as e\nJOIN budget as b ON e.event\\_id = b.link\\_to\\_event\nWHERE e.status = 'Closed'\nGROUP BY e.event\\_name;\t----- bird -----\tstudent_club",
    "53": " SELECT MAX(b.spent) as highest\\_budget\\_spend\nFROM budget b\nJOIN event e ON b.link\\_to\\_event = e.event\\_id;\t----- bird -----\tstudent_club",
    "54": " SELECT SUM(spent) as total_amount_for_food\nFROM budget\nWHERE category = 'Food';\t----- bird -----\tstudent_club",
    "55": " SELECT first\\_name || ' ' || last\\_name AS name\nFROM member\nJOIN attendance\nON member.member\\_id = attendance.link\\_to\\_member\nGROUP BY name\nHAVING COUNT(link\\_to\\_event) > 7;\t----- bird -----\tstudent_club",
    "56": " SELECT m.first\\_name, m.last\\_name\nFROM member m\nJOIN budget b ON m.member\\_id = b.link\\_to\\_member\nJOIN event e ON b.link\\_to\\_event = e.event\\_id\nWHERE e.event\\_name = 'Yearly Kickoff' AND b.event\\_status = 'manager';\t----- bird -----\tstudent_club",
    "57": " SELECT event_name, MIN(e.cost) AS lowest_cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nGROUP BY e.link_to_event;\n\nThis query calculates the minimum cost for each event by joining the expense and budget tables, then grouping by the event ID and selecting the minimum cost within each group.\t----- bird -----\tstudent_club",
    "58": " SELECT\nDIVIDE(SUM(case when event_name = 'Yearly Kickoff' then spent else 0 end), SUM(spent)) * 100 as percentage\nFROM budget;\n```\n```\t----- bird -----\tstudent_club",
    "59": " SELECT source, MAX(amount) as max\\_amount\nFROM income\nWHERE date\\_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source;\t----- bird -----\tstudent_club",
    "60": " SELECT COUNT(*)\nFROM member\nWHERE link_to_major = (\n    SELECT major_id\n    FROM major\n    WHERE major_name = 'Physics Teaching'\n);\t----- bird -----\tstudent_club",
    "61": " SELECT event_name \nFROM event \nJOIN budget ON event.event_id = budget.link_to_event\nWHERE category = 'Advertisement' \nGROUP BY link_to_event \nORDER BY MAX(spent) DESC \nLIMIT 1;\t----- bird -----\tstudent_club",
    "62": " SELECT COUNT(*) \nFROM attendance \nJOIN member ON attendance.link_to_member = member.member_id \nJOIN event ON attendance.link_to_event = event.event_id \nWHERE member.first_name = 'Maya' AND member.last_name = 'Mclean' AND event.event_name = 'Women\\'s Soccer';\t----- bird -----\tstudent_club",
    "63": " SELECT cost\nFROM expense\nWHERE expense_description = 'Posters' AND link_to_event = (\nSELECT event_id\nFROM event\nWHERE event_name = 'September Speaker'\n);\t----- bird -----\tstudent_club",
    "64": " SELECT e.event\\_name\nFROM event e\nJOIN budget b ON e.event\\_id = b.link\\_to\\_event\nJOIN attendance a ON e.event\\_id = a.link\\_to\\_event\nWHERE e.status = 'Closed' AND b.remaining < 0\nORDER BY b.remaining ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
    "65": " SELECT expense.expense_description, SUM(expense.cost) as total_value\nFROM expense\nJOIN budget ON expense.link_to_budget = budget.budget_id\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event.event_name = 'October Meeting' AND expense.approved = 'approved'\nGROUP BY expense.expense_description;\t----- bird -----\tstudent_club",
    "66": " SELECT category, SUM(amount) as amount\\_budgeted\nFROM budget\nJOIN event ON budget.link\\_to\\_event = event.event\\_id\nWHERE event.event\\_name = 'April Speaker'\nGROUP BY category\nORDER BY amount\\_budgeted ASC;\t----- bird -----\tstudent_club",
    "67": " SELECT SUM(cost) as total_expense\nFROM expense\nWHERE expense_date = '2019-08-20';\t----- bird -----\tstudent_club",
    "68": " SELECT member.first\\_name || ' ' || member.last\\_name AS full\\_name, SUM(expense.cost) AS total\\_cost\nFROM member\nJOIN expense ON member.member\\_id = expense.link\\_to\\_member\nWHERE member.member\\_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY full\\_name;\t----- bird -----\tstudent_club",
    "69": " SELECT expense_description AS kind_of_expenses\nFROM expense\nJOIN member ON link_to_member = member_id\nWHERE first_name || ' ' || last_name = 'Sacha Harrison';\t----- bird -----\tstudent_club",
    "70": " SELECT DISTINCT type\nFROM event\nWHERE location = 'MU 215';\t----- bird -----\tstudent_club",
    "71": " SELECT last\\_name, major\\_name, department, college\nFROM member\nJOIN major ON member.link\\_to\\_major = major.major\\_id\nWHERE major\\_name = 'Environmental Engineering';\t----- bird -----\tstudent_club",
    "72": " SELECT budget.category\nFROM budget\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event.location = 'MU 215' AND event.type = 'Guest Speaker' AND budget.spent = 0;\t----- bird -----\tstudent_club",
    "73": " SELECT ROUND(DIVIDE(COUNT(CASE WHEN income.amount = 50 AND member.position = 'Member' THEN 1 END), COUNT(member.member_id)) * 100, 2) AS percentage\nFROM member\nJOIN income ON member.member_id = income.link_to_member\nWHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';\n\nThis SQL query calculates the percentage of the amount 50 received by the members with t-shirt size of medium in the Student_Club. It first joins the member and income tables based on the link_to_member foreign key. Then, it filters the records where the t-shirt size is medium and the position is Member. Finally, it calculates the percentage by dividing the count of records with amount 50 by the total count of member records and multiplying by 100. The ROUND function is used to round the percentage to 2 decimal places.\t----- bird -----\tstudent_club",
    "74": " SELECT event_name\nFROM event\nWHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club",
    "75": " SELECT first\\_name, last\\_name, phone\nFROM member\nJOIN (\nSELECT link\\_to\\_member\nFROM expense\nJOIN (\nSELECT AVG(cost) as avg\\_cost\nFROM expense\n)\nON cost > avg\\_cost\n)\nON link\\_to\\_member = member\\_id;\t----- bird -----\tstudent_club",
    "76": " SELECT member.first\\_name || ' ' || member.last\\_name AS full\\_name, expense.cost\nFROM member\nJOIN expense\nON member.member\\_id = expense.link\\_to\\_member\nWHERE expense.expense\\_description = 'Water, Veggie tray, supplies'\n;\t----- bird -----\tstudent_club",
    "77": " SELECT\n\t\t----- bird -----\tstudent_club",
    "78": " SELECT\n(COUNT(p.ID) FILTER (WHERE p.SEX = 'M' AND p.Admission = '+')) / (COUNT(p.ID) FILTER (WHERE p.SEX = 'M' AND p.Admission IN ('+', '-'))) * 100.0 AS inpatient_male_percentage,\n(COUNT(p.ID) FILTER (WHERE p.SEX = 'M' AND p.Admission = '-')) / (COUNT(p.ID) FILTER (WHERE p.SEX = 'M' AND p.Admission IN ('+', '-'))) * 100.0 AS outpatient_male_percentage\nFROM Patient p;\t----- bird -----\tthrombosis_prediction",
    "79": " SELECT 100.0 * COUNT(Patient.ID) / (\nSELECT COUNT(Patient.ID)\nFROM Patient\nWHERE Patient.SEX = 'F'\n) as percentage\nFROM Patient\nWHERE Patient.SEX = 'F' AND strftime('%Y', Patient.Birthday) > '1930';\t----- bird -----\tthrombosis_prediction",
    "80": " SELECT \nCAST(SUM(CASE WHEN Admission = '-' AND Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) /\nCAST(SUM(CASE WHEN Admission = '+' AND Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) \nAS Ratio\nFROM Patient;\t----- bird -----\tthrombosis_prediction",
    "81": " SELECT Diagnosis, Date\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.ID = 30609\nUNION\nSELECT NULL as Diagnosis, Date\nFROM Laboratory\nWHERE ID = 30609;\t----- bird -----\tthrombosis_prediction",
    "82": " SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.LDH > 500;\t----- bird -----\tthrombosis_prediction",
    "83": " SELECT ID, STRFTIME('%Y', 'now') - STRFTIME('%Y', Birthday) AS age\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE RVVT = '+'\n```\n```\t----- bird -----\tthrombosis_prediction",
    "84": " SELECT Patient.ID, Patient.SEX, Examination.Diagnosis\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Thrombosis = 2;\t----- bird -----\tthrombosis_prediction",
    "85": " SELECT COUNT(Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.SEX = 'F' AND YEAR(Patient.Description) = 1997 AND Patient.Admission = '-'\t----- bird -----\tthrombosis_prediction",
    "86": " SELECT COUNT(Patient.ID)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.Thrombosis = 1 AND Examination.[`Examination Date`] = '1997-01-01' AND Patient.SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "87": " SELECT Symptoms, Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.Birthday = (SELECT MIN(Birthday) FROM Patient)\nAND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "88": " SELECT max(Date) as MaxDate\nFROM Laboratory\nWHERE ID IN (\n    SELECT ID\n    FROM Patient\n    WHERE Diagnosis = 'SJS'\n        AND Birthday = (\n            SELECT MIN(Birthday)\n            FROM Patient\n            WHERE Diagnosis = 'SJS'\n        )\n)\n```sql\n\nSELECT (STRFTIME('%Y', 'now') - STRFTIME('%Y', (\n    SELECT Birthday\n    FROM Patient\n    WHERE Diagnosis = 'SJS'\n        AND Birthday = (\n            SELECT MIN(Birthday)\n            FROM Patient\n            WHERE Diagnosis = 'SJS'\n        )\n))) as Age\nFROM Patient\nWHERE Diagnosis = 'SJS'\n    AND Birthday = (\n        SELECT MIN(Birthday)\n        FROM Patient\n        WHERE Diagnosis = 'SJS'\n    )\n```\n```\t----- bird -----\tthrombosis_prediction",
    "89": " SELECT\nCAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END), 0) AS NUMERIC) AS Ratio\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE UA <= 8.0 AND SEX = 'M' OR UA <= 6.5 AND SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "90": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE strftime('%Y', p.Birthday) < 1975 AND strftime('%Y', e.`Examination Date`) BETWEEN '1990' AND '1993';\t----- bird -----\tthrombosis_prediction",
    "91": " SELECT\nSUBSTR(STRFTIME('%Y', `Examination Date`), 3) - STRFTIME('%Y', Birthday) AS Age,\nDiagnosis\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nJOIN (\nSELECT ID, MAX(HGB) AS MaxHGB\nFROM Laboratory\nWHERE HGB IS NOT NULL\nGROUP BY ID\n) AS MaxHGBTable\nON Patient.ID = MaxHGBTable.ID\nWHERE MaxHGB = HGB;\t----- bird -----\tthrombosis_prediction",
    "92": " SELECT Examination.`aCL IgM`\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.Diagnosis = 'SLE' AND Examination.`Examination Date` = '1993-11-12';\t----- bird -----\tthrombosis_prediction",
    "93": " SELECT \nSUM(\nCASE \nWHEN Birthday = '1959-02-18' AND Date BETWEEN '1981-11-01' AND '1981-11-30' \nTHEN `T-CHO` \nEND\n) -\nSUM(\nCASE \nWHEN Birthday = '1959-02-18' AND Date BETWEEN '1981-12-01' AND '1981-12-31' \nTHEN `T-CHO` \nEND\n) AS Decrease_Rate\nFROM Laboratory;\t----- bird -----\tthrombosis_prediction",
    "94": " SELECT ID\nFROM Laboratory\nWHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4;\t----- bird -----\tthrombosis_prediction",
    "95": " SELECT COUNT(*)\nFROM Examination\nWHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` = (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2;\t----- bird -----\tthrombosis_prediction",
    "96": " SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.`First Date`, Patient.Admission, Patient.Diagnosis\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;\t----- bird -----\tthrombosis_prediction",
    "97": " SELECT AVG(ALB)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "98": " SELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'F' AND Diagnosis = 'APS';\t----- bird -----\tthrombosis_prediction",
    "99": " SELECT ROUND(DIVIDE(SUM(CASE WHEN Patient.Birthday LIKE '1980-%' AND Patient.Diagnosis = 'RA' AND Patient.SEX = 'F' THEN 1 ELSE 0 END),\nCOUNT(CASE WHEN Patient.Birthday LIKE '1980-%' AND Patient.Diagnosis = 'RA' THEN 1 ELSE NULL END)) * 100, 2) AS Percentage\nFROM Patient\nINNER JOIN Examination ON Patient.ID = Examination.ID\nWHERE Patient.Birthday LIKE '1980-%' AND Patient.Diagnosis = 'RA';\t----- bird -----\tthrombosis_prediction",
    "100": " SELECT \nCASE \nWHEN (S.Sex = 'M' AND S.UA > 8.0) OR (S.Sex = 'F' AND S.UA > 6.5) THEN 'Within Normal Range' \nELSE 'Not Within Normal Range' \nEND as UA_Result\nFROM Patient P\nJOIN (\nSELECT P.ID, P.SEX, L.UA\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.ID = 57266\n) S\nON P.ID = S.ID;\t----- bird -----\tthrombosis_prediction",
    "101": " SELECT ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.GPT >= 60\nGROUP BY ID\nHAVING COUNT(*) > 1;\t----- bird -----\tthrombosis_prediction",
    "102": " SELECT Patient.ID, Patient.Birthday, Examination.Diagnosis\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.GPT > 60\nORDER BY Patient.Birthday ASC;\t----- bird -----\tthrombosis_prediction",
    "103": " SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN = 29;\t----- bird -----\tthrombosis_prediction",
    "104": " SELECT SEX, GROUP\\_CONCAT(DISTINCT ID) as PatientIDs\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE T\\_BIL >= 2.0\nGROUP BY SEX;\t----- bird -----\tthrombosis_prediction",
    "105": " SELECT AVG(DIVIDE(STRFTIME('%Y', 'now') - STRFTIME('%Y', Birthday), 1)) AS average_age\nFROM Patient\nWHERE Sex = 'M' AND (SELECT `T-CHO` FROM Laboratory WHERE Patient.ID = Laboratory.ID AND Date = (SELECT MAX(Date) FROM Laboratory WHERE Patient.ID = Laboratory.ID)) >= 250;\t----- bird -----\tthrombosis_prediction",
    "106": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG >= 200 AND SUBTRACT(strftime('%Y', current_timestamp), strftime('%Y', p.Birthday)) > 50;\t----- bird -----\tthrombosis_prediction",
    "107": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31'\nAND p.SEX = 'M'\nAND l.CPK >= 250;\t----- bird -----\tthrombosis_prediction",
    "108": " SELECT Patient.ID, Patient.SEX,\nSTRFTIME('%Y', current_timestamp) - STRFTIME('%Y', Patient.Birthday) AS age\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.GLU >= 180 AND Laboratory.`T-CHO` < 250;\t----- bird -----\tthrombosis_prediction",
    "109": " SELECT p.ID, (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age, e.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.RBC < 3.5;\t----- bird -----\tthrombosis_prediction",
    "110": " SELECT ID, SEX\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE Diagnosis = 'SLE' AND HGB >= 10 AND HGB < 17\nORDER BY p.Birthday DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "111": " SELECT p.ID, strftime('%Y', 'now') - strftime('%Y', p.Birthday) AS age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.HCT >= 52\nGROUP BY p.ID\nHAVING COUNT(l.ID) >= 2;\t----- bird -----\tthrombosis_prediction",
    "112": " SELECT\nCOUNT(*) AS num\\_of\\_patients\nFROM (\nSELECT\nPatient.ID\nFROM\nPatient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE (Laboratory.PLT < 100 OR Laboratory.PLT > 400)\nGROUP BY\nPatient.ID\nHAVING\nCOUNT(*) > 1\n)\nAS abnormal\\_platelet\\_patients;\n\nSELECT\nSUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower\\_than\\_normal\\_range,\nSUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher\\_than\\_normal\\_range\nFROM\nLaboratory\nWHERE\nID IN (\nSELECT\nID\nFROM\n(\nSELECT\nPatient.ID\nFROM\nPatient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE (Laboratory.PLT < 100 OR Laboratory.PLT > 400)\nGROUP BY\nPatient.ID\nHAVING\nCOUNT(*) > 1\n)\nAS abnormal\\_platelet\\_patients\n);\t----- bird -----\tthrombosis_prediction",
    "113": " SELECT p.ID, p.SEX, p.Birthday, p.[First Date], p.Admission, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE YEAR(l.Date) = 1984 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', p.Birthday)) < 50 AND l.PLT BETWEEN 100 AND 400;\t----- bird -----\tthrombosis_prediction",
    "114": " SELECT \nROUND(DIVIDE(SUM(CASE WHEN Sex = 'F' AND PT >= 14 THEN 1 ELSE 0 END), SUM(PT >= 14)) * 100, 2) AS Percentage \nFROM Patient \nJOIN (\nSELECT ID, MAX(Date) AS MaxDate \nFROM Laboratory \nWHERE PT IS NOT NULL \nGROUP BY ID\n) ON Patient.ID = Laboratory.ID \nJOIN Laboratory ON Patient.ID = Laboratory.ID AND MaxDate = Laboratory.Date \nWHERE SUBTRACT(STRFTIME('%Y', CURRENT_TIMESTAMP), STRFTIME('%Y', Birthday)) > 55;\t----- bird -----\tthrombosis_prediction",
    "115": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.WBC > 3.5 AND l.WBC < 9.0 AND (l.FG <= 150 OR l.FG >= 450);\t----- bird -----\tthrombosis_prediction",
    "116": " SELECT DISTINCT ID\nFROM Laboratory\nWHERE IGG >= 2000;\t----- bird -----\tthrombosis_prediction",
    "117": " SELECT COUNT(*)\nFROM Examination\nWHERE `aCL IgG` > 900 AND `aCL IgG` < 2000 AND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "118": " SELECT COUNT(Patient.ID)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE IGA > 80 AND IGA < 500 AND YEAR(Patient.`First Date`) >= 1990;\t----- bird -----\tthrombosis_prediction",
    "119": " SELECT Diagnosis, COUNT(*) as count\nFROM Examination\nWHERE `aCL IgM` <= 40 OR `aCL IgM` >= 400\nGROUP BY Diagnosis\nORDER BY count DESC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "120": " SELECT COUNT(Patient.ID)\nFROM Patient\nLEFT JOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.CRP = '+' AND Patient.Description IS NULL;\t----- bird -----\tthrombosis_prediction",
    "121": " SELECT COUNT(Patient.ID)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE CRE >= 1.5 AND SUBTRACT(STRFTIME('%Y', CURDATE()), STRFTIME('%Y', Patient.Birthday)) < 70;\t----- bird -----\tthrombosis_prediction",
    "122": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.`ANA Pattern` IN ('-', '+-') AND p.Admission = '+';\t----- bird -----\tthrombosis_prediction",
    "123": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.SM IN ('-', '+-') AND e.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "124": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.`ANA Pattern` IN ('negative', '0') AND p.SEX = 'F' AND p.ID NOT IN (\n    SELECT ID\n    FROM Patient\n    WHERE Symptoms IS NOT NULL\n)\t----- bird -----\tthrombosis_prediction",
    "125": " SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.CENTROMEA IN ('-', '+-')\nAND e.SSB IN ('-', '+-')\nAND p.SEX = 'M';\t----- bird -----\tthrombosis_prediction",
    "126": " SELECT MIN(Birthday)\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Laboratory\n    WHERE GOT >= 60\n)\t----- bird -----\tthrombosis_prediction",
    "127": " SELECT COUNT(*)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.CPK < 250\nAND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');\t----- bird -----\tthrombosis_prediction",
    "128": " SELECT League.name\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE Match.season = '2015/2016'\nGROUP BY League.name\nORDER BY SUM(Match.home_team_goal + Match.away_team_goal) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "129": " SELECT Team.team_long_name\nFROM `Match`\nJOIN Team ON Match.away_team_api_id = Team.team_api_id\nWHERE League.name = 'Scotland Premier League' AND Match.season = '2009/2010'\nGROUP BY Team.team_long_name\nORDER BY MAX(SUBTRACT(Match.away_team_goal, Match.home_team_goal) > 0) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "130": " SELECT Team.team\\_short\\_name, Team\\_Attributes.buildUpPlaySpeed\nFROM Team\nJOIN Team\\_Attributes ON Team.team\\_api\\_id = Team\\_Attributes.team\\_api\\_id\nORDER BY Team\\_Attributes.buildUpPlaySpeed DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "131": " SELECT League.name\nFROM `Match`\nJOIN League ON Match.league_id = League.id\nWHERE Match.season = '2015/2016' AND Match.home_team_goal = Match.away_team_goal\nGROUP BY League.name\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "132": " SELECT\n\tplayer_name,\n\t(DATETIME('now') - datetime(birthday, 'unixepoch')) / 365.25 AS age,\n\tsprint_speed\nFROM\n\tPlayer_Attributes\nJOIN\n\tPlayer\nON\n\tPlayer_Attributes.player_api_id = Player.player_api_id\nWHERE\n\tsprint_speed >= 97 AND\n\tPlayer_Attributes.date BETWEEN '2013-01-01' AND '2015-12-31';\t----- bird -----\teuropean_football_2",
    "133": " SELECT League.name, COUNT(Match.league_id) as match_count\nFROM League\nJOIN Match ON League.id = Match.league_id\nGROUP BY League.id\nORDER BY match_count DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "134": " SELECT team_fifa_api_id \nFROM Team_Attributes \nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;\t----- bird -----\teuropean_football_2",
    "135": " SELECT team_long_name\nFROM Team_Attributes\nWHERE buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL) AND strftime('%Y', date) = '2012';\t----- bird -----\teuropean_football_2",
    "136": " SELECT\n\tDIVIDE(MULTIPLY(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END), 100), COUNT(player_fifa_api_id)) AS percentage_left_foot\nFROM\n\tPlayer_Attributes\nWHERE\n\tYEAR(birthday) BETWEEN 1987 AND 1992;\t----- bird -----\teuropean_football_2",
    "137": " SELECT AVG(long_shots) \nFROM Player_Attributes \nWHERE player_fifa_api_id = (\nSELECT player_fifa_api_id \nFROM Player \nWHERE player_name = 'Ahmed Samir Farag'\n);\t----- bird -----\teuropean_football_2",
    "138": " SELECT Player.player\\_name\nFROM Player\nJOIN Player\\_Attributes ON Player.player\\_api\\_id = Player\\_Attributes.player\\_api\\_id\nWHERE Player.height > 180\nGROUP BY Player.player\\_api\\_id\nORDER BY AVG(Player\\_Attributes.heading\\_accuracy) DESC\nLIMIT 10;\t----- bird -----\teuropean_football_2",
    "139": " SELECT League.name\nFROM Match, League\nWHERE Match.league_id = League.id AND Match.season = '2009/2010'\nGROUP BY League.name\nHAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);\t----- bird -----\teuropean_football_2",
    "140": " SELECT player_name \nFROM Player \nWHERE substr(birthday,1,7) = '1970-10';\t----- bird -----\teuropean_football_2",
    "141": " SELECT overall_rating\nFROM Player_Attributes\nWHERE player_name = 'Gabriel Tamas' AND strftime('%Y', date) = '2011';\t----- bird -----\teuropean_football_2",
    "142": " SELECT AVG(home\\_team\\_goal)\nFROM Match\nWHERE country\\_id = (SELECT id FROM Country WHERE name = 'Poland') AND season = '2010/2011';\t----- bird -----\teuropean_football_2",
    "143": " SELECT AVG(finishing) as avg_finishing_rate\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE height = (SELECT MAX(height) FROM Player)\nOR height = (SELECT MIN(height) FROM Player)\nORDER BY avg_finishing_rate DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "144": " SELECT AVG(t2.overall_rating)\nFROM Player_Attributes t2\nJOIN Player t1 ON t2.player_api_id = t1.player_api_id\nWHERE strftime('%Y', t2.date) >= '2010' AND strftime('%Y', t2.date) <= '2015' AND t1.height > 170;\t----- bird -----\teuropean_football_2",
    "145": " SELECT AVG(Player\\_Attributes.ball\\_control) -\n(SELECT AVG(Player\\_Attributes.ball\\_control) FROM Player\\_Attributes WHERE Player\\_Attributes.player\\_name = 'Aaron Appindangoye')\nAS difference\nFROM Player\\_Attributes\nWHERE Player\\_Attributes.player\\_name = 'Abdou Diallo';\t----- bird -----\teuropean_football_2",
    "146": " SELECT\n CASE\n WHEN MAX(strftime('%s', '2000-04-16')) < MAX(strftime('%s', birthday)) THEN 'Aaron Lennon'\n ELSE 'Abdelaziz Barrada'\n END\nFROM Player\nWHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada');\t----- bird -----\teuropean_football_2",
    "147": " SELECT player\\_api\\_id, MAX(height) as TallestHeight\nFROM Player\nGROUP BY player\\_api\\_id;\t----- bird -----\teuropean_football_2",
    "148": " SELECT COUNT(*)\nFROM Player_Attributes\nWHERE preferred_foot = 'left' AND attacking_work_rate = 'low';\t----- bird -----\teuropean_football_2",
    "149": " SELECT COUNT(DISTINCT p.player_api_id)\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986' AND pa.defensive_work_rate = 'high';\t----- bird -----\teuropean_football_2",
    "150": " SELECT player\\_name\nFROM Player\\_Attributes\nJOIN Player ON Player\\_Attributes.player\\_api\\_id = Player.player\\_api\\_id\nWHERE volleys > 70 AND dribbling > 70;\t----- bird -----\teuropean_football_2",
    "151": " SELECT COUNT(*)\nFROM `Match`\nWHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND SUBSTR(date, 1, 7) = 'April, 2009';\t----- bird -----\teuropean_football_2",
    "152": " SELECT name \nFROM League \nWHERE id = (\n SELECT league_id \n FROM Match \n WHERE season = '2008/2009' \n GROUP BY league_id \n ORDER BY COUNT(*) DESC \n LIMIT 1\n)\t----- bird -----\teuropean_football_2",
    "153": " SELECT\nROUND(MULTIPLY(DIVIDE(SUBTRACT((SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk'), (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Paulin Puel')), 100)), 2) AS percentage_difference\n```sql\n\nThis SQL query calculates the percentage difference between Ariel Borysiuk's overall rating and Paulin Puel's overall rating. It first selects the overall ratings for both players, then calculates the difference, divides it by Paulin Puel's overall rating, multiplies the result by 100, and finally rounds it to two decimal places.\n```\t----- bird -----\teuropean_football_2",
    "154": " SELECT AVG(T1.overall_rating)\nFROM Player_Attributes T1\nJOIN Player T2 ON T1.player_api_id = T2.player_api_id\nWHERE T2.player_name = 'Pietro Marino';\t----- bird -----\teuropean_football_2",
    "155": " SELECT MAX(chanceCreationPassing) as max\\_chance\\_creation\\_passing, chanceCreationPassingClass as passing\\_class\nFROM Team_Attributes\nJOIN Team ON Team\\_Attributes.team\\_fifa\\_api\\_id = Team.team\\_fifa\\_api\\_id\nWHERE team\\_long\\_name = 'Ajax';\t----- bird -----\teuropean_football_2",
    "156": " SELECT Player.player\\_name\nFROM Player\\_Attributes\nJOIN Player ON Player\\_Attributes.player\\_api\\_id = Player.player\\_api\\_id\nWHERE Player\\_Attributes.overall\\_rating = 77 AND Player\\_Attributes.date LIKE '2016-06-23%'\nORDER BY strftime('%s', Player.birthday) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "157": " SELECT overall_rating\nFROM Player\\_Attributes\nWHERE player\\_name = 'Aaron Mooy' AND date LIKE '2016-02-04%';\t----- bird -----\teuropean_football_2",
    "158": " SELECT Player_Attributes.attacking_work_rate\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player.player_name = 'Francesco Migliore' AND Player_Attributes.date LIKE '2015-05-01%';\t----- bird -----\teuropean_football_2",
    "159": " SELECT date\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant')\nAND crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant'))\nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "160": " SELECT Team_Attributes.buildUpPlayPassingClass\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nJOIN League ON Team.league_id = League.id\nWHERE Team.team_long_name = 'FC Lorient' AND League.name = 'Ligue 1' AND Team_Attributes.date LIKE '2010-02-22%';\t----- bird -----\teuropean_football_2",
    "161": " SELECT Team_Attributes.defenceAggressionClass\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id AND Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id\nJOIN Match ON Team.team_api_id = Match.home_team_api_id\nWHERE Team.team_long_name = 'Hannover 96' AND Match.date LIKE '2015-09-10%';\t----- bird -----\teuropean_football_2",
    "162": " SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22' AND '2016-04-21';\t----- bird -----\teuropean_football_2",
    "163": " SELECT\nROUND(100.0 * (pa1.overall_rating - pa2.overall_rating) / pa1.overall_rating, 2) AS percentage\nFROM\nPlayer_Attributes pa1\nJOIN Player_Attributes pa2 ON pa1.date = pa2.date\nJOIN Player p1 ON pa1.player_api_id = p1.player_api_id\nJOIN Player p2 ON pa2.player_api_id = p2.player_api_id\nWHERE\np1.player_name = 'Landon Donovan' AND p2.player_name = 'Jordan Bowery' AND pa1.date = '2013/7/12';\t----- bird -----\teuropean_football_2",
    "164": " SELECT player\\_name \nFROM Player \nORDER BY height DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "165": " SELECT Player\\_Attributes.player\\_api\\_id, MAX(overall\\_rating) as Max\\_Rating\nFROM Player\\_Attributes\nINNER JOIN Player ON Player\\_Attributes.player\\_api\\_id = Player.player\\_api\\_id\nGROUP BY Player\\_Attributes.player\\_api\\_id;\n\nThis SQL query will return the `player_api_id` of the most strongest player along with their maximum overall rating. The query first joins the `Player_Attributes` table with the `Player` table using the `player_api_id` as the common key. Then, it groups the results by `player_api_id` and calculates the maximum overall rating for each group. The query returns only the group with the maximum overall rating.\t----- bird -----\teuropean_football_2",
    "166": " SELECT Player.player_name\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.attacking_work_rate = 'high';\t----- bird -----\teuropean_football_2",
    "167": " SELECT DISTINCT team_short_name\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team_Attributes.chanceCreationPassingClass = 'Safe';\t----- bird -----\teuropean_football_2",
    "168": " SELECT COUNT(*)\nFROM Player\nWHERE player\\_name LIKE 'Aaron%' AND strftime('%Y', birthday) > '1990';\t----- bird -----\teuropean_football_2",
    "169": " SELECT\nABS(home_player_6.jumping - home_player_23.jumping) AS difference\nFROM\nMatch\nJOIN Player AS home_player_6 ON Match.home_player_6 = Player.player_api_id\nJOIN Player AS home_player_23 ON Match.home_player_23 = Player.player_api_id;\n\nThis query calculates the absolute difference between the jumping scores of players 6 and 23 in the home team. It first joins the Match table with the Player table twice, using the home\\_player\\_6 and home\\_player\\_23 columns to get the corresponding player records. Then, it subtracts the jumping score of player 23 from that of player 6 and takes the absolute value of the result to get the difference.\t----- bird -----\teuropean_football_2",
    "170": " SELECT player_api_id\nFROM Player_Attributes\nWHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right'\nLIMIT 5;\t----- bird -----\teuropean_football_2",
    "171": " SELECT COUNT(*)\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "172": " SELECT home_team_goal, away_team_goal\nFROM Match\nWHERE date = '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League');\t----- bird -----\teuropean_football_2",
    "173": " SELECT buildUpPlaySpeedClass\nFROM Team\nJOIN \"Match\" ON Team.team_api_id = \"Match\".home_team_api_id\nWHERE team_long_name = 'KSV Cercle Brugge';\t----- bird -----\teuropean_football_2",
    "174": " SELECT finishing, curve\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.weight = (SELECT MAX(weight) FROM Player);\t----- bird -----\teuropean_football_2",
    "175": " SELECT League.name\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE Match.season = '2015/2016'\nGROUP BY League.name\nORDER BY COUNT(Match.id) DESC\nLIMIT 4;\t----- bird -----\teuropean_football_2",
    "176": " SELECT Team.team_long_name \nFROM Match \nJOIN Team ON Match.away_team_api_id = Team.team_api_id \nGROUP BY Match.away_team_api_id \nORDER BY MAX(Match.away_team_goal) DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
    "177": " SELECT Player_Attributes.player_name, MAX(Player_Attributes.overall_rating) as greatest_strength\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nGROUP BY Player_Attributes.player_api_id;\t----- bird -----\teuropean_football_2",
    "178": " SELECT\nROUND(100.0 * COUNT(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 END) / COUNT(*), 2) AS percentage\nFROM Player_Attributes;\t----- bird -----\teuropean_football_2",
    "179": " SELECT driverRef\nFROM qualifying\nWHERE raceId = 20 AND q1 IS NOT NULL\nGROUP BY driverRef\nORDER BY MAX(q1)\nLIMIT 5;\t----- bird -----\tformula_1",
    "180": " SELECT surname\nFROM drivers\nWHERE driverId = (\n SELECT driverId\n FROM qualifying\n WHERE raceId = 19 AND q2 IS NOT NULL\n GROUP BY driverId\n HAVING MIN(q2) = q2\n)\nLIMIT 1;\t----- bird -----\tformula_1",
    "181": " SELECT name \nFROM races \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE country = 'Germany';\n```\t----- bird -----\tformula_1",
    "182": " SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "183": " SELECT lng, lat\nFROM circuits\nWHERE name = 'Abu Dhabi Grand Prix';\t----- bird -----\tformula_1",
    "184": " SELECT q1\nFROM qualifying\nWHERE raceId = 354 AND driverId IN (\n    SELECT driverId\n    FROM drivers\n    WHERE forename || ' ' || surname = 'Bruno Senna'\n);\t----- bird -----\tformula_1",
    "185": " SELECT number\nFROM qualifying\nWHERE raceId = 903 AND q3 LIKE '0:01:54%';\t----- bird -----\tformula_1",
    "186": " SELECT COUNT(*)\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)\nAND time IS NULL;\t----- bird -----\tformula_1",
    "187": " SELECT d.driverId, MAX(d.dob) as MaxDOB\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 592 AND r.time IS NOT NULL\nGROUP BY d.driverId;\t----- bird -----\tformula_1",
    "188": " SELECT url\nFROM drivers\nJOIN lapTimes ON drivers.driverId = lapTimes.driverId\nWHERE lapTimes.raceId = 161 AND lapTimes.time LIKE '0:01:27%';\t----- bird -----\tformula_1",
    "189": " SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Malaysian Grand Prix';\t----- bird -----\tformula_1",
    "190": " SELECT url\nFROM constructors\nWHERE constructorId = (\n SELECT constructorId\n FROM constructorResults\n WHERE raceId = 9\n AND points = (\n SELECT MAX(points)\n FROM constructorResults\n WHERE raceId = 9\n )\n)\t----- bird -----\tformula_1",
    "191": " SELECT code\nFROM drivers\nWHERE driverId IN (\n    SELECT driverId\n    FROM qualifying\n    WHERE q3 LIKE '0:01:33%' AND raceId = 45\n)\nLIMIT 1;\t----- bird -----\tformula_1",
    "192": " SELECT seasons.url\nFROM seasons\nJOIN races ON seasons.year = races.year\nWHERE races.raceId = 901;\t----- bird -----\tformula_1",
    "193": " SELECT\n\tdrivers.driverId,\n\tMIN(drivers.dob) as min_dob\nFROM\n\tresults\nJOIN\n\tdrivers ON results.driverId = drivers.driverId\nWHERE\n\tresults.raceId = 872 AND\n\tresults.time IS NOT NULL\nGROUP BY\n\tresults.driverId;\t----- bird -----\tformula_1",
    "194": " SELECT drivers.nationality\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN (\n    SELECT MAX(fastestLapSpeed) as max_fastestLapSpeed\n    FROM results\n) as max_speed ON results.fastestLapSpeed = max_speed.max_fastestLapSpeed\nWHERE results.fastestLap = 1;\t----- bird -----\tformula_1",
    "195": " SELECT \n\t----- bird -----\tformula_1",
    "196": " SELECT\ndriverId,\nROUND(COUNT(time) * 100.0 / (SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '1983-07-16')), 2) AS completion_rate\nFROM\nresults\nWHERE\nraceId = (SELECT raceId FROM races WHERE date = '1983-07-16') AND time IS NOT NULL\nGROUP BY\ndriverId;\t----- bird -----\tformula_1",
    "197": " SELECT name \nFROM races \nWHERE strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', min(date)) FROM races);\t----- bird -----\tformula_1",
    "198": " SELECT\n    drivers.forename,\n    drivers.surname,\n    max(results.points) as MaxPoints\nFROM\n    results\n        JOIN\n    drivers ON results.driverId = drivers.driverId\nGROUP BY\n    results.driverId\nORDER BY\n    MaxPoints DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "199": " SELECT min(l.milliseconds) as best_lap_time, d.forename, d.surname, r.name as race\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nJOIN races r ON l.raceId = r.raceId\nGROUP BY l.raceId;\t----- bird -----\tformula_1",
    "200": " SELECT AVG(milliseconds)\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND lapTimes.raceId = (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Malaysian Grand Prix' AND year = 2009\n);\n```\n\nThis SQL query calculates the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix by joining the `lapTimes` and `drivers` tables, filtering for the specific driver and race, and then calculating the average of the `milliseconds` column.\n```\t----- bird -----\tformula_1",
    "201": " SELECT\nDIVIDE(\nCOUNT(r.raceId)\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE d.surname = 'Hamilton' AND r.position > 1 AND r.year >= 2010\n),\n(\nSELECT\nCOUNT(raceId)\nFROM results\nWHERE driverId IN (\nSELECT driverId\nFROM drivers\nWHERE surname = 'Hamilton'\n)\nAND year >= 2010\n) \\* 100.0\nAS percentage\n```sql;\n\nHere's the step-by-step breakdown of the SQL query:\n\n1. We start by counting the number of races where Lewis Hamilton finished in a position greater than 1 since 2010.\n2. We then divide this count by the total number of races where Hamilton has participated since 2010.\n3. The first subquery (SELECT COUNT(raceId) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND year >= 2010) calculates the total number of races where Hamilton has participated since 2010.\n4. The second subquery (SELECT COUNT(r.raceId) FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.position > 1 AND r.year >= 2010) calculates the number of races where Hamilton finished in a position greater than 1 since 2010.\n5. We then divide the result of the first subquery by the result of the second subquery and multiply by 100.0 to get the percentage.\n\nNote: The SQLite code uses the DIVIDE function to perform the division operation, as the regular division operator (/) in SQLite returns a floating-point number by default.\n```\t----- bird -----\tformula_1",
    "202": " SELECT\n    drivers.forename,\n    drivers.surname,\n    drivers.nationality,\n    MAX(constructorStandings.wins) as max_wins\nFROM\n    drivers\nJOIN\n    constructorStandings ON drivers.driverId = constructorStandings.constructorId\nGROUP BY\n    drivers.driverId\nORDER BY\n    max_wins DESC\nLIMIT 1;\t----- bird -----\tformula_1",
    "203": " SELECT MIN(strftime('%Y', 'now') - strftime('%Y', dob)) as min_age, forename || ' ' || surname as name\nFROM drivers\nWHERE nationality = 'Japanese'\nGROUP BY nationality;\n\nThis SQL query calculates the minimum age of Japanese drivers by subtracting their year of birth from the current year using the strftime function. It then concatenates their first and last names to get their full name. The query groups the results by nationality to ensure that only the minimum age and name of Japanese drivers are returned.\t----- bird -----\tformula_1",
    "204": " SELECT\n    races.name,\n    circuits.name AS circuitName,\n    circuits.location\nFROM\n    races\nJOIN\n    circuits ON races.circuitId = circuits.circuitId\nWHERE\n    strftime('%m', races.date) = '09' AND\n    strftime('%Y', races.date) = '2005';\t----- bird -----\tformula_1",
    "205": " SELECT r.name, r.round, r.year, r.date, d.surname, d.forename, r.circuitId, l.lap, l.position, l.time, l.milliseconds\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nJOIN races r ON l.raceId = r.raceId\nWHERE d.surname = 'Yoong' AND d.forename = 'Alex' AND l.position < 20;\n\nThis SQL query will return the name, round, year, date, surname, forename, circuitId, lap, position, time, and milliseconds for all of Alex Yoong's laps in races where his position was less than 20. From this result, you can determine the specific race where this occurred by looking at the round, year, and date columns.\t----- bird -----\tformula_1",
    "206": " SELECT r.year, r.name\nFROM results r\nJOIN (\n    SELECT raceId, MIN(milliseconds) as fastest_lap\n    FROM lapTimes\n    WHERE driverId = (\n        SELECT driverId\n        FROM drivers\n        WHERE forename = 'Michael' AND surname = 'Schumacher'\n    )\n    GROUP BY raceId\n) l ON r.raceId = l.raceId\nWHERE r.milliseconds = l.fastest_lap;\t----- bird -----\tformula_1",
    "207": " SELECT r.year, r.name, r.date, r.time, cr.name as circuit\\_name, res.points\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nJOIN drivers d ON res.driverId = d.driverId\nJOIN constructors con ON res.constructorId = con.constructorId\nJOIN circuits cr ON r.circuitId = cr.circuitId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY r.year ASC\nLIMIT 1;\t----- bird -----\tformula_1",
    "208": " SELECT \n\t----- bird -----\tformula_1",
    "209": " SELECT lat, lng \nFROM circuits \nWHERE name = 'Silverstone Circuit';\t----- bird -----\tformula_1",
    "210": " SELECT circuitRef \nFROM circuits \nWHERE name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1",
    "211": " SELECT nationality\nFROM drivers\nWHERE dob = (SELECT min(dob) FROM drivers)\n```\n\nThis SQL query will return the nationality of the oldest driver. It first finds the minimum date of birth from the `drivers` table, and then returns the nationality of the driver who has this minimum date of birth.\n```\t----- bird -----\tformula_1",
    "212": " SELECT driverRef\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Canadian Grand Prix' AND results.year = 2007 AND results.position = 1;\t----- bird -----\tformula_1",
    "213": " SELECT r.name,\nMIN(ranks.rank) AS highest\\_rank\nFROM results AS ranks\nJOIN drivers ON ranks.driverId = drivers.driverId\nJOIN races r ON ranks.raceId = r.raceId\nWHERE forename || ' ' || surname = 'Lewis Hamilton'\nGROUP BY r.name;\t----- bird -----\tformula_1",
    "214": " SELECT max(fastestLapSpeed)\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix') AND raceId IN (SELECT raceId FROM seasons WHERE year = 2009);\t----- bird -----\tformula_1",
    "215": " SELECT positionOrder\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE results.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008)\nAND forename = 'Lewis' AND surname = 'Hamilton';\t----- bird -----\tformula_1",
    "216": " SELECT time\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008)\nAND position = 2;\t----- bird -----\tformula_1",
    "217": " SELECT COUNT(DISTINCT r.driverId)\nFROM results r\nJOIN races race ON r.raceId = race.raceId\nWHERE race.year = 2008 AND race.name = 'Chinese Grand Prix' AND r.time IS NOT NULL;\n```\t----- bird -----\tformula_1",
    "218": " SELECT\n\tROUND(\n\t    (\n\t        (\n\t            strftime('%s', r1.time) + r1.milliseconds / 1000.0\n\t        ) - (\n\t            strftime('%s', r0.time) + r0.milliseconds / 1000.0\n\t        )\n\t    ) / (\n\t        strftime('%s', r0.time) + r0.milliseconds / 1000.0\n\t    ) * 100,\n\t    2\n\t) AS percentage\nFROM\n\tresults r0\nJOIN\n\tresults r1 ON r1.position = 1\nJOIN\n\traces race ON r0.raceId = race.raceId\nWHERE\n\trace.year = 2008\n\tAND race.round = 1\n\tAND r0.positionText = 'Ret'\n\tAND r1.positionText != 'Ret';\t----- bird -----\tformula_1",
    "219": " SELECT COUNT(*)\nFROM circuits\nWHERE location = 'Melbourne' AND country = 'Australia';\n\nThis SQL query will return the number of circuits in Melbourne, Australia. However, based on the provided external knowledge, there is only one circuit in Melbourne, Australia, which is the Albert Park Circuit.\t----- bird -----\tformula_1",
    "220": " SELECT MAX(points)\nFROM constructorStandings\nWHERE nationality = 'British';\t----- bird -----\tformula_1",
    "221": " SELECT c.name\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nJOIN races r ON cr.raceId = r.raceId\nWHERE r.raceId = 291 AND cr.points = 0;\t----- bird -----\tformula_1",
    "222": " SELECT COUNT(*)\nFROM constructors\nWHERE nationality = 'Japanese' AND constructorId NOT IN (\n    SELECT constructorId\n    FROM constructorResults\n    WHERE points > 0 AND raceId IN (\n        SELECT raceId\n        FROM races\n        LIMIT 2\n    )\n)\nLIMIT 1;\t----- bird -----\tformula_1",
    "223": " SELECT \n\t----- bird -----\tformula_1",
    "224": " SELECT AVG(STRFTIME('%s', time) / 1000) as avg_time_in_seconds\nFROM results r\nJOIN status s ON r.statusId = s.statusId\nWHERE r.position = 1 AND r.time IS NOT NULL AND strftime('%Y', r.time) < 1975;\t----- bird -----\tformula_1",
    "225": " SELECT fastestLap\nFROM results\nWHERE raceId IN (\n    SELECT raceId\n    FROM races\n    WHERE year = 2009\n)\nAND position = 1;\t----- bird -----\tformula_1",
    "226": " SELECT AVG(fastestLapSpeed)\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
    "227": " SELECT \n\tROUND(100.0 * COUNT(drivers.driverId) / (\n\t    SELECT COUNT(driverId)\n\t    FROM drivers\n\t    WHERE year(dob) BETWEEN 2000 AND 2\t----- bird -----\tformula_1",
    "228": " SELECT COUNT(*)\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.time < '02:00.00' AND d.nationality = 'French';\t----- bird -----\tformula_1",
    "229": " SELECT code\nFROM drivers\nWHERE nationality = 'America';\t----- bird -----\tformula_1",
    "230": " SELECT driverId, number, forename, surname, strftime('%Y', dob) as year\nFROM drivers\nORDER BY year DESC\nLIMIT 3;\n\n-- The above query will return the top 3 youngest drivers along with their driverId, number, forename, and surname.\n\n-- To find out how many Netherlandic drivers are among them, we can use the following query:\n\nSELECT COUNT(*)\nFROM (\n    SELECT driverId, number, forename, surname, strftime('%Y', dob) as year\n    FROM drivers\n    WHERE nationality = 'Netherlandic'\n    ORDER BY year DESC\n    LIMIT 3\n)\n-- The above nested query will return the number of Netherland landic drivers who are among the top 3 youngest drivers.\t----- bird -----\tformula_1",
    "231": " SELECT\n    MIN(d.dob) AS oldest_dob,\n    d.driverRef\nFROM\n    drivers d\nWHERE\n    d.nationality = 'German'\nGROUP BY\n    d.driverRef;\n\nThis SQL query will return the driverRef of the oldest German driver, by finding the minimum value of the dob (date of birth) for all German drivers and returning the corresponding driverRef.\t----- bird -----\tformula_1",
    "232": " SELECT driverId, code\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE strftime('%Y', dob) = '1971' AND fastestLapTime IS NOT NULL;\t----- bird -----\tformula_1",
    "233": " SELECT COUNT(results.driverId)\nFROM results\nJOIN status ON results.statusId = status.statusId\nWHERE results.raceId BETWEEN 50 AND 100 AND status.status = 'disqualified';\t----- bird -----\tformula_1",
    "234": " SELECT circuits.location, circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE circuits.country = 'Austria'\nGROUP BY circuits.circuitId\nORDER BY COUNT(races.raceId) DESC;\n\nThis SQL query will return the location, latitude, and longitude of the circuits in Austria, along with the number of times each circuit has been held in Austria. The query first joins the \"circuits\" table with the \"races\" table on the \"circuitId\" column, then filters for rows where the \"country\" column in the \"circuits\" table is \"Austria\". It then groups the results by \"circuitId\" and orders them in descending order by the count of matching races, so that the circuits with the most races in Austria appear at the top. Finally, it selects the \"location\", \"lat\", and \"lng\" columns from the \"circuits\" table to include in the output.\t----- bird -----\tformula_1",
    "235": " SELECT d.forename, d.surname, min(r.date) as first_race_date, min(r.time) as first_race_time\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN (\n    SELECT driverId, min(raceId) as first_race_id\n    FROM results\n    WHERE position = 1\n    GROUP BY driverId\n) rs ON r.driverId = rs.driverId AND r.raceId = rs.first_race_id\nJOIN (\n    SELECT driverId, min(dob) as youngest_dob\n    FROM drivers\n) yd ON d.driverId = yd.driverId\nGROUP BY youngest_dob\nORDER BY youngest_dob;\t----- bird -----\tformula_1",
    "236": " SELECT\n    drivers.forename,\n    drivers.surname,\n    AVG(pitStops.duration) as avg_duration\nFROM\n    drivers\nJOIN\n    pitStops ON drivers.driverId = pitStops.driverId\nJOIN\n    races ON pitStops.raceId = races.raceId\nWHERE\n    drivers.nationality = 'German'\n    AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31'\nGROUP BY\n    drivers.driverId\nORDER BY\n    avg_duration ASC\nLIMIT 3;\t----- bird -----\tformula_1",
    "237": " SELECT R.driverId, D.forename, D.surname, R.time\nFROM results R\nJOIN drivers D ON R.driverId = D.driverId\nWHERE R.raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' AND year = 2008)\nAND R.position = 1;\n\nThis SQL query will return the driverId, forename, surname, and finish time of the champion of the Canadian Grand Prix in 2008. The subquery in the WHERE clause finds the raceId for the Canadian Grand Prix in 2008, and the main query filters the results to only include the champion (i.e., the driver with position = 1).\t----- bird -----\tformula_1",
    "238": " SELECT\n    c.name,\n    c.url\nFROM\n    constructors c\nJOIN\n    results r ON c.constructorId = r.constructorId\nJOIN\n    races race ON r.raceId = race.raceId\nWHERE\n    race.year = 2009\n    AND race.name = 'Singapore Grand Prix'\n    AND r.position = 1;\t----- bird -----\tformula_1",
    "239": " SELECT sp.power\\_name\nFROM superhero sh\nJOIN hero\\_power hp ON sh.id = hp.hero\\_id\nJOIN superpower sp ON hp.power\\_id = sp.id\nWHERE sh.superhero\\_name = '3-D Man';\t----- bird -----\tsuperhero",
    "240": " SELECT\n    SUM(results.points) AS total\\_points,\n    constructors.name,\n\t----- bird -----\tformula_1",
    "241": " SELECT forename || ' ' || surname AS full\\_name\nFROM drivers\nJOIN qualifying ON drivers.driverId = qualifying.driverId\nWHERE raceId = (\n    SELECT raceId\n    FROM races\n    WHERE circuitId = (\n        SELECT circuitId\n        FROM circuits\n        WHERE location = 'Marina Bay Street Circuit'\n    ) AND year = 2008\n    LIMIT 1\n) AND position = (\n    SELECT MIN(q3)\n    FROM qualifying\n    WHERE q3 IS NOT NULL\n    GROUP BY raceId\n    HAVING raceId = (\n        SELECT raceId\n        FROM races\n        WHERE circuitId = (\n            SELECT circuitId\n            FROM circuits\n            WHERE location = 'Marina Bay Street Circuit'\n        ) AND year = 2008\n        LIMIT 1\n    )\n    LIMIT 1\n)\nLIMIT 1;\t----- bird -----\tformula_1",
    "242": " SELECT\n    MAX(d.dob) AS youngest_dob,\n    d.forename || ' ' || d.surname AS full_name,\n    d.nationality,\n    r.name AS first_race\nFROM\n    drivers d\n        JOIN\n    results r ON d.driverId = r.driverId\nGROUP BY\n    d.driverId\nLIMIT 1;\t----- bird -----\tformula_1",
    "243": " SELECT MAX(accidents) as max_accidents\nFROM (\n    SELECT COUNT(*) as accidents\n    FROM results\n    JOIN status ON results.statusId = status.statusId AND status.status = 'Accident'\n    WHERE raceId = (\n        SELECT raceId\n        FROM races\n        WHERE name = 'Canadian Grand Prix'\n    )\n    GROUP BY driverId\n)\n;\t----- bird -----\tformula_1",
    "244": " SELECT\n    drivers.forename,\n    drivers.surname\nFROM\n    results\nJOIN\n    drivers ON results.driverId = drivers.driverId\nJOIN\n    lapTimes ON results.resultId = lapTimes.raceId AND results.driverId = lapTimes.driverId\nWHERE\n    lapTimes.time = (SELECT MIN(time) FROM lapTimes)\nLIMIT 20;\t----- bird -----\tformula_1",
    "245": " SELECT c.circuitRef, MIN(l.milliseconds) as lap_record\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nJOIN lapTimes l ON r.raceId = l.raceId\nWHERE c.country = 'Italy'\nGROUP BY c.circuitId;\t----- bird -----\tformula_1",
    "246": " SELECT COUNT(*)\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power\\_name = 'Super Strength' AND s.height\\_cm > 200;\t----- bird -----\tsuperhero",
    "247": " SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id AND colour.colour = 'Blue'\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id AND superpower.power_name = 'Agility';\n```\t----- bird -----\tsuperhero",
    "248": " SELECT superhero_name \nFROM superhero \nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') \nAND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond');\t----- bird -----\tsuperhero",
    "249": " SELECT superhero_name, height_cm\nFROM superhero\nWHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')\nORDER BY height_cm DESC;\t----- bird -----\tsuperhero",
    "250": " SELECT eye\\_colour\\_id, COUNT(*) as eye\\_color\\_count\nFROM superhero\nWHERE publisher\\_id = (SELECT id FROM publisher WHERE publisher\\_name = 'Marvel Comics')\nGROUP BY eye\\_colour\\_id\nORDER BY eye\\_color\\_count DESC;\t----- bird -----\tsuperhero",
    "251": " SELECT superhero.superhero\\_name\nFROM superhero\nJOIN hero\\_power ON superhero.id = hero\\_power.hero\\_id\nJOIN superpower ON hero\\_power.power\\_id = superpower.id\nJOIN publisher ON superhero.publisher\\_id = publisher.id\nWHERE superpower.power\\_name = 'Super Strength' AND publisher.publisher\\_name = 'Marvel Comics';\n```\t----- bird -----\tsuperhero",
    "252": " SELECT publisher_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute_name = 'Speed' AND attribute_value = (\n    SELECT MIN(attribute_value)\n    FROM hero_attribute\n    WHERE attribute_name = 'Speed'\n)\nGROUP BY publisher_name;\t----- bird -----\tsuperhero",
    "253": " SELECT COUNT(*)\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE colour.colour = 'Gold' AND publisher.publisher\\_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "254": " SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nWHERE hero_attribute.attribute_name = 'Intelligence'\nORDER BY hero_attribute.attribute_value ASC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "255": " SELECT race \nFROM superhero \nJOIN race ON superhero.race_id = race.id \nWHERE superhero_name = 'Copycat';\n```\t----- bird -----\tsuperhero",
    "256": " SELECT superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute_name = 'Durability' AND attribute_value < 50;\t----- bird -----\tsuperhero",
    "257": " SELECT superhero_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power\\_name = 'Death Touch';\t----- bird -----\tsuperhero",
    "258": " SELECT COUNT(*)\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;\t----- bird -----\tsuperhero",
    "259": " SELECT\nROUND(100.0 * SUM(CASE WHEN alignment = 'Bad' THEN 1 ELSE 0 END) / COUNT(id), 2) AS percentage,\nSUM(CASE WHEN alignment = 'Bad' AND publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS marvel_superheroes\nFROM superhero;\t----- bird -----\tsuperhero",
    "260": " SELECT\nCalculate(SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) -\nCalculate(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS difference\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id;\n\nWITH counted_heroes AS (\nSELECT\npublisher_name,\nCOUNT(*) AS num_heroes\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nGROUP BY publisher_name\n)\nSELECT\ncalculate(num_heroes - (SELECT num_heroes FROM counted_heroes WHERE publisher_name = 'DC Comics')) AS difference\nFROM counted_heroes\nWHERE publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "261": " SELECT id \nFROM publisher \nWHERE publisher\\_name = 'Star Trek';\n```\n\n**Note**: The above SQL query will return the publisher ID for 'Star Trek' if it exists in the `publisher` table.\n```\t----- bird -----\tsuperhero",
    "262": " SELECT COUNT(*)\nFROM superhero\nWHERE full_name IS NULL;\t----- bird -----\tsuperhero",
    "263": " SELECT AVG(weight_kg) \nFROM superhero \nWHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female');\t----- bird -----\tsuperhero",
    "264": " SELECT sp.power\\_name\nFROM superhero sh\nJOIN hero\\_power hp ON sh.id = hp.hero\\_id\nJOIN superpower sp ON hp.power\\_id = sp.id\nJOIN gender g ON sh.gender\\_id = g.id\nWHERE g.gender = 'Male'\nLIMIT 5;\t----- bird -----\tsuperhero",
    "265": " SELECT superhero_name \nFROM superhero \nWHERE height_cm BETWEEN 170 AND 190 \nAND eye_colour_id = (SELECT id FROM colour WHERE colour = 'No Colour');\t----- bird -----\tsuperhero",
    "266": " SELECT hair_colour_id\nFROM superhero\nWHERE race_id = (SELECT id FROM race WHERE race = 'human') AND height_cm = 185;\t----- bird -----\tsuperhero",
    "267": " SELECT\n\t----- bird -----\tsuperhero",
    "268": " SELECT superhero_name \nFROM superhero \nJOIN gender ON superhero.gender_id = gender.id \nWHERE gender.gender = 'Male' AND weight_kg > (SELECT AVG(weight_kg) \\* 0.79 FROM superhero);\t----- bird -----\tsuperhero",
    "269": " SELECT power\\_name\nFROM superpower\nJOIN hero\\_power ON superpower.id = hero\\_power.power\\_id\nWHERE hero\\_power.hero\\_id = 1;\t----- bird -----\tsuperhero",
    "270": " SELECT COUNT(*)\nFROM hero_power\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'stealth';\t----- bird -----\tsuperhero",
    "271": " SELECT full_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nWHERE ha.attribute_name = 'strength' AND ha.attribute_value = (\n    SELECT MAX(ha2.attribute_value)\n    FROM hero_attribute ha2\n    WHERE ha2.attribute_name = 'strength'\n)\t----- bird -----\tsuperhero",
    "272": " SELECT s.superhero\\_name\nFROM superhero s\nJOIN hero\\_attribute ha ON s.id = ha.hero\\_id\nJOIN attribute a ON ha.attribute\\_id = a.id\nWHERE a.attribute\\_name = 'durability'\nAND s.publisher\\_id = (SELECT id FROM publisher WHERE publisher\\_name = 'Dark Horse Comics')\nORDER BY ha.attribute\\_value DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
    "273": " SELECT s.eye_colour\\_id AS eyes, s.hair\\_colour\\_id AS hair, s.skin\\_colour\\_id AS skin\\_colour\nFROM superhero s\nJOIN gender g ON s.gender\\_id = g.id\nJOIN publisher p ON s.publisher\\_id = p.id\nWHERE g.gender = 'Female' AND p.publisher\\_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "274": " SELECT s.superhero\\_name, s.publisher\\_id, c1.colour as eye\\_colour, c2.colour as hair\\_colour, c3.colour as skin\\_colour\nFROM superhero s\nJOIN colour c1 ON s.eye\\_colour\\_id = c1.id\nJOIN colour c2 ON s.hair\\_colour\\_id = c2.id\nJOIN colour c3 ON s.skin\\_colour\\_id = c3.id\nWHERE s.eye\\_colour\\_id = s.hair\\_colour\\_id AND s.hair\\_colour\\_id = s.skin\\_colour\\_id\nJOIN publisher p ON s.publisher\\_id = p.id;\t----- bird -----\tsuperhero",
    "275": " SELECT\n\t----- bird -----\tsuperhero",
    "276": " SELECT COUNT(*)\nFROM hero_power\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.superhero_name = 'Amazo';\t----- bird -----\tsuperhero",
    "277": " SELECT height\\_cm \nFROM superhero \nJOIN colour ON superhero.eye\\_colour\\_id = colour.id \nWHERE colour.colour = 'Amber';\t----- bird -----\tsuperhero",
    "278": " SELECT superhero_name \nFROM superhero \nWHERE eye\\_colour\\_id = (SELECT id FROM colour WHERE colour = 'Black') \nAND hair\\_colour\\_id = (SELECT id FROM colour WHERE colour = 'Black');\t----- bird -----\tsuperhero",
    "279": " SELECT superhero_name \nFROM superhero \nWHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');\n```\t----- bird -----\tsuperhero",
    "280": " SELECT COUNT(DISTINCT s.id)\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Strength'\nAND ha.attribute_value = (\n    SELECT MAX(attribute_value)\n    FROM hero_attribute\n    WHERE attribute_name = 'Strength'\n)\t----- bird -----\tsuperhero",
    "281": " SELECT\n\t----- bird -----\tsuperhero",
    "282": " SELECT\nSUM(weight_kg) FILTER (WHERE full_name = 'Emil Blonsky') -\nSUM(weight_kg) FILTER (WHERE full_name = 'Charles Chandler')\nFROM superhero;\t----- bird -----\tsuperhero",
    "283": " SELECT AVG(height_cm) as average_height\nFROM superhero;\t----- bird -----\tsuperhero",
    "284": " SELECT sp.power\\_name\nFROM superhero sh\nJOIN hero\\_power hp ON sh.id = hp.hero\\_id\nJOIN superpower sp ON hp.power\\_id = sp.id\nWHERE sh.superhero\\_name = 'Abomination';\t----- bird -----\tsuperhero",
    "285": " SELECT superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed' AND ha.attribute_value = (SELECT MAX(ha2.attribute_value)\n                                                           FROM hero_attribute ha2\n                                                           WHERE ha2.attribute_id = a.id);\t----- bird -----\tsuperhero",
    "286": " SELECT a.attribute\\_name, ha.attribute\\_value\nFROM attribute a\nJOIN hero\\_attribute ha ON a.id = ha.attribute\\_id\nJOIN superhero s ON ha.hero\\_id = s.id\nWHERE s.superhero\\_name = '3-D Man';\t----- bird -----\tsuperhero",
    "287": " SELECT superhero_name\nFROM superhero\nWHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')\nAND hair_colour_id = (SELECT id FROM colour WHERE colour = 'Brown');\t----- bird -----\tsuperhero",
    "288": " SELECT publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');\t----- bird -----\tsuperhero",
    "289": " Here is the SQLite code to calculate the percentage of superheroes with blue eyes:\n```sql\nSELECT \n    ROUND(100.0 *\n        (SELECT COUNT(*) FROM superhero\n         JOIN colour ON superhero.eye_colour_id = colour.id\n         WHERE colour.colour = 'Blue') /\n        (SELECT COUNT(*) FROM superhero), 2) AS blue_eyes_percentage\nFROM superhero;\n```\nExplanation:\n\n1. We first calculate the total number of superheroes using the subquery `(SELECT COUNT(*) FROM superhero)`.\n2. Then, we calculate the number of superheroes with blue eyes using the subquery `(SELECT COUNT(*) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue')`.\n3. We divide the number of superheroes with blue eyes by the total number of superheroes to get the proportion of superheroes with blue eyes.\n4. We multiply the proportion by 100.0 and round it to two decimal places using the `ROUND()` function to get the percentage.\n\nNote: The external knowledge mentioned that blue eyes refer to `color = 'Blue'` and `color.id = eye_colour_id = 7`. However, since the `colour` table does not have an `id` column, we assume that the `colour` table has a `colour` column that contains the color names. Therefore, we use `colour.colour = 'Blue'` instead of `color.id = 7` in the subquery.\t----- bird -----\tsuperhero",
    "290": " SELECT\nDIVIDE(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END), SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END)) AS ratio\nFROM superhero;\t----- bird -----\tsuperhero",
    "291": " SELECT colour.color\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full\\_name = 'Karen Beecher-Duncan';\t----- bird -----\tsuperhero",
    "292": " SELECT\n\tSUBTRACT(\n\t\tSUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END),\n\t\tSUM(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END)\n\t) AS difference\nFROM\n\tsuperhero\nWHERE\n\tsuperhero.weight_kg = 0 OR superhero.weight_kg IS NULL;\t----- bird -----\tsuperhero",
    "293": " SELECT COUNT(*)\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE c.colour = 'Green' AND a.alignment = 'Bad';\t----- bird -----\tsuperhero",
    "294": " SELECT superhero_name \nFROM superhero \nJOIN hero_power ON superhero.id = hero_power.hero_id \nJOIN superpower ON hero_power.power_id = superpower.id \nWHERE superpower.power\\_name = 'Wind Control' \nORDER BY superhero\\_name;\t----- bird -----\tsuperhero",
    "295": " SELECT s.gender_id\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Phoenix Force';\n\nThis query will return the gender\\_id of the superhero who has the ability of Phoenix Force. If you need to get the gender name, you can join the gender table and get the gender name based on the gender\\_id.\t----- bird -----\tsuperhero",
    "296": " SELECT\n\tSUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) -\n\tSUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference\nFROM\n\tsuperhero;\t----- bird -----\tsuperhero",
    "297": " SELECT MAX(Reputation) as Harlan\\_Reputation\nFROM users\nWHERE DisplayName = 'Harlan'\n\nUNION ALL\n\nSELECT MAX(Reputation) as Jarrod\\_Dixon\\_Reputation\nFROM users\nWHERE DisplayName = 'Jarrod Dixon'\n\nORDER BY 1 DESC\nLIMIT 1;\n```sql\n\nThis SQL query will return the maximum reputation value for each of the users \"Harlan\" and \"Jarrod Dixon\", and then order them in descending order to find out which user has the highest reputation. The `LIMIT 1` clause is used to return only the top reputation value.\n```\t----- bird -----\tcodebase_community",
    "298": " SELECT DisplayName \nFROM users \nWHERE year(CreationDate) = 2011;\t----- bird -----\tcodebase_community",
    "299": " SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';\t----- bird -----\tcodebase_community",
    "300": " SELECT DisplayName \nFROM users \nJOIN posts ON users.Id = posts.OwnerUserId \nWHERE posts.Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "301": " SELECT COUNT(Id) as post_count\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "302": " SELECT DisplayName\nFROM users\nWHERE Id = (\nSELECT LastEditorUserId\nFROM posts\nWHERE Id = (\nSELECT Id\nFROM posts\nWHERE Title = 'Examples for teaching: Correlation does not mean causation'\n)\n);\t----- bird -----\tcodebase_community",
    "303": " SELECT COUNT(\\*)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age > 65 AND p.Score >= 20;\t----- bird -----\tcodebase_community",
    "304": " SELECT body\nFROM posts\nWHERE id = (\nSELECT ExcerptPostId\nFROM tags\nWHERE TagName = 'bayesian'\n);\t----- bird -----\tcodebase_community",
    "305": " SELECT AVG(p.Score)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';\n```\n```\t----- bird -----\tcodebase_community",
    "306": " SELECT 100.0 * COUNT(u.Id) / (\nSELECT COUNT(p.Id)\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 5) AS percentage\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 5 AND u.Age > 65;\n```\t----- bird -----\tcodebase_community",
    "307": " SELECT favoriteCount\nFROM posts\nWHERE Id IN (\n SELECT PostId\n FROM comments\n WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39'\n)\n;\t----- bird -----\tcodebase_community",
    "308": " SELECT well_finished\nFROM (\nSELECT p.Id,\nCASE\nWHEN p.ClosedDate IS NULL THEN 'not well-finished'\nELSE 'well-finished'\nEND AS well_finished\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nJOIN users u ON c.UserId = u.Id\nWHERE u.Id = 23853 AND c.CreationDate = '2013-07-12 09:08:18'\n)\n;\n\nThis SQL query will return the well\\_finished status of the post that user 23853 commented on at 9:08:18 on 2013/7/12. The subquery first joins the necessary tables and filters for the specific user and comment creation date. Then, it checks if the ClosedDate of the post is NULL or not, and assigns the 'not well-finished' or 'well-finished' label accordingly. The outer query then selects this label as the result.\t----- bird -----\tcodebase_community",
    "309": " SELECT COUNT(Id) as post_count\nFROM posts\nWHERE OwnerDisplayName = 'Tiago Pasqualini';\t----- bird -----\tcodebase_community",
    "310": " SELECT DisplayName \nFROM users \nWHERE Id = (SELECT UserId FROM votes WHERE Id = 6347);\t----- bird -----\tcodebase_community",
    "311": " SELECT COUNT(posts.Id) / COUNT(votes.Id) as PostsVsVotesRatio\nFROM posts, users, votes\nWHERE posts.OwnerUserId = users.Id AND users.Id = votes.UserId AND users.Id = 24;\t----- bird -----\tcodebase_community",
    "312": " SELECT ViewCount\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "313": " SELECT Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName\nFROM comments\nWHERE Score = 17;\t----- bird -----\tcodebase_community",
    "314": " SELECT UserDisplayName\nFROM comments\nWHERE Text = 'thank you user93!';\t----- bird -----\tcodebase_community",
    "315": " SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community",
    "316": " SELECT DisplayName\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nWHERE posts.Title = 'Open source tools for visualizing multi-dimensional data';\t----- bird -----\tcodebase_community",
    "317": " SELECT Text\nFROM comments\nWHERE PostId IN (\nSELECT Id\nFROM posts\nWHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n);\t----- bird -----\tcodebase_community",
    "318": " SELECT u.DisplayName\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nJOIN posts p ON v.PostId = p.Id\nWHERE v.BountyAmount = 50 AND p.Title LIKE '%variance%';\t----- bird -----\tcodebase_community",
    "319": " SELECT AVG(p.ViewCount) AS avg\\_view\\_count, h.Title, c.Text\nFROM posts p\nJOIN postTags h ON p.Id = h.PostId\nJOIN tags t ON h.TagId = t.Id AND t.TagName = 'humor'\nLEFT JOIN comments c ON p.Id = c.PostId\nGROUP BY h.PostId;\t----- bird -----\tcodebase_community",
    "320": " SELECT COUNT(DISTINCT u.Id)\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nGROUP BY u.Id\nHAVING COUNT(DISTINCT b.Name) > 5;\t----- bird -----\tcodebase_community",
    "321": " SELECT u.Id, u.DisplayName\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nJOIN postHistory ph ON p.Id = ph.PostId\nGROUP BY u.Id, u.DisplayName, p.Id\nHAVING COUNT(ph.Id) = 1 AND u.Views >= 1000;\t----- bird -----\tcodebase_community",
    "322": " SELECT\n ROUND(\n (\n (\n (\n SELECT\n COUNT(Name)\n FROM badges\n WHERE Name = 'Student' AND strftime('%Y', Date) = '2010'\n )\n /\n (\n SELECT\n COUNT(Name)\n FROM badges\n WHERE strftime('%Y', Date) = '2010'\n )\n )\n -\n (\n (\n SELECT\n COUNT(Name)\n FROM badges\n WHERE Name = 'Student' AND strftime('%Y', Date) = '2011'\n )\n /\n (\n SELECT\n COUNT(Name)\n FROM badges\n WHERE strftime('%Y', Date) = '2011'\n )\n )\n )\n * 100,\n 2\n )\n AS\n \"Percentage Difference of Student Badges during 2010 and 2011\" ;\n\nThis SQL query calculates the percentage difference of student badges given during 2010 and 2011 by finding the count of student badges and total badges given in each year and then subtracting and multiplying by 100. The ROUND function is used to round the result to 2 decimal places.\t----- bird -----\tcodebase_community",
    "323": " SELECT\nAVG(u.UpVotes) AS avg\\_upvotes,\nAVG(u.Age) AS avg\\_age\nFROM\nusers u\nJOIN posts p ON u.Id = p.OwnerUserId\nGROUP BY\nu.Id\nHAVING\nCOUNT(p.Id) > 10;\t----- bird -----\tcodebase_community",
    "324": " SELECT DIVIDE(COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2010), COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2011) FROM votes;\n```\t----- bird -----\tcodebase_community",
    "325": " SELECT p.Id\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick' AND p.AnswerCount = (\n    SELECT MAX(AnswerCount)\n    FROM posts\n);\t----- bird -----\tcodebase_community",
    "326": " SELECT MAX(SUM(posts.ViewCount))\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Harvey Motulsky' OR users.DisplayName = 'Noah Snyder';\t----- bird -----\tcodebase_community",
    "327": " SELECT t.TagName\nFROM tags t\nJOIN posts p ON t.Id = p.Id\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Mark Meckes' AND p.CommentCount = 0;\t----- bird -----\tcodebase_community",
    "328": " SELECT \n100.0 * COUNT(p.Id) / SUM(\nCASE \nWHEN t.TagName = 'r' THEN 1 \nELSE 0 \nEND) AS percentage\nFROM posts p\nJOIN postTags pt ON p.Id = pt.PostId\nJOIN tags t ON pt.TagId = t.Id\nWHERE p.OwnerDisplayName = 'Community';\t----- bird -----\tcodebase_community",
    "329": " SELECT\nSUM(CASE WHEN users.DisplayName = 'Mornington' THEN posts.ViewCount ELSE 0 END) -\nSUM(CASE WHEN users.DisplayName = 'Amos' THEN posts.ViewCount ELSE 0 END) AS view_count_difference\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id;\t----- bird -----\tcodebase_community",
    "330": " SELECT AVG(link_count_per_month) AS avg_monthly_links\nFROM (\n    SELECT COUNT(pl.Id) / 12 AS link_count_per_month\n    FROM postLinks pl\n    JOIN posts p ON pl.PostId = p.Id\n    WHERE YEAR(pl.CreationDate) = 201\t----- bird -----\tcodebase_community",
    "331": " SELECT MIN(votes.CreationDate)\nFROM votes\nJOIN users ON votes.UserId = users.Id\nWHERE users.DisplayName = 'chl';\t----- bird -----\tcodebase_community",
    "332": " SELECT u.DisplayName\nFROM badges b\nJOIN users u ON b.UserId = u.Id\nWHERE b.Name = 'Autobiographer'\nAND b.Date = (\n    SELECT MIN(Date)\n    FROM badges\n    WHERE Name = 'Autobiographer'\n)\t----- bird -----\tcodebase_community",
    "333": " SELECT COUNT(DISTINCT u.Id)\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;\t----- bird -----\tcodebase_community",
    "334": " SELECT Id, Title\nFROM posts\nWHERE OwnerDisplayName = 'Harvey Motulsky' AND Views = (SELECT MAX(Views) FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky');\t----- bird -----\tcodebase_community",
    "335": " SELECT p.Id, u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE MAX(p.FavoriteCount) AND strftime('%Y', p.CreationDate) = '2010';\n```\t----- bird -----\tcodebase_community",
    "336": " SELECT\n\t----- bird -----\tcodebase_community",
    "337": " SELECT SUM(views) as total_views, last_editor_displayname\nFROM users\nJOIN posts ON users.id = posts.owneruserid OR users.id = posts.lasteditoruserid\nWHERE posts.id = (SELECT id FROM posts WHERE body = 'Computer Game Datasets' LIMIT 1)\nGROUP BY last_editor_displayname;\t----- bird -----\tcodebase_community",
    "338": " SELECT MAX(p.Score) AS highest_score, COUNT(c.Id) AS comment_count\nFROM posts p\nLEFT JOIN comments c ON p.Id = c.PostId\nGROUP BY highest_score;\n```\n```\t----- bird -----\tcodebase_community",
    "339": " SELECT\ncomments.Text,\nusers.DisplayName\nFROM comments\nJOIN users ON comments.UserId = users.Id\nWHERE PostId = (\nSELECT Id\nFROM posts\nWHERE Title = 'Analysing wind data with R'\n)\nORDER BY comments.CreationDate DESC\nLIMIT 10;\t----- bird -----\tcodebase_community",
    "340": " SELECT 100.0 * COUNT(p.Id) / (\nSELECT COUNT(p2.Id)\nFROM posts p2\nJOIN users u ON p2.OwnerUserId = u.Id\nWHERE u.Reputation = (SELECT MAX(Reputation) FROM users)\n) AS percentage\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 50 AND u.Reputation = (SELECT MAX(Reputation) FROM users);\n```\t----- bird -----\tcodebase_community",
    "341": " SELECT ExcerptPostId, WikiPostId \nFROM tags \nWHERE TagName = 'sample';\t----- bird -----\tcodebase_community",
    "342": " SELECT Reputation, UpVotes\nFROM users\nWHERE DisplayName = 'fine, you win :)';\t----- bird -----\tcodebase_community",
    "343": " SELECT c.Text, MAX(c.Score) as MaxScore\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nGROUP BY c.PostId;\t----- bird -----\tcodebase_community",
    "344": " SELECT COUNT(c.Id)\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.CommentCount = 1 AND c.Score = 0;\t----- bird -----\tcodebase_community",
    "345": " SELECT\n\t----- bird -----\tcodebase_community",
    "346": " SELECT \\* FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "347": " SELECT id, artist, asciiName, availability, borderColor, convertedManaCost, name, number, power, toughness, types, types, watermark\nFROM cards\nWHERE borderColor = 'Borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NULL;\t----- bird -----\tcard_games",
    "348": " SELECT c.name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE c.rarity = 'mythic' AND l.status = 'Banned' AND s.name = 'gladiator';\t----- bird -----\tcard_games",
    "349": " SELECT l.status\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nWHERE c.types = 'Artifact' AND c.side IS NULL AND l.format = 'vintage';\t----- bird -----\tcard_games",
    "350": " SELECT id, artist\nFROM cards\nWHERE (power IS NULL OR power = '*') AND uuid IN (\n    SELECT uuid\n    FROM legalities\n    WHERE format = 'commander' AND status = 'Legal'\n)\t----- bird -----\tcard_games",
    "351": " SELECT id, artist, ruling.text\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE artist = 'Stephen Daniele' AND hasContentWarning = 1;\t----- bird -----\tcard_games",
    "352": " SELECT c.name, c.artist, MAX(COUNT(r.uuid)) as max\\_ruling\\_info\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nWHERE c.isPromo = 1\nGROUP BY c.name, c.artist;\t----- bird -----\tcard_games",
    "353": " SELECT \n  (SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) / COUNT(id)) * 100 \nFROM \n  foreign_data;\n```\n```\t----- bird -----\tcard_games",
    "354": " SELECT COUNT(*) FROM cards WHERE power = '*';\t----- bird -----\tcard_games",
    "355": " SELECT borderColor FROM cards WHERE name = 'Ancestor\\'s Chosen';\t----- bird -----\tcard_games",
    "356": " SELECT rulings.text\nFROM rulings\nJOIN cards ON rulings.uuid = cards.uuid\nWHERE cards.name = 'Benalish Knight';\n```\t----- bird -----\tcard_games",
    "357": " SELECT\n\t----- bird -----\tcard_games",
    "358": " SELECT \n\tROUND(100.0 * (\n\t    (SELECT COUNT(*) FROM foreign_data \n\t     WHERE language = 'French' AND uuid IN (\n\t\t SELECT uuid FROM cards WHERE isStorySpotlight = 1\n\t     ))\n\t) / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1), 2)\n    AS percentage\nFROM cards\nLIMIT 1;\n\nExplanation:\n\n1. Count the number of Story Spotlight cards:\n    SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1\n2. Count the number of French cards among the Story Spotlight cards:\n    SELECT COUNT(*) FROM foreign_data \n    WHERE language = 'French' AND uuid IN (\n        SELECT uuid FROM cards WHERE isStorySpotlight = 1\n    )\n3. Divide the two counts and multiply by 100 to get the percentage.\n4. Use the ROUND function to round the percentage to 2 decimal places.\n5. Limit the result to 1 row.\t----- bird -----\tcard_games",
    "359": " SELECT COUNT(*)\nFROM cards\nWHERE originalType = 'Summon - Angel' AND subtypes NOT LIKE '%Angel%';\n```\n\nThis query will return the number of cards with an original type of \"Summon - Angel\" that have a subtype other than \"Angel\". It uses the WHERE clause to filter the cards table for rows where the originalType column is equal to 'Summon - Angel' and the subtypes column does not contain the string 'Angel'. The COUNT(\\*) function then returns the number of rows that meet these criteria.\n```\t----- bird -----\tcard_games",
    "360": " SELECT id\nFROM cards\nWHERE duelDeck = 'a';\t----- bird -----\tcard_games",
    "361": " SELECT COUNT(*)\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Banned' AND cards.borderColor = 'white';\t----- bird -----\tcard_games",
    "362": " SELECT c.*\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language <> 'en'\n;\t----- bird -----\tcard_games",
    "363": " SELECT cards.manaCost\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE cards.layout = 'normal'\nAND sets.frameVersion = '2003'\nAND cards.borderColor = 'black'\nAND cards.availability = 'mtgo,paper';\t----- bird -----\tcard_games",
    "364": " SELECT \n\t----- bird -----\tcard_games",
    "365": " SELECT COUNT(*)\nFROM set_translations\nWHERE language = 'Portuguese (Brasil)' AND setCode IN (\n    SELECT code\n    FROM sets\n    WHERE block = 'Commander'\n);\t----- bird -----\tcard_games",
    "366": " SELECT DISTINCT types\nFROM cards\nJOIN set\\_translations ON cards.setCode = set\\_translations.setCode\nWHERE set\\_translations.language = 'German';\t----- bird -----\tcard_games",
    "367": " SELECT COUNT(*)\nFROM cards\nWHERE power IS NULL OR power = '*'\nAND (instr(text, 'triggered ability') > 0);\t----- bird -----\tcard_games",
    "368": " SELECT COUNT(*)\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nWHERE cards.side IS NULL AND rulings.text = 'This is a triggered mana ability.';\t----- bird -----\tcard_games",
    "369": " SELECT foreign\\_data.name\nFROM foreign\\_data\nJOIN cards ON foreign\\_data.uuid = cards.uuid\nWHERE foreign\\_data.language = 'French' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson';\t----- bird -----\tcard_games",
    "370": " SELECT set_translations.translation\nFROM set_translations\nJOIN sets ON set_translations.setCode = sets.code\nWHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';\t----- bird -----\tcard_games",
    "371": " SELECT\nDIVIDE(COUNT(c.hasContentWarning = 0), COUNT(c.id))*100 AS percentage\nFROM\ncards c\nJOIN\nlegalities l ON c.uuid = l.uuid\nWHERE\nc.format = 'commander' AND l.status = 'legal';\n```\t----- bird -----\tcard_games",
    "372": " SELECT\n\t----- bird -----\tcard_games",
    "373": " SELECT f.language\nFROM foreign_data f\nJOIN cards c ON f.uuid = c.uuid\nWHERE c.multiverseId = 149934;\t----- bird -----\tcard_games",
    "374": " SELECT 100.0 * COUNT(*) / (\nSELECT COUNT(*) FROM cards\n) AS proportion\nFROM cards\nWHERE isTextless = 1 AND layout = 'normal';\t----- bird -----\tcard_games",
    "375": " SELECT DISTINCT language\nFROM set_translations\nJOIN sets ON set_translations.setCode = sets.code\nWHERE sets.mcmName = 'Archenemy' AND sets.code = 'ARC';\t----- bird -----\tcard_games",
    "376": " SELECT language\nFROM set\\_translations\nJOIN sets ON set\\_translations.setCode = sets.code\nJOIN cards ON sets.code = cards.setCode\nWHERE cards.name = 'A Pedra Fellwar';\t----- bird -----\tcard_games",
    "377": " SELECT c1.name, c1.convertedManaCost\nFROM cards c1\nWHERE c1.name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY c1.convertedManaCost DESC\nLIMIT 1;\n\nThis SQL query will return the name and converted mana cost of the card with the higher converted mana cost between \"Serra Angel\" and \"Shrine Keeper\". The `IN` keyword is used to specify multiple values for the `WHERE` clause, and the `ORDER BY` clause with `DESC` keyword is used to sort the results in descending order of converted mana cost. The `LIMIT` clause is used to return only the top result.\t----- bird -----\tcard_games",
    "378": " SELECT set_translations.translation\nFROM set_translations\nJOIN sets ON set_translations.setCode = sets.code\nJOIN cards ON sets.code = cards.setCode\nWHERE cards.name = 'Ancestor''s Chosen' AND language = 'Italian';\t----- bird -----\tcard_games",
    "379": " SELECT f.name, f.language\nFROM foreign_data f\nJOIN cards c ON f.uuid = c.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND f.language = 'Korean';\t----- bird -----\tcard_games",
    "380": " SELECT COUNT(*)\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE set_translations.translation = 'Hauptset Zehnte Edition' AND foreign_data.artist = 'Adam Rex';\t----- bird -----\tcard_games",
    "381": " SELECT translation\nFROM set_translations\nWHERE setCode = 'Eighth Edition' AND language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "382": " SELECT sets.mtgoCode\nFROM sets\nJOIN cards ON sets.code = cards.setCode\nWHERE cards.name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "383": " SELECT COUNT(DISTINCT s.code)\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ice Age' AND st.language = 'Italian';\t----- bird -----\tcard_games",
    "384": " SELECT sets.isForeignOnly\nFROM sets\nJOIN cards ON sets.code = cards.setCode\nWHERE cards.name = 'Adarkar Valkyrie';\n\nThis SQL query will return the value of the `isForeignOnly` column from the `sets` table for the set containing the card 'Adarkar Valkyrie'.\t----- bird -----\tcard_games",
    "385": " SELECT COUNT(*)\nFROM sets\nWHERE code IN (\n    SELECT setCode\n    FROM set_translations\n    WHERE language = 'Italian'\n) AND baseSetSize < 100;\t----- bird -----\tcard_games",
    "386": " SELECT DISTINCT artist\nFROM cards\nWHERE setCode = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\n```\n```\t----- bird -----\tcard_games",
    "387": " SELECT COUNT(*)\nFROM cards T1\nJOIN sets T2 ON T1.setCode = T2.code\nWHERE T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL) AND T2.name = 'Coldsnap';\t----- bird -----\tcard_games",
    "388": " SELECT foreign\\_data.flavorText\nFROM foreign\\_data\nJOIN cards ON foreign\\_data.uuid = cards.uuid\nJOIN set\\_translations ON cards.setCode = set\\_translations.setCode\nWHERE cards.name = 'Ancestor\\'s Chosen' AND set\\_translations.language = 'Italian';\t----- bird -----\tcard_games",
    "389": " SELECT rulings.text\nFROM rulings\nJOIN cards ON rulings.uuid = cards.uuid\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian';\t----- bird -----\tcard_games",
    "390": " SELECT foreign\\_data.name\nFROM foreign\\_data\nJOIN cards ON foreign\\_data.uuid = cards.uuid\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.code = 'Coldsnap' AND foreign\\_data.language = 'Italian' AND cards.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap')\nORDER BY cards.convertedManaCost DESC;\t----- bird -----\tcard_games",
    "391": " SELECT 100.0 * SUM(case when convertedManaCost = 7 and name = 'Coldsnap' then 1 else 0 end) / SUM(case when name = 'Coldsnap' then 1 else 0 end) as percentage\nFROM cards;\n\nExplanation:\n\n1. We need to find the percentage of cards with a converted mana cost of 7 in the set Coldsnap.\n2. To do this, we can use the following formula: percentage = (number of cards with converted mana cost of 7 in Coldsnap / total number of cards in Coldsnap) \\* 100.\n3. In SQLite, we can use the SUM() function to count the number of cards that meet a certain condition.\n4. We can use the CASE statement to check if the converted mana cost is 7 and if the name of the set is Coldsnap.\n5. We can then divide the sum of the cards with converted mana cost of 7 in Coldsnap by the total number of cards in Coldsnap and multiply by 100 to get the percentage.\n6. The final SQL query would look like this:\n\nSELECT 100.0 \\* SUM(case when convertedManaCost = 7 and name = 'Coldsnap' then 1 else 0 end) / SUM(case when name = 'Coldsnap' then 1 else 0 end) as percentage\nFROM cards;\t----- bird -----\tcard_games",
    "392": " SELECT\n\t----- bird -----\tcard_games",
    "393": " SELECT l.format, c.name\nFROM legalities l\nJOIN cards c ON l.uuid = c.uuid\nJOIN (\n    SELECT format\n    FROM legalities\n    WHERE status = 'Banned'\n    GROUP BY format\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n) f ON l.format = f.format\nWHERE l.status = 'Banned';\t----- bird -----\tcard_games",
    "394": " SELECT name, format\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE edhrecRank = 1 AND status = 'Banned'\nORDER BY name;\t----- bird -----\tcard_games",
    "395": " SELECT cards.name\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Hour of Devastation' AND\n(SELECT status FROM legalities WHERE legalities.uuid = cards.uuid) = 'Legal'\n```\t----- bird -----\tcard_games",
    "396": " SELECT sets.name\nFROM sets\nJOIN set\\_translations ON sets.code = set\\_translations.setCode\nWHERE sets.name NOT LIKE '%Japanese%' AND set\\_translations.language = 'Korean';\t----- bird -----\tcard_games",
    "397": " SELECT DISTINCT frameVersion AS frame\\_style\nFROM cards;\n\nSELECT DISTINCT artist AS allen\\_williams\\_cards\nFROM cards\nWHERE artist = 'Allen Williams';\n\nSELECT uuid AS banned\\_cards\nFROM legalities\nWHERE status = 'Banned';\t----- bird -----\tcard_games",
    "398": " SELECT bond_type, COUNT(*) as bond_count\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nGROUP BY bond_type\nORDER BY bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "399": " SELECT AVG(COUNT(a1.atom_id)) AS avg_oxygen_atoms\nFROM atom a1\nJOIN connected c1 ON a1.atom_id = c1.atom_id\nJOIN bond b1 ON c1.bond_id = b1.bond_id\nJOIN molecule m1 ON b1.molecule_id = m1.molecule_id\nJOIN atom a2 ON c1.atom_id2 = a2.atom_id\nWHERE a1.element = 'o' AND b1.bond_type = '-' AND m1.molecule_id = m1.molecule_id;\t----- bird -----\ttoxicology",
    "400": " SELECT AVG(c.average)\nFROM (\nSELECT m.label, AVG(bond_type = '-') AS average\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE m.label = '+'\nGROUP BY m.molecule_id\n) c;\t----- bird -----\ttoxicology",
    "401": " SELECT DISTINCT m.molecule\\_id\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE b.bond\\_type = '#' AND m.label = '+';\t----- bird -----\ttoxicology",
    "402": " SELECT DIVIDE(SUM(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END), COUNT(atom.atom\\_id)) AS percentage\nFROM atom\nJOIN connected ON atom.atom\\_id = connected.atom\\_id OR atom.atom\\_id = connected.atom\\_id2\nJOIN bond ON connected.bond\\_id = bond.bond\\_id\nWHERE bond.bond\\_type = '='\nGROUP BY connected.molecule\\_id;\t----- bird -----\ttoxicology",
    "403": " SELECT element \nFROM atom \nWHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' \nUNION \nSELECT atom_id2 FROM connected WHERE bond_id = 'TR004_8_9');\t----- bird -----\ttoxicology",
    "404": " SELECT DISTINCT `element`\nFROM `atom` a1\nJOIN `connected` c ON a1.`atom_id` = c.`atom_id`\nJOIN `connected` c2 ON c.`atom_id2` = c2.`atom_id`\nJOIN `atom` a2 ON c2.`atom_id2` = a2.`atom_id`\nJOIN `bond` b ON c.`bond_id` = b.`bond_id`\nWHERE b.`bond_type` = '='\t----- bird -----\ttoxicology",
    "405": " SELECT m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nJOIN atom a2 ON a.atom_id = a2.atom_id2\nWHERE a.element = 'h'\nGROUP BY m.label\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "406": " SELECT element\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '-'\nGROUP BY element\nORDER BY COUNT(element) ASC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "407": " SELECT bond_type\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20')\nOR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8');\t----- bird -----\ttoxicology",
    "408": " SELECT COUNT(DISTINCT a.atom_id)\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a.element = 'i' OR a2.element = 's' AND b.bond_type = '-'\t----- bird -----\ttoxicology",
    "409": " SELECT 100.0 * AVG(CASE WHEN m.label = '+' AND c.element <> 'f' THEN 1.0 ELSE 0.0 END)\nFROM molecule m\nLEFT JOIN connected c ON m.molecule_id = c.atom_id;\n```\t----- bird -----\ttoxicology",
    "410": " SELECT DIVIDE(SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) * 100, COUNT(bond.bond_id)) as percent\nFROM molecule\nJOIN connected ON molecule.molecule_id = connected.molecule_id\nJOIN atom ON connected.atom_id = atom.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule.label = '+';\t----- bird -----\ttoxicology",
    "411": " SELECT DISTINCT element\nFROM atom\nWHERE molecule_id = 'TR000'\nORDER BY element ASC\nLIMIT 3;\t----- bird -----\ttoxicology",
    "412": " SELECT ROUND(100.0 * SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) / COUNT(bond_id), 5) AS percent\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE m.molecule_id = 'TR008';\t----- bird -----\ttoxicology",
    "413": " SELECT ROUND(100.0 * SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(molecule_id), 3) AS percentage\nFROM molecule;\t----- bird -----\ttoxicology",
    "414": " SELECT ROUND(DIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(atom\\_id)) \\* 100, 4) AS percent_hydrogen\nFROM atom\nJOIN molecule ON atom.molecule\\_id = molecule.molecule\\_id\nWHERE molecule.molecule\\_id = 'TR206';\t----- bird -----\ttoxicology",
    "415": " SELECT atom.element, molecule.label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR060';\t----- bird -----\ttoxicology",
    "416": " SELECT bond_type\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY COUNT(*) DESC\nLIMIT 1;\n\n(The above query will give you the majority bond type in molecule TR010. However, I cannot determine if this molecule is carcinogenic or not as this information is not provided in the table schema or the external knowledge.)\t----- bird -----\ttoxicology",
    "417": " SELECT molecule_id\nFROM molecule\nWHERE label = '-' AND molecule_id IN (\n    SELECT molecule_id\n    FROM connected\n    WHERE bond_id IN (\n        SELECT bond_id\n        FROM bond\n        WHERE bond_type = '-'\n    )\n    GROUP BY molecule_id\n    HAVING COUNT(DISTINCT bond_id) = COUNT(DISTINCT atom_id2)\n)\nLIMIT 3;\t----- bird -----\ttoxicology",
    "418": " SELECT COUNT(DISTINCT bond_id)\nFROM connected\nWHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12') AND molecule_id = 'TR009';\t----- bird -----\ttoxicology",
    "419": " SELECT bond.bond_type, atom.atom_id\nFROM connected\nJOIN bond ON connected.bond_id = bond.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE connected.bond_id = 'TR001_6_9'\nOR connected.atom_id2 = 'TR001_6_9';\t----- bird -----\ttoxicology",
    "420": " SELECT COUNT(DISTINCT `bond_id`) as num_connections\nFROM `connected`\nWHERE `atom_id` = 'TR%_19' OR `atom_id2` = 'TR%_19';\t----- bird -----\ttoxicology",
    "421": " SELECT DISTINCT element\nFROM atom\nWHERE molecule_id = 'TR004';\t----- bird -----\ttoxicology",
    "422": " SELECT DISTINCT m.molecule\\_id\nFROM atom a\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nJOIN connected c1 ON a.atom\\_id = c1.atom\\_id\nJOIN connected c2 ON c1.atom\\_id2 = c2.atom\\_id2\nJOIN atom a2 ON c2.atom\\_id = a2.atom\\_id\nWHERE a.atom\\_id BETWEEN 'A21' AND 'A25' AND m.label = '+'\t----- bird -----\ttoxicology",
    "423": " SELECT DISTINCT b.bond_id\nFROM bond b\nJOIN connected c1 ON b.bond_id = c1.bond_id\nJOIN atom a1 ON c1.atom_id2 = a1.atom_id\nJOIN connected c2 ON b.bond_id = c2.bond_id\nJOIN atom a2 ON c2.atom_id2 = a2.atom_id\nWHERE a1.element = 'p' AND a2.element = 'n';\t----- bird -----\ttoxicology",
    "424": " SELECT m.molecule_id, m.label, COUNT(b.bond_id) as double_bond_count\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_type = ' = '\nGROUP BY m.molecule_id, m.label\nORDER BY double_bond_count DESC\nLIMIT 1;\t----- bird -----\ttoxicology",
    "425": " SELECT AVG(bond_count)\nFROM (\n    SELECT COUNT(c.bond_id) as bond_count\n    FROM connected c\n    JOIN atom a ON c.atom_id2 = a.atom_id\n    WHERE a.element = 'i'\n    GROUP BY c.atom_id\n) subquery;\t----- bird -----\ttoxicology",
    "426": " SELECT DISTINCT element\nFROM atom\nWHERE atom_id NOT IN (SELECT atom_id FROM connected) OR atom_id NOT IN (SELECT atom_id2 FROM connected);\t----- bird -----\ttoxicology",
    "427": " SELECT atom.*\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE molecule_id = 'TR041' AND bond_type = '#';\t----- bird -----\ttoxicology",
    "428": " SELECT element \nFROM atom \nJOIN connected ON atom.atom_id = connected.atom_id \nWHERE connected.bond_id = 'TR144_8_19';\t----- bird -----\ttoxicology",
    "429": " SELECT DISTINCT element\nFROM atom a1\nJOIN connected c1 ON a1.atom_id = c1.atom_id1\nJOIN bond b1 ON c1.bond_id = b1.bond_id\nWHERE b1.bond_type = '#';\t----- bird -----\ttoxicology",
    "430": " SELECT\n\t----- bird -----\ttoxicology",
    "431": " SELECT COUNT(DISTINCT a.atom\\_id)\nFROM atom a\nJOIN connected c ON a.atom\\_id = c.atom\\_id OR a.atom\\_id = c.atom\\_id2\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nJOIN molecule m ON a.molecule\\_id = m.molecule\\_id\nWHERE (a.element = 'p' OR a.element = 'br') AND b.bond\\_type = '#';\t----- bird -----\ttoxicology",
    "432": " SELECT DIVIDE(SUM(CASE WHEN element = 'cl' THEN 1 ELSE 0 END), COUNT(atom\\_id)) AS percent\nFROM atom a\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nJOIN bond b ON c.bond\\_id = b.bond\\_id\nWHERE b.bond\\_type = '-'\nGROUP BY a.molecule\\_id;\t----- bird -----\ttoxicology",
    "433": " SELECT `element`\nFROM `atom`\nWHERE `atom_id` IN (\n    SELECT `atom_id`\n    FROM `connected`\n    WHERE `bond_id` = 'TR001_10_11'\n    UNION\n    SELECT `atom_id2`\n    FROM `connected`\n    WHERE `bond_id` = 'TR001_10_11'\n);\t----- bird -----\ttoxicology",
    "434": " SELECT DIVIDE(SUM(CASE WHEN element = 'cl' THEN 1 END), COUNT(*)) * 100 AS percentage\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '+';\t----- bird -----\ttoxicology",
    "435": " SELECT m.molecule\\_id, a.element\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nJOIN atom a2 ON c.atom\\_id2 = a2.atom\\_id\nWHERE m.label = '+' AND substr(a2.atom\\_id, 7, 1) = '4' AND a.element IS NOT NULL;\t----- bird -----\ttoxicology",
    "436": " SELECT\nDIVIDE(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END), COUNT(*)) AS hydrogen_ratio,\nmolecule.label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.molecule_id = 'TR006'\nGROUP BY molecule.molecule_id, molecule.label;\t----- bird -----\ttoxicology",
    "437": " SELECT m.molecule\\_id, m.label\nFROM molecule m\nJOIN atom a ON m.molecule\\_id = a.molecule\\_id\nJOIN connected c ON a.atom\\_id = c.atom\\_id\nGROUP BY m.molecule\\_id, m.label\nHAVING COUNT(DISTINCT a.atom\\_id) > 5 AND m.label = '-';\t----- bird -----\ttoxicology",
    "438": " SELECT COUNT(*)\nFROM satscores\nWHERE AvgScrMath > 400 AND Virtual = 'F';\t----- bird -----\tcalifornia_schools",
    "439": " SELECT CDSCode\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;\t----- bird -----\tcalifornia_schools",
    "440": " SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`)\nFROM frpm\nJOIN satscores\nON frpm.CDSCode = satscores.cds\nWHERE NumGE1500 / NumTstTakr > 0.3;\t----- bird -----\tcalifornia_schools",
    "441": " SELECT cds, AvgScrWrite, CharterNum\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE AvgScrWrite > 499\nORDER BY AvgScrWrite DESC;\t----- bird -----\tcalifornia_schools",
    "442": " SELECT\n    `School Name` as school\\_name, \n    Street || ', ' || City || ', ' || State as full\\_address\nFROM\n    frpm\nWHERE\n    `Enrollment (K-1\t----- bird -----\tcalifornia_schools",
    "443": " SELECT s.School\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nJOIN satscores st ON s.CDSCode = st.cds\nWHERE f.`Percent (%) Eligible Free (K-1\t----- bird -----\tcalifornia_schools",
    "444": " SELECT s.FundingType\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.County = 'Riverside' AND sat.AvgScrMath / COUNT(DISTINCT sat.cds) > 400\nGROUP BY s.CDSCode;\t----- bird -----\tcalifornia_schools",
    "445": " SELECT s.School, s.Street, s.City, s.State, s.Zip\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.District = 'Monterey' AND f.`FRPM Count (Ages 5-17)` > 800 AND f.`High Grade` = '12'\nORDER BY f.`FRPM Count (Ages 5-17)` DESC;\t----- bird -----\tcalifornia_schools",
    "446": " SELECT sname, AvgScrWrite\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE schools.OpenDate > '1991-01-01' AND (schools.ClosedDate IS NULL OR schools.ClosedDate < '2000-01-01')\nORDER BY AvgScrWrite DESC, sname;\t----- bird -----\tcalifornia_schools",
    "447": " SELECT s.School, s.DOCType\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.FundingType = 'Locally Funded'\nGROUP BY s.School, s.DOCType\nHAVING AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) < AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`)\nFILTER (WHERE s.FundingType = 'Locally Funded');\t----- bird -----\tcalifornia_schools",
    "448": " SELECT\n\t----- bird -----\tcalifornia_schools",
    "449": " SELECT\n\t----- bird -----\tcalifornia_schools",
    "450": " SELECT s.Street, s.City, s.State, s.Zip\nFROM schools s\nJOIN satscores st ON s.CDSCode = st.cds\nORDER BY st.NumGE1500 / st.NumTstTakr ASC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "451": " SELECT s.AdmFName1, s.AdmLName1\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.NumGE1500 = (\n    SELECT MAX(NumGE1500)\n    FROM satscores\n)\nORDER BY ss.NumGE1500 DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "452": " SELECT AVG(NumTstTakr) \nFROM satscores \nJOIN schools ON satscores.cds = schools.CDSCode \nWHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' \nAND schools.District = 'Fresno';\t----- bird -----\tcalifornia_schools",
    "453": " SELECT phone\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.District = 'Fresno Unified'\nAND AvgScrRead = (\nSELECT MIN(AvgScrRead)\nFROM satscores\nWHERE rtype = 'High'\n);\t----- bird -----\tcalifornia_schools",
    "454": " SELECT s.CDSCode, s.School, AVG(sat.AvgScrRead) as AvgReadScore\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE s.Virtual = 'T'\nGROUP BY s.County, s.CDSCode\nHAVING COUNT(DISTINCT s.CDSCode) <= 5 AND AvgReadScore = (\n    SELECT MAX(AvgReadScore)\n    FROM (\n        SELECT s.County, AVG(sat.AvgScrRead) as AvgReadScore\n        FROM schools s\n        JOIN satscores sat ON s.CDSCode = sat.cds\n        WHERE s.Virtual = 'T' AND s.County = schools.County\n        GROUP BY s.County, s.CDSCode\n    )\n)\nORDER BY s.County, AvgReadScore DESC;\t----- bird -----\tcalifornia_schools",
    "455": " SELECT sname, AVG(AvgScrWrite) as AvgWritingScore\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE AdminEmail1 = 'Ricci.Ulrich@example.com' OR AdminEmail2 = 'Ricci.Ulrich@example.com' OR AdminEmail3 = 'Ricci.Ulrich@example.com'\nGROUP BY sname;\t----- bird -----\tcalifornia_schools",
    "456": " SELECT s.CDSCode, s.DOC, s.DOCType, fr.Enrollment\\_12\nFROM schools s\nJOIN frpm fr ON s.CDSCode = fr.CDSCode\nWHERE s.DOC = 31 AND fr.Enrollment\\_12 IS NOT NULL\nORDER BY fr.Enrollment\\_12 DESC\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "457": " SELECT AVG(strftime('%m', OpenDate)) AS monthly\\_average\nFROM schools\nWHERE County = 'Alameda' AND DOC = 52 AND strftime('%Y', OpenDate) = 1980;\t----- bird -----\tcalifornia_schools",
    "458": " SELECT \n       SUM(CASE WHEN frpm.DOC = 54 AND schools.County = 'Orange' THEN 1 ELSE 0 END) /\n       SUM(CASE WHEN frpm.DOC = 52 AND schools.County = 'Orange' THEN 1 ELSE 0 END) \nFROM \n       frpm \nJOIN \n       schools \nON \n       frpm.CDSCode = schools.CDSCode;\t----- bird -----\tcalifornia_schools",
    "459": " SELECT sname, Street || ' ' || StreetAbr || ' ' || City || ' ' || Zip as postal_address\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE AvgScrMath = (\n    SELECT AvgScrMath\n    FROM satscores\n    JOIN schools ON satscores.cds = schools.CDSCode\n    GROUP BY cds\n    ORDER BY AvgScrMath DESC\n    LIMIT 1 OFFSET 6\n)\nLIMIT 1;\t----- bird -----\tcalifornia_schools",
    "460": " SELECT COUNT(\\*)\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE Charter = 0 AND `Percent (%) Eligible Free (K-12)` < 0.18 AND `County Name` = 'Los Angeles';\t----- bird -----\tcalifornia_schools",
    "461": " SELECT SUM(Enrollment (Ages 5-17)) as total_enrollment\nFROM frpm\nWHERE `Academic Year` = '2014-2015' AND `County Name` = 'Fremont' AND EdOpsCode = 'SSS';\t----- bird -----\tcalifornia_schools",
    "462": " SELECT s.CDSCode, s.School, s.County, \n(`FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)`\nFROM frpm\nJOIN schools s ON frpm.CDSCode = s.CDSCode\nWHERE s.County = 'Los Angeles' AND `Low Grade` = 'K' AND `High Grade` = '9'\nORDER BY `Percent (%) Eligible FRPM (Ages 5-17)` DESC;\t----- bird -----\tcalifornia_schools",
    "463": " SELECT s.County, COUNT(s.CDSCode) as num\\_virtual\\_schools\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.Virtual = 'T' AND s.County IN ('San Diego', 'Santa Barbara')\nGROUP BY s.County;\n```sql\n\nThis query will return the count of schools that do not offer a physical building (Virtual = 'T') for each of the counties San Diego and Santa Barbara.\n```\t----- bird -----\tcalifornia_schools",
    "464": " SELECT s.GSoffered\nFROM schools s\nJOIN (\n    SELECT CDSCode\n    FROM schools\n    WHERE Longitude = (\n        SELECT MAX(abs(Longitude))\n        FROM schools\n    )\n) max_longitude\nON s.CDSCode = max_longitude.CDSCode;\t----- bird -----\tcalifornia_schools",
    "465": " SELECT \n    city, \n    COUNT(*) as num_schools\nFROM (\n    SELECT \n        s.City, \n        f.CDSCode\n    FROM \n        schools s\n        JOIN frpm f ON s.CDSCode = f.CDSCode\n    WHERE \n        s.Magnet = 1 \n        AND f.`District Type` = 'K-8'\n        AND f.`NSLP Provision Status` = 'Multiple Provision Types'\n)\nGROUP BY \n    city;\t----- bird -----\tcalifornia_schools",
    "466": " SELECT DistrictCode, 100.0 \\* `Free Meal Count (K-12)` / `Enrollment (K-1\t----- bird -----\tcalifornia_schools",
    "467": " SELECT DISTINCT AdmEmail1 || ',' || AdmEmail2 || ',' || AdmEmail3 as valid_emails\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE County = 'San Bernardino'\nAND City = 'San Bernardino City Unified'\nAND StatusType = 'Public'\nAND (DOC = '54' OR SOC = '62')\nAND OpenDate BETWEEN '2009-01-01' AND '2010-12-31';\t----- bird -----\tcalifornia_schools",
    "468": " SELECT COUNT(DISTINCT a.account_id)\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A3 = 'V\u00fdchodn\u00ed \u010cechy' AND a.frequency = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "469": " SELECT COUNT(DISTINCT A.district_id)\nFROM district AS A\nJOIN client AS B ON A.district_id = B.district_id\nJOIN account AS C ON B.client_id = C.client_id\nWHERE A.A11 BETWEEN 6000 AND 10000 AND B.gender = 'F';\t----- bird -----\tfinancial",
    "470": " SELECT COUNT(*)\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;\t----- bird -----\tfinancial",
    "471": " SELECT account_id\nFROM disp\nJOIN client ON disp.client_id = client.client_id\nWHERE gender = 'F'\nAND birth_date = (SELECT MAX(birth_date) FROM client)\nAND client.client_id IN (SELECT client_id FROM district WHERE A11 = (SELECT MIN(A11) FROM district))\n\n-- Get the account id of the oldest female client with the lowest average salary\n\nSELECT MAX(A11) - MIN(A11) AS Gap\nFROM district\nWHERE A11 <> (SELECT A11 FROM district WHERE A11 IS NULL)\n\n-- Calculate the gap between the lowest and highest average salary\t----- bird -----\tfinancial",
    "472": " SELECT account_id\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE birth_date IN (SELECT MIN(birth_date) FROM client)\nAND A11 IN (SELECT MAX(A11) FROM district);\t----- bird -----\tfinancial",
    "473": " SELECT account_id, min(amount) as min_amount\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE strftime('%Y', date) = '1997' AND frequency = 'POPLATEK TYDNE'\nGROUP BY account_id;\t----- bird -----\tfinancial",
    "474": " SELECT account_id, amount\nFROM loan\nWHERE duration > 12 AND strftime('%Y', date) = '1993'\nJOIN account ON loan.account\\_id = account.account\\_id\nORDER BY amount DESC\nLIMIT 1;\t----- bird -----\tfinancial",
    "475": " SELECT COUNT(*)\nFROM client c\nJOIN account a ON c.client\\_id = a.client\\_id\nWHERE c.gender = 'F' AND c.birth\\_date < '1950-01-01' AND c.district\\_id = (\nSELECT district\\_id FROM district WHERE A2 = 'Sokolov'\n)\t----- bird -----\tfinancial",
    "476": " SELECT district.A2\nFROM district\nJOIN client ON district.district\\_id = client.district\\_id\nWHERE client.gender = 'F' AND client.birth\\_date = '1976-01-29';\t----- bird -----\tfinancial",
    "477": " SELECT (COUNT(c.client\\_id) FILTER (WHERE c.gender = 'M')) * 100.0 / COUNT(c.client\\_id) AS percentage\\_of\\_male\\_clients\nFROM client c\nJOIN district d ON c.district\\_id = d.district\\_id\nWHERE d.A3 = 'south Bohemia' AND d.A4 = (SELECT MAX(d2.A4) FROM district d2 WHERE d2.A3 = 'south Bohemia');\t----- bird -----\tfinancial",
    "478": " SELECT\n\t(t2.balance - t1.balance) * 100.0 / t1.balance AS increase_rate\nFROM\n\ttrans t1\n\tJOIN trans t2 ON t1.account_id = t2.account_id\n\tJOIN loan l ON t1.account_id = l.account_id\nWHERE\n\tl.date = (\n\t\tSELECT\n\t\t\tMIN(date)\n\t\tFROM\n\t\t\tloan\n\t\tWHERE\n\t\t\tdate >= '1993-07-05'\n\t)\n\tAND t1.date = (\n\t\tSELECT\n\t\t\tMAX(date)\n\t\tFROM\n\t\t\ttrans\n\t\tWHERE\n\t\t\tdate <= '1993-03-22'\n\t\t\tAND account_id = t1.account_id\n\t)\n\tAND t2.date = (\n\t\tSELECT\n\t\t\tMIN(date)\n\t\tFROM\n\t\t\ttrans\n\t\tWHERE\n\t\t\tdate >= '1993-03-22'\n\t\t\tAND account_id = t1.account_id\n\t);\t----- bird -----\tfinancial",
    "479": " SELECT 100.0 * SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) / SUM(loan.amount) AS percentage\nFROM loan;\t----- bird -----\tfinancial",
    "480": " SELECT\n100.0 * SUM(CASE WHEN l.amount < 100000 AND l.status = 'C' THEN l.amount ELSE 0 END) / SUM(l.amount) AS percentage\nFROM\nloan l\nJOIN\naccount a ON l.account_id = a.account_id;\t----- bird -----\tfinancial",
    "481": " SELECT district.A2 AS district,\n (district.A13 - district.A12) / district.A12 * 100 AS unemployment_increment_percentage\nFROM district, loan\nWHERE loan.status = 'D' AND loan.account_id = trans.account_id AND district.district\\_id = account.district\\_id\nGROUP BY district.district\\_id;\t----- bird -----\tfinancial",
    "482": " SELECT A2 as District, COUNT(*) as Number_of_Female_Account_Holders\nFROM client\nJOIN disp ON client.client\\_id = disp.client\\_id\nJOIN account ON disp.account\\_id = account.account\\_id\nWHERE gender = 'F'\nGROUP BY A2\nORDER BY Number\\_of\\_Female\\_Account\\_Holders DESC\nLIMIT 9;\t----- bird -----\tfinancial",
    "483": " SELECT COUNT(loan_id)\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.date BETWEEN '1995-01-01' AND '1997-12-31'\nAND loan.amount >= 250000\nAND account.frequency = 'POPLATEK MESICNE';\t----- bird -----\tfinancial",
    "484": " SELECT COUNT(*)\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = '1' AND a.frequency = 'C';\t----- bird -----\tfinancial",
    "485": " SELECT COUNT(client.client_id)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE district.A15 = (SELECT MAX(district.A15) FROM district WHERE district.A15 < (SELECT MAX(district.A15) FROM district WHERE district.A2 = 'branch_name')) AND client.gender = 'M';\n\nJust replace 'branch\\_name' with the actual name of the branch where the second-highest number of crimes were committed in 1995.\t----- bird -----\tfinancial",
    "486": " SELECT\ndistrict.A2 as district_name,\nSUM(trans.amount) as total_withdrawal\nFROM\ntrans\nJOIN\naccount ON trans.account_id = account.account_id\nJOIN\ndistrict ON account.district_id = district.district_id\nWHERE\ntrans.type = 'VYDAJ' AND trans.date LIKE '1996-01%'\nGROUP BY\ndistrict.A2\nORDER BY\ntotal_withdrawal DESC\nLIMIT 10;\t----- bird -----\tfinancial",
    "487": " SELECT COUNT(*)\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = '1' AND a.frequency = 'C';\t----- bird -----\tfinancial",
    "488": " SELECT COUNT(client.client_id)\nFROM client\nJOIN district ON client.district_id = district.district_id\nWHERE district.A15 = (SELECT MAX(district.A15) FROM district WHERE district.A15 < (SELECT MAX(district.A15) FROM district WHERE district.A2 = 'branch_name')) AND client.gender = 'M';\n\nJust replace 'branch\\_name' with the actual name of the branch where the second-highest number of crimes were committed in 1995.\t----- bird -----\tfinancial",
    "489": " SELECT DISTINCT account_id\nFROM trans\nWHERE type = 'credit card' AND amount < (\n    SELECT AVG(amount)\n    FROM trans\n    WHERE type = 'credit card' AND date LIKE '1998-%'\n) AND date LIKE '1998-%';\t----- bird -----\tfinancial",
    "490": " SELECT DISTINCT account.type\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE account.type != 'OWNER' AND A11 < 9000 AND A11 >= 8000;\t----- bird -----\tfinancial",
    "491": " SELECT AVG(district.A15) as avg_crime_1995\nFROM district\nJOIN account ON district.district_id = account.district_id\nWHERE district.A15 > 4000 AND account.date >= '1997-01-01' AND district.A3 IS NOT NULL;\t----- bird -----\tfinancial",
    "492": " SELECT t.trans\\_id, t.date, t.type, t.operation, t.amount, t.balance\nFROM trans t\nJOIN disp d ON t.account\\_id = d.account\\_id\nJOIN client c ON d.client\\_id = c.client\\_id\nWHERE c.client\\_id = 3356 AND t.type = 'VYBER';\t----- bird -----\tfinancial",
    "493": " SELECT 100.0 * COUNT(c.client\\_id) / (\nSELECT COUNT(c.client\\_id)\nFROM client c\nJOIN district d ON c.district\\_id = d.district\\_id\nWHERE d.A11 > 10000) AS percentage\nFROM client c\nJOIN district d ON c.district_id = d.district\\_id\nJOIN disp disp ON c.client\\_id = disp.client\\_id\nJOIN account acc ON disp.account\\_id = acc.account\\_id\nWHERE d.A11 > 10000 AND c.gender = 'F'\nGROUP BY c.district\\_id;\t----- bird -----\tfinancial",
    "494": " SELECT 100.0 * (SUM(l1997.amount) - SUM(l1996.amount)) / SUM(l1996.amount) AS growth_rate\nFROM loan l1996, loan l1997\nJOIN account a ON l1996.account_id = a.account_id AND l1997.account_id = a.account_id\nJOIN client c ON a.client_id = c.client_id\nWHERE c.gender = 'M' AND l1996.date BETWEEN '1996-01-01' AND '1996-12-31' AND l1997.date BETWEEN '1997-01-01' AND '1997-12-31';\t----- bird -----\tfinancial",
    "495": " SELECT frequency, SUM(amount) as total_debit_amount\nFROM account\nJOIN trans ON account.account_id = trans.account_id\nWHERE account.account_id = 3 AND trans.type = 'debit' AND trans.operation = 'release'\nGROUP BY frequency;\t----- bird -----\tfinancial",
    "496": " SELECT 100.0 * COUNT(c.client\\_id) / (\nSELECT COUNT(DISTINCT o.account\\_id)\nFROM `order` o\nJOIN account a ON o.account\\_id = a.account\\_id\nWHERE a.frequency = 'POPLATEK TYDNE'\n) AS percentage\nFROM client c\nWHERE c.gender = 'M' AND c.client\\_id IN (\nSELECT disp.client\\_id\nFROM disp\nJOIN account a ON disp.account\\_id = a.account\\_id\nJOIN `order` o ON a.account\\_id = o.account\\_id\nWHERE a.frequency = 'POPLATEK TYDNE'\n);\t----- bird -----\tfinancial",
    "497": " SELECT account_id\nFROM disp\nJOIN client ON disp.client_id = client.client_id\nWHERE gender = 'F'\nAND A11 = (SELECT MIN(A11) FROM district)\nAND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F');\t----- bird -----\tfinancial",
    "498": " SELECT AVG(loan.amount)\nFROM loan\nJOIN account ON loan.account_id = account.account_id\nWHERE loan.status = 'C' AND account.frequency = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "499": " SELECT client.client\\_id, client.birth\\_date,\nJULIANDAY(CURRENT\\_DATE) - JULIANDAY(client.birth\\_date) AS age\nFROM client\nJOIN disp ON client.client\\_id = disp.client\\_id\nJOIN card ON disp.account\\_id = card.disp\\_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';\t----- bird -----\tfinancial"
}